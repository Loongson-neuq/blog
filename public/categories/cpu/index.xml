<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CPU on NEUQ 龙芯实验室博客</title><link>https://loongson-neuq.pages.dev/categories/cpu/</link><description>Recent content in CPU on NEUQ 龙芯实验室博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 14 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://loongson-neuq.pages.dev/categories/cpu/index.xml" rel="self" type="application/rss+xml"/><item><title>龙芯实验攻略</title><link>https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/</guid><description>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://bookdown.org/loongson/_book3/" target="_blank" rel="noopener"
>实验手册&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local" target="_blank" rel="noopener"
>实验代码仓库&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="exp620条指令单周期cpu">exp6：20条指令单周期CPU
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &lt;a class="link" href="https://library.vincent-ice.me/posts/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener"
>学习使用龙芯提供的基于trace比对的调试框架&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习龙芯提供的单周期CPU的&lt;strong>数据通路&lt;/strong>&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &lt;a class="link" href="https://library.vincent-ice.me/posts/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener"
>学习基本仿真调试思路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习使用trace比对的CPU系统调试&lt;/li>
&lt;/ul>
&lt;h3 id="数据通路">数据通路
&lt;/h3>&lt;p>数据通路是芯片上最重要的“路”之一，介于初学时对CPU的数据通路不够了解，自己动手拼搭模块会无从下手，我们建议学习现有的CPU的数据通路，这里我们采用龙芯实验代码仓库中提供的&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local/tree/master/mycpu_env/myCPU" target="_blank" rel="noopener"
>单周期CPU&lt;/a>（存在错误需要调试）。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath.png"
width="1024"
height="443"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath_hu96000dc7cc64683fddab428c239ee9b0_106858_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath_hu96000dc7cc64683fddab428c239ee9b0_106858_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;p>简单的数据通路结构图，请自己理解给出的单周期CPU的结构、不同部件之间如何协同工作、各个控制信号如何控制数据的流动。&lt;/p>
&lt;p>CPU的debug实际上就是在观察数据通路上各处流动的数据是不是我们想要的数据，然后修改控制信号的逻辑或者数据通路本身以获得预期结果。&lt;/p>
&lt;h3 id="调试tips">调试Tips
&lt;/h3>&lt;ol>
&lt;li>善用反汇编文件（&lt;code>func/obj/test.s&lt;/code>）查询某个PC对应的指令&lt;/li>
&lt;li>当CPU的第一条指令都没有成功运行，而你一点思路都没有的话，不妨试着在数据通路图上模拟运行一遍第一条指令&lt;/li>
&lt;li>运行过程中的Error一般出在之前成功运行的指令都没有用的部分&lt;/li>
&lt;/ol>
&lt;h2 id="exp7不考虑相关冲突处理的简单流水线cpu">exp7：不考虑相关冲突处理的简单流水线CPU
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习流水线的基本概念（课上讲义、百度、&lt;a class="link" href="https://foxsen.github.io/archbase/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF.html#sec-pipeline-cpu" target="_blank" rel="noopener"
>计算机体系结构基础&lt;/a>）&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 多周期CPU的概念&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 修改单周期CPU，使其流水线化&lt;/li>
&lt;/ul>
&lt;h3 id="流水线的作用">流水线的作用
&lt;/h3>&lt;p>随着CPU电路中组合逻辑部分越来越复杂，其延迟也必然增大，整个电路的频率就会变低。&lt;/p>
&lt;p>在单周期CPU中，每个时钟周期必须完成取指、译码、读寄存器、执行、访存等很多组合逻辑工作，为了保证在下一个时钟上升沿到来之前准备好寄存器堆的写数据，需要将每个时钟周期的间隔拉长，导致处理器的主频无法提高，使用流水线技术可以提高处理器的主频。&lt;/p>
&lt;blockquote>
&lt;p>在这里我将跳过流水线的基本概念，直接分析经典的五级静态单发射流水线CPU。&lt;/p>
&lt;/blockquote>
&lt;h3 id="修改步骤">修改步骤
&lt;/h3>&lt;h4 id="划分流水级">划分流水级
&lt;/h4>&lt;p>按照经典五级流水线，我们将单周期CPU的处理流程划分为五个阶段：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IF（取指）&lt;/strong>：从指令存储器读取指令。&lt;/li>
&lt;li>&lt;strong>ID（译码）&lt;/strong>：解析指令，读取寄存器堆数据。&lt;/li>
&lt;li>&lt;strong>EX（执行）&lt;/strong>：执行算术/逻辑运算或计算地址。&lt;/li>
&lt;li>&lt;strong>MEM（访存）&lt;/strong>：访问数据存储器（如加载/存储指令）。&lt;/li>
&lt;li>&lt;strong>WB（写回）&lt;/strong>：将结果写回寄存器堆。&lt;/li>
&lt;/ul>
&lt;h4 id="插入流水线寄存器">插入流水线寄存器
&lt;/h4>&lt;p>在流水线中，每一级都可能处理着不同的指令，这时我们就需要一些存储当前级指令信息的级间寄存器，这些级间寄存器储存着指令相关的数据和控制信息以供当前级处理使用。&lt;/p>
&lt;p>&lt;a name="数据通路流水线">&lt;/a> 以下是流水线化后的CPU数据通路示意图：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF.png"
width="1299"
height="507"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF_huc900496a16e8ff47f7506fc23b58fe3c_307729_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF_huc900496a16e8ff47f7506fc23b58fe3c_307729_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="datapath-简单流水线"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h3 id="调试tips-1">调试Tips
&lt;/h3>&lt;ol>
&lt;li>调整CPU顶层接口，增加指令RAM的片选信号 &lt;code>inst_sram_en&lt;/code> 和数据RAM的片选信号 &lt;code>data_sram_en&lt;/code>&lt;/li>
&lt;li>调整CPU顶层接口，将&lt;code>inst_sram_we&lt;/code> 和 &lt;code>data_sram_we&lt;/code> 都从1比特的写使能调整为4比特的字节写使能&lt;/li>
&lt;li>在流水线CPU中，调试定错可以基于级间寄存器的内容判断&lt;/li>
&lt;li>各级流水线中命名需要有命名逻辑，很容易找不到&lt;/li>
&lt;/ol>
&lt;h2 id="exp8阻塞技术解决相关引发的冲突">exp8：阻塞技术解决相关引发的冲突
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 流水线CPU的运行过程&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 流水线冲突以及如何处理流水线冲突（阻塞方法）&lt;/li>
&lt;/ul>
&lt;h3 id="流水线冲突">流水线冲突
&lt;/h3>&lt;p>&lt;strong>流水线冲突（Hazard）&lt;/strong> 是指由于指令在流水线中并行执行时产生的依赖关系或资源竞争，导致后续指令无法正常执行的现象。主要分为三类：数据相关、控制相关和结构相关。&lt;/p>
&lt;h4 id="数据冲突">数据冲突
&lt;/h4>&lt;p>数据相关根据冲突访问读和写的次序可以分为3种。&lt;/p>
&lt;ol>
&lt;li>写后读（Read After Write,简称RAW）相关，即后面指令要用到前面指令所写的数据，也称为真相关。&lt;/li>
&lt;li>写后写（Write After Write,简称WAW）相关，即两条指令写同一个单元，也称为输出相关。&lt;/li>
&lt;li>读后写（Write After Read,简称WAR）相关，即后面的指令覆盖前面指令所读的单元，也称为反相关。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>在静态五级流水线CPU中，仅会出现RAW相关流水线冲突，WAW和WAR在乱序流水线中需要考虑。&lt;/p>
&lt;/blockquote>
&lt;p>对于以下两条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第2条指令的源寄存器&lt;code>r2&lt;/code>为第1条指令的目的寄存器，即存在RAW相关。其时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B.webp"
width="931"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;p>我们注意到在第3个时钟周期时，第2条指令读取&lt;code>r2&lt;/code>寄存器的值，但此时第1条指令未执行写回，也就是说读取到&lt;code>r2&lt;/code>寄存器的值并非是最新的、正确的值，第2条指令的运行数据必然是错误的。&lt;/p>
&lt;p>为了保证执行的正确，一种最直接的解决方式是让第2条指令在译码阶段&lt;strong>等待（阻塞）3拍&lt;/strong>，直到第1条指令将结果写入寄存器后才能读取寄存器，进入后续的执行阶段。这时时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E.webp"
width="1021"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E_hu1eff70aeac03fe3a7cbcf17fea7edf87_9158_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E_hu1eff70aeac03fe3a7cbcf17fea7edf87_9158_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="423"
data-flex-basis="1016px"
>&lt;/p>
&lt;h4 id="控制冲突">控制冲突
&lt;/h4>&lt;p>控制冲突主要是由于分支/跳转指令导致后续指令的取指目标不确定。&lt;/p>
&lt;p>对于以下的指令序列：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jirl&lt;/span> &lt;span class="no">$r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6.webp"
width="838"
height="287"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6_hub11051a98a84252ca870657974d84de1_12098_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6_hub11051a98a84252ca870657974d84de1_12098_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="700px"
>&lt;/p>
&lt;p>我们注意到在第3周期&lt;code>jirl&lt;/code>指令被执行的时候，两条&lt;code>add.w&lt;/code>指令已经进入流水线，而这两条指令是不需要被执行的，这就引发了控制冲突。&lt;/p>
&lt;p>为了解决这个问题，可以通过在取指阶段引入2拍的流水线阻塞来解决，此时时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E.webp"
width="1011"
height="287"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E_hu6d514a7baa4cf5e89fface0e5993f529_11678_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E_hu6d514a7baa4cf5e89fface0e5993f529_11678_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="352"
data-flex-basis="845px"
>&lt;/p>
&lt;p>在单发射5级静态流水线中，如果增加专用的运算资源&lt;strong>将转移指令条件判断和计算下一条指令PC的处理调整到译码阶段&lt;/strong>，那么转移指令后面的指令只需要在取指阶段等1拍。&lt;/p>
&lt;blockquote>
&lt;p>在前文中的&lt;a href="#数据通路流水线">数据通路图&lt;/a>中，我其实已经将跳转处理调整到译码阶段了。&lt;/p>
&lt;/blockquote>
&lt;p>为更进一步减少由控制相关引起的阻塞，可以采用转移指令的&lt;strong>延迟槽&lt;/strong>技术，在定义指令系统的时候就明确转移指令延迟槽指令的执行不依赖于转移指令的结果（如MIPS），这样转移指令后面的指令在取指阶段1拍也不用等。&lt;/p>
&lt;p>另外一种思路是&lt;strong>分支预测&lt;/strong>，通过合理的方式对跳转目标PC的预测以消除等待计算的时间，具体可参考《超标量处理器设计》一书中分支预测&lt;a class="link" href="https://www.cnblogs.com/lyc-seu/p/16995926.html" target="_blank" rel="noopener"
>相关部分&lt;/a>。&lt;/p>
&lt;h4 id="结构冲突">结构冲突
&lt;/h4>&lt;p>结构相关引起冲突的原因是两条指令要同时访问流水线中的同一个功能部件。&lt;/p>
&lt;p>回顾前文中使用阻塞处理冲突时，被阻塞的指令之后的指令也由于执行部件被占用而无法在流水线中执行，一起被堵在后面。&lt;/p>
&lt;p>再回顾前文中数据通路，我们发现有指令、数据两个存储器（哈佛架构），这其实也是为了解决取指和访存同时读取存储器的结构冲突。&lt;/p>
&lt;h3 id="流水线冲突的解决">流水线冲突的解决
&lt;/h3>&lt;p>流水线冲突的解决方式主要分为两种：&lt;strong>阻塞&lt;/strong>和&lt;strong>旁路&lt;/strong>。&lt;/p>
&lt;h4 id="阻塞">阻塞
&lt;/h4>&lt;p>在前文讲解流水线冲突的过程中，我们均采用的是阻塞方法，即一个字：等！等到该准备的都准备好了再执行。其优点是控制逻辑简单，无需添加很多电路单元；当然其缺点也很明显，CPU大部分时间都在摸鱼了，造成了很大的性能浪费。&lt;/p>
&lt;h4 id="旁路">旁路
&lt;/h4>&lt;p>旁路技术主要原理是添加一些专用计算模块，以降低甚至消除阻塞时间，体现了芯片设计中的&lt;strong>以空间换时间&lt;/strong>的思路。&lt;/p>
&lt;p>例如前文中将分支跳转的执行从执行级调整到译码级，并增加专用的分支跳转模块。&lt;/p>
&lt;h3 id="修改方式">修改方式
&lt;/h3>&lt;p>将流水线中添加阻塞控制的思路在这里提供两种：&lt;/p>
&lt;h4 id="控制单元">控制单元
&lt;/h4>&lt;p>添加一个流水线运行控制单元，其负责处理各级流水线发出的阻塞请求，并给各流水级发出阻塞信号，阻塞信号作为级间寄存器的使能信号即可。&lt;/p>
&lt;h4 id="握手机制">握手机制
&lt;/h4>&lt;p>握手机制需要在各级流水线中添加握手信号，当两方握上手后使能级间寄存器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">for_valid&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">next_allowin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buffer&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">for_input&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>for_valid&lt;/code>为前级有效信号&lt;/li>
&lt;li>&lt;code>next_allowin&lt;/code>为后级允许进入信号&lt;/li>
&lt;li>&lt;code>buffer&lt;/code>为级间寄存器&lt;/li>
&lt;li>&lt;code>for_input&lt;/code>为前级输入数据&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意如果使用后级允许进入信号生成本级允许信号的话，可能会使关键路径贯穿整个流水线，在流水线深度较深的情况下需要注意。&lt;/p>
&lt;/blockquote>
&lt;h3 id="调试tips-2">调试Tips
&lt;/h3>&lt;ol>
&lt;li>在已有部件正确的情况下，只需要判断新加入的部件是否正常运行&lt;/li>
&lt;li>优先关注控制信号是否正确&lt;/li>
&lt;li>如果需要可以先进行单独部件的仿真测试&lt;/li>
&lt;/ol>
&lt;h2 id="exp9前递技术解决相关引发的冲突">exp9：前递技术解决相关引发的冲突
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 流水线冲突的概念及阻塞处理实现&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 使用前递技术处理数据冲突&lt;/li>
&lt;/ul>
&lt;h3 id="前递技术">前递技术
&lt;/h3>&lt;p>让我们重新观察使用阻塞方式处理数据冲突的时空图：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B.webp"
width="931"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;p>对于&lt;code>add.w&lt;/code>指令，在流水线的执行级已经将结果计算出，如果我们可以提前将结果发送给译码级处，就不用阻塞流水线等待了，这就是流水线前递（Forwarding）技术。同样，我们也要添加访存级、写回级的数据前递回译码级的数据通路。&lt;/p>
&lt;h3 id="数据通路-1">数据通路
&lt;/h3>&lt;p>以下是添加了前递通路的数据通路参考：&lt;/p>
&lt;p>&lt;a name="前推流水线">&lt;/a>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92.png"
width="1491"
height="507"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92_hu96bc9da7293e7fdcd6e09addfa9c78bb_327642_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92_hu96bc9da7293e7fdcd6e09addfa9c78bb_327642_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="705px"
>&lt;/p>
&lt;h3 id="调试tips-3">调试Tips
&lt;/h3>&lt;ol>
&lt;li>同样的我们几乎只需要关注前推处理的逻辑&lt;/li>
&lt;li>注意&lt;code>ld.w&lt;/code>等访存指令需要在访存级结束才能有正确数据&lt;/li>
&lt;/ol>
&lt;h2 id="exp10算术逻辑运算指令和乘除法运算指令添加">exp10：算术逻辑运算指令和乘除法运算指令添加
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 熟悉CPU的&lt;a href="#前推流水线">数据通路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习如何控制数据流动&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习如何添加指令&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习如何使用IP核（基本方法参考&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-generate-ram-ip" target="_blank" rel="noopener"
>RAM IP核定制&lt;/a>，具体IP核请自行搜索）&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 拓展：学习&lt;a class="link" href="#%e4%b9%98%e6%b3%95%e5%99%a8" >乘法器&lt;/a>、&lt;a class="link" href="#%e9%99%a4%e6%b3%95%e5%99%a8" >除法器&lt;/a>原理&lt;/li>
&lt;/ul>
&lt;h3 id="算术逻辑运算类指令">算术逻辑运算类指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>slti&lt;/code>、&lt;code>sltui&lt;/code>、&lt;code>andi&lt;/code>、&lt;code>ori&lt;/code>、&lt;code>xori&lt;/code>、&lt;code>sll.w&lt;/code>、&lt;code>srl.w&lt;/code>、&lt;code>sra.w&lt;/code>、&lt;code>pcaddu12i&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>&lt;strong>首先，我们来观察需要添加的指令有什么特点、和我们已有的指令有什么联系吗？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>slti&lt;/code>、&lt;code>sltui&lt;/code>等与已添加的指令&lt;code>slt&lt;/code>、&lt;code>sltu&lt;/code>等仅在源操作数2从寄存器还是立即数中取值有区别，所以我们可以几乎&lt;strong>复用&lt;/strong>&lt;code>slt&lt;/code>、&lt;code>sltu等&lt;/code>指令的数据通路，仅需在源操作数2的仲裁信号&lt;code>src2_is_imm&lt;/code>处修改即可&lt;/li>
&lt;li>&lt;code>sll.w&lt;/code>、&lt;code>srl.w&lt;/code>等与已添加的指令&lt;code>slli.w&lt;/code>、&lt;code>srli.w&lt;/code>等仅在源操作数2从寄存器还是立即数中取值有区别，所以我们也可以&lt;strong>复用&lt;/strong>&lt;/li>
&lt;li>&lt;code>pcaddu12i&lt;/code>指令实际上等同&lt;code>addi.w&lt;/code>的运算过程，只不过源操作数1为该指令的PC值，源操作数2的立即数处理为在最低位后接12bit零，所以我们只需增加一些仲裁和处理逻辑即可&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>你可能会在添加&lt;code>pcaddu12i&lt;/code>的时候注意到，源操作数1的仲裁信号（&lt;code>src1_is_pc&lt;/code>）和源操作数2的立即数处理和仲裁信号（&lt;code>need_si20&lt;/code>、&lt;code>src2_is_imm&lt;/code>）已经存在了，不需要额外添加。如果你傻乎乎的又新加了两块逻辑，那么你应该重新复习一下完整的数据通路了。&lt;/p>
&lt;p>当我们需要新添加一些东西的时候，首先需要考虑一下能否&lt;strong>复用&lt;/strong>已有的，或者进行一些小小的修改，而非直接开堆。冗杂的堆砌不仅是对资源的浪费，对代码可读性也是一种灾难。&lt;/p>
&lt;/blockquote>
&lt;p>经过这一通分析，我想完成这9条指令对你来说是易如反掌了吧(　‘◟ ‘)✧&lt;/p>
&lt;p>你可以现在开始仿真debug，当pass了29个点的时候这些指令就没问题了，也可以接着添加最后一起仿真debug。&lt;/p>
&lt;h3 id="乘除运算类指令">乘除运算类指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>mul.w&lt;/code>、&lt;code>mulh.w&lt;/code>、&lt;code>mulh.wu&lt;/code>、&lt;code>div.w&lt;/code>、&lt;code>mod.w&lt;/code>、&lt;code>div.wu&lt;/code>、&lt;code>mod.wu&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>&lt;strong>首先，我们还是分析一下这些指令&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>没有乘除法运算单元，肯定要添加乘除法器 &lt;del>（或者你也可以试试用加减法来算）&lt;/del>&lt;/li>
&lt;li>数据流动与&lt;code>add.w&lt;/code>等 3R-type 指令相同，仅运算方式不一样（指令编码格式相同的指令的数据流动几乎相同）&lt;/li>
&lt;li>指令间的区别为有/无符号运算、如何选取结果输出&lt;/li>
&lt;/ul>
&lt;p>这样来说，我们只需要新加一个乘除法运算单元，其它部分依照&lt;code>add.w&lt;/code>复用即可。&lt;/p>
&lt;h4 id="使用vivado-ip核实现">使用Vivado IP核实现
&lt;/h4>&lt;h5 id="乘法">乘法
&lt;/h5>&lt;p>最简单的方式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">src1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">src2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">63&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">unsigned_prod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">63&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">signed_prod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">unsigned_prod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">src2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">signed_prod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">$signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">$signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vivado中的综合工具遇到上面代码中的“＊’’运算符时，会自动调用片上的DSP48（内含固化的16位乘法器电路）实现，最终实现的电路的时序通常不错，也几乎不消耗LUT资源，推荐大家使用。&lt;/p>
&lt;p>也可以使用IP核&lt;code>Multiplier&lt;/code>实现。&lt;/p>
&lt;h5 id="除法">除法
&lt;/h5>&lt;p>使用&lt;code>Divider Generator&lt;/code>IP核实现。&lt;/p>
&lt;h6 id="如何创建">&lt;strong>如何创建&lt;/strong>
&lt;/h6>&lt;p>首先找到&lt;code>Divider Generator&lt;/code>IP核：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0.jpg"
width="1920"
height="1020"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0_hu652695300c9e1a86c86323424f9acf64_199576_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0_hu652695300c9e1a86c86323424f9acf64_199576_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>开始定制&lt;code>Divider Generator&lt;/code>IP核：&lt;/p>
&lt;div align="center">
&lt;img src="assets/除法器IP1.jpg" alt="除法器IP1" width="48%">
&lt;img src="assets/除法器IP2.jpg" alt="除法器IP2" width="48%">
&lt;/div>
&lt;p>开始建立IP核：&lt;/p>
&lt;img src="assets/除法器IP3.jpg" style="zoom:50%;" />
&lt;p>实例化IP核：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4.jpg"
width="1613"
height="521"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4_hu0329b89948ac1ebd41199e1705e536a1_117228_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4_hu0329b89948ac1ebd41199e1705e536a1_117228_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="743px"
>&lt;/p>
&lt;h6 id="如何使用">&lt;strong>如何使用&lt;/strong>
&lt;/h6>&lt;p>目前Vivado中提供的除法器IP一定是AXI接口的，所以接下来我们对模块顶层信号及其工作方式进行基本介绍。&lt;/p>
&lt;p>在定制IP核的界面中（可通过双击IP核的资源名称重新打开定制界面），左侧有接口信号图&lt;/p>
&lt;img src="assets/除法器IP5.jpg" style="zoom: 50%;" />
&lt;p>总体上我们会看到时钟信号、被除数、除数通道以及输出（商和余数）通道。&lt;/p>
&lt;p>对于被除数、除数通道，其有相同的信号组成&lt;/p>
&lt;ul>
&lt;li>&lt;code>tdata&lt;/code>信号为被除数、除数数据输入信号&lt;/li>
&lt;li>&lt;code>tready&lt;/code>、&lt;code>tvalid&lt;/code>为一对握手信号。&lt;code>tvalid&lt;/code>是请求信号，&lt;code>tready&lt;/code>是应答信号，在时钟上升沿到来时，如果&lt;code>tvalid&lt;/code>和&lt;code>tready&lt;/code>都等于1则视为成功的握手，发送方的数据写入接收方的缓存中&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>需要注意的是在握手成功后，&lt;strong>一定要把&lt;code>tvalid&lt;/code>清0，如果再次握手成功的话将会被视为一个新的除法运算。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>对于输出（商和余数）通道&lt;/p>
&lt;ul>
&lt;li>&lt;code>tdata&lt;/code>信号为商和余数数据输出信号，其中 [63:32] 位存放的是商，第 [31:0] 位存放的是余数&lt;/li>
&lt;li>&lt;code>tvalid&lt;/code>信号为输出有效信号，高电平表示除法计算完成，&lt;code>tdata&lt;/code>线上为计算结果&lt;/li>
&lt;/ul>
&lt;h4 id="自行设计电路实现">自行设计电路实现
&lt;/h4>&lt;p>可参考附录中的&lt;a class="link" href="#%e4%b9%98%e6%b3%95%e5%99%a8" >乘法器&lt;/a>、&lt;a class="link" href="#%e9%99%a4%e6%b3%95%e5%99%a8" >除法器&lt;/a>部分以及其它网络资源。&lt;/p>
&lt;blockquote>
&lt;p>注意到IP核中无论是乘法还是除法都只能固定计算有/无符号数，这样需要实例化两个运算单元分别进行运算，这样看起来非常浪费资源。我们可以采取一些措施将符号单独计算，全部转化为无符号数处理；也可以将32位的运算全部转化为33位有符号运算，只要根据有/无符号在第33位补充符号位/0即可。&lt;/p>
&lt;/blockquote>
&lt;h2 id="exp11转移指令和访存指令添加">exp11：转移指令和访存指令添加
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 熟悉CPU的&lt;a href="#前推流水线">数据通路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 练习如何修改数据流动&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 练习如何添加指令&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 了解“地址对齐”&lt;/li>
&lt;/ul>
&lt;h3 id="转移指令">转移指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>blt&lt;/code>、&lt;code>bge&lt;/code>、&lt;code>bltu&lt;/code>、&lt;code>bgeu&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>相信经过exp10的分析，大家很快就能发现这些b指令都是换汤不换药（仅跳转条件判断不同）的一类指令，只要照着如&lt;code>beq&lt;/code>指令的过程添加即可。&lt;/p>
&lt;h3 id="访存指令">访存指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>ld.b&lt;/code>、&lt;code>ld.h&lt;/code>、&lt;code>ld.bu&lt;/code>、&lt;code>ld.hu&lt;/code>、&lt;code>st.b&lt;/code>、&lt;code>st.h&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>在看完手册后，我们发现普通访存指令的&lt;strong>数据通路、控制逻辑都是相同的&lt;/strong>，区别仅在&lt;strong>处理的数据位宽不同&lt;/strong>。&lt;/p>
&lt;p>接下来让我们回忆一下我们的&lt;code>data_sram&lt;/code>，它是一个宽度为32的Memory单元，每次读写的数据为32位。&lt;/p>
&lt;p>当读回32位数据后，我们选择访存地址对应的字/半字/字节并按照有/无符号扩展到32位就是读取的数据；当需要写入时，我们将需要写入的字/半字/字节按照&lt;strong>访存地址对应的位置&lt;/strong>填入32位数据的位置，并将&lt;strong>字节写使能信号&lt;/strong>的对应位使能即可。&lt;/p>
&lt;h4 id="地址对齐">地址对齐
&lt;/h4>&lt;p>访存地址对应的位置即地址对齐，其有一定的规则，假设存储器中存储的数据如下图所示，每个字节中存储其所在字节地址&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8.jpg"
width="241"
height="220"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8_hu100c9d77195cabdb98c56d8b8f420497_8466_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8_hu100c9d77195cabdb98c56d8b8f420497_8466_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;p>假如运行&lt;code>ld.w&lt;/code>，访存地址为&lt;code>00B&lt;/code>，则得到的数据为&lt;code>03020100H&lt;/code>。（Loongarch采用小尾端的存储方式）&lt;/p>
&lt;p>假如运行&lt;code>ld.h&lt;/code>，存储器返回数据为&lt;code>03020100H&lt;/code>&lt;/p>
&lt;ul>
&lt;li>访存地址末尾为&lt;code>00B&lt;/code>，最终得到&lt;code>00000100H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>10B&lt;/code>，最终得到&lt;code>00000302H&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>假如运行&lt;code>ld.b&lt;/code>，存储器返回数据为&lt;code>03020100H&lt;/code>&lt;/p>
&lt;ul>
&lt;li>访存地址末尾为&lt;code>00B&lt;/code>，最终得到&lt;code>00000000H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>01B&lt;/code>，最终得到&lt;code>00000001H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>10B&lt;/code>，最终得到&lt;code>00000002H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>11B&lt;/code>，最终得到&lt;code>00000003H&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>你应该会想问，剩下的情况呢？剩下的情况是不被允许的！&lt;strong>剩下的情况被称为访存地址&lt;/strong>非自然对齐&lt;/strong>。&lt;/p>
&lt;p>假如从地址&lt;code>01H&lt;/code>处读取一个字（32bit），由于存储器的特性，我们需要先读取&lt;code>00H&lt;/code>处的一个字，再读取&lt;code>04H&lt;/code>处的一个字，再将它们的&lt;code>01H&lt;/code>~&lt;code>04H&lt;/code>处的数据拼接起来作为最终数据。实际上，读取一个字的数据对于CPU来说是非常费时间的（可能是上千个周期），更不用说读两个字了，所以我们在定义的时候就不允许这种跨字的数据读写（编译器分配地址空间时也会按照自然对齐地址分配）。&lt;/p>
&lt;h4 id="字节写使能">字节写使能
&lt;/h4>&lt;blockquote>
&lt;p>如果你不知道字节写使能是哪根线的话请重新看exp7的实践任务第2条&lt;/p>
&lt;/blockquote>
&lt;p>字节写使能即以字节为单位控制存储器写入的数据。&lt;/p>
&lt;p>例如字节写使能为&lt;code>0011B&lt;/code>，则地址为&lt;code>00B&lt;/code>、&lt;code>01B&lt;/code>处会写入新的数据，地址为&lt;code>10B&lt;/code>、&lt;code>11B&lt;/code>处数据&lt;strong>不会被修改&lt;/strong>。&lt;/p>
&lt;p>接下来让我们针对&lt;code>00H&lt;/code>处的一个字的存储单元运行一段指令序列吧~&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令序号&lt;/th>
&lt;th>指令&lt;/th>
&lt;th>访存地址（B）&lt;/th>
&lt;th>数据（H）&lt;/th>
&lt;th>存储器数据（H）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>st.w&lt;/td>
&lt;td>00&lt;/td>
&lt;td>1234ABCD&lt;/td>
&lt;td>&lt;strong>1234ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ld.b&lt;/td>
&lt;td>01&lt;/td>
&lt;td>&lt;strong>FFFFFFAB&lt;/strong>&lt;/td>
&lt;td>1234ABCD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>st.h&lt;/td>
&lt;td>10&lt;/td>
&lt;td>00009876&lt;/td>
&lt;td>&lt;strong>9876ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>ld.hu&lt;/td>
&lt;td>00&lt;/td>
&lt;td>&lt;strong>0000ABCD&lt;/strong>&lt;/td>
&lt;td>9876ABCD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>st.b&lt;/td>
&lt;td>11&lt;/td>
&lt;td>12345678&lt;/td>
&lt;td>&lt;strong>7876ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>ld.w&lt;/td>
&lt;td>01&lt;/td>
&lt;td>&lt;em>ERROR&lt;/em>&lt;/td>
&lt;td>7876ABCD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="调试tips-4">调试Tips
&lt;/h3>&lt;ol>
&lt;li>顶层信号中地址线&lt;code>addr&lt;/code>在接入存储器时将末两位截去，所以&lt;code>00B&lt;/code>~&lt;code>11B&lt;/code>的访存地址均会取出&lt;code>00H&lt;/code>开始的一个字，详见&lt;code>soc_lite_top.v&lt;/code>文件&lt;/li>
&lt;li>大部分分支跳转指令本身的执行错误不会引发trace比对的ERROR，其后一条指令才会引发&lt;/li>
&lt;li>当功能点越来越多，你可以尝试编译只有新指令的func程序来跳过前面已经pass的指令以提高仿真速度，但请最后跑一遍完整的func程序&lt;/li>
&lt;/ol>
&lt;h2 id="exp12添加系统调用异常支持">exp12：添加系统调用异常支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 理解CPU中断例外的概念&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习精确异常处理的过程&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 在CPU中添加系统调用异常的支持&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 完全掌握exp11及以前的内容&lt;/li>
&lt;/ul>
&lt;h3 id="特权指令">特权指令
&lt;/h3>&lt;p>在计算机系统层次结构中，应用层在操作系统层之上，只能看到和使用指令系统的一个子集，即指令系统的用户态部分。每个应用程序都有自己的寄存器、内存空间以及可执行的指令。现代计算机的指令系统在用户态子集之外还定义了操作系统核心专用的特权态部分，我们称之为特权指令系统。&lt;/p>
&lt;p>特权指令系统的存在主要是为了让计算机变得更好用、更安全。操作系统通过特权指令系统管理计算机，使得应用程序形成独占CPU的假象，并使应用间相互隔离，互不干扰。应用程序只能在操作系统划定的范围内执行，一旦超出就会被CPU切换成操作系统代码运行。&lt;/p>
&lt;p>龙芯架构32位精简版中处理器核分为2个特权等级（PrivilegeLeVel，简称PLV），分别是PLV0和PLV3。处理器核当前处于哪个特权等级由CSR.CRMD中PLV域的值唯一确定。&lt;/p>
&lt;p>所有特权等级中，&lt;strong>PLV0是具有最高权限的特权等级&lt;/strong>，也是&lt;strong>唯一可以使用特权指令并访问所有特权资源的特权等级&lt;/strong>。PLV3这个特权等级不能执行特权指令访问特权资源。对于Linux系统来说，架构中仅PLV0级可对应核心态，PLV3级对应用户态。&lt;/p>
&lt;h3 id="控制状态寄存器csr寄存器">控制状态寄存器（CSR寄存器）
&lt;/h3>&lt;p>为了控制CPU的运行状态以及处理特权指令，有一组控制状态寄存器（在龙芯架构中称为CSR寄存器），其位于一个独立的地址空间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">名称&lt;/th>
&lt;th style="text-align:center">地址&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">CRMD&lt;/td>
&lt;td style="text-align:center">0x0&lt;/td>
&lt;td style="text-align:center">当前模式信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">PRMD&lt;/td>
&lt;td style="text-align:center">0x1&lt;/td>
&lt;td style="text-align:center">例外前模式信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ESTAT&lt;/td>
&lt;td style="text-align:center">0x5&lt;/td>
&lt;td style="text-align:center">例外状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ERA&lt;/td>
&lt;td style="text-align:center">0x6&lt;/td>
&lt;td style="text-align:center">例外返回地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">EENTRY&lt;/td>
&lt;td style="text-align:center">0xc&lt;/td>
&lt;td style="text-align:center">例外入口地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SAVE0~SAVE3&lt;/td>
&lt;td style="text-align:center">0x30~0x33&lt;/td>
&lt;td style="text-align:center">数据保存&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>完整CSR寄存器表和各个CSR寄存器的定义详见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>第7节。&lt;/p>
&lt;p>CSR寄存器有其专用的读写指令&lt;code>csrrd&lt;/code>、&lt;code>csrwr&lt;/code>、&lt;code>csrxchg&lt;/code>，注意这些指令仅在核心态（即PLV0）可运行。&lt;/p>
&lt;h3 id="异常和中断">异常和中断
&lt;/h3>&lt;p>计算机通常按照软件的执行流进行顺序执行和跳转，但有时会需要中断正常的执行流程去处理其他任务，可以触发这一过程的事件统称为异常。&lt;/p>
&lt;p>中断通常由CPU核外部事件发起，CPU核响应后暂停原先程序执行另一段程序的事件。从CPU角度看，中断也可以被视为一种特定的异常，接下来将不做区分统一以“异常”表达。&lt;/p>
&lt;p>顾名思义，“异常”不是常态。异常对应的情况发生的频度不高，但处理起来比较复杂。本着“好钢用在刀刃上”的设计原则，我们希望尽可能由软件程序而不是硬件逻辑来处理这些复杂的异常情况。这样做既能保证硬件的设计复杂度得到控制又能确保系统的实际运行性能没有太大的损失。&lt;/p>
&lt;p>异常处理绝大部分交给异常处理程序完成，但是在处理的开始和结束仍需硬件完成。&lt;/p>
&lt;h4 id="预备阶段">预备阶段
&lt;/h4>&lt;ul>
&lt;li>CPU核内部或外部事件置起异常信号，表示有异常事件发生，请求CPU处理。&lt;/li>
&lt;li>每个异常事件有其对应的异常编码，需要在申请时同时提供。编码对应详见&lt;a href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/#%E5%BC%82%E5%B8%B8">这里&lt;/a>或者&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>表7-7。&lt;/li>
&lt;/ul>
&lt;h4 id="响应准备阶段">响应准备阶段
&lt;/h4>&lt;ul>
&lt;li>CPU确认自身可以响应异常处理。&lt;/li>
&lt;li>记录被异常打断的指令的地址到&lt;code>CSR.ERA&lt;/code>&lt;/li>
&lt;li>记录当前运行状态（&lt;code>CSR.CRMD&lt;/code>的PLV、IE）到&lt;code>CSR.PRMD&lt;/code>的对应域。&lt;/li>
&lt;li>同时调整CPU的权限等级（通常调整至最高特权等级&lt;code>CSR.CRMD.PLV=0&lt;/code>）并关闭中断响应（&lt;code>CSR.CRMD.IE=0&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h4 id="响应阶段">响应阶段
&lt;/h4>&lt;ul>
&lt;li>根据例外优先级（见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>6.2.2节）选择响应最高优先级的异常，将对应的异常编码写入&lt;code>CSR.ESTAT&lt;/code>的Ecode和Esubcode。&lt;/li>
&lt;li>跳转至例外入口（来自&lt;code>CSR.EENTRY&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h4 id="结束阶段">结束阶段
&lt;/h4>&lt;ul>
&lt;li>异常处理程序结束后会执行&lt;code>ertn&lt;/code>指令，其指示CPU从例外处理状态返回。&lt;/li>
&lt;li>例外前运行状态（&lt;code>CSR.PRMD&lt;/code>的PLV、IE）被写回&lt;code>CSR.CRMD&lt;/code>的对应域。&lt;/li>
&lt;li>跳转到被异常打断的指令的地址&lt;code>CSR.ERA&lt;/code>处取指。&lt;/li>
&lt;/ul>
&lt;h4 id="精确异常">精确异常
&lt;/h4>&lt;p>走完异常处理的全部流程，如果我们从原程序流的角度“看”，那么我们会发现它根本不知道某个时刻CPU被“借走”处理了另一段程序，这就是所谓的&lt;strong>精确异常&lt;/strong>。&lt;/p>
&lt;p>简单的来说精确异常要求在处理异常时，发生异常的指令前面的所有指令都执行完（修改了机器状态），而发生异常的指令及其后面的指令都没有执行（没有修改机器状态）。&lt;/p>
&lt;p>在流水线处理器中，同时会有多条指令处于不同阶段，不同阶段都有发生异常的可能，那么如何实现精确异常呢？书中给出一种可行的设计方案：&lt;/p>
&lt;ol>
&lt;li>任何一级流水发生异常时，在流水线中记录下发生异常的事件，直到写回阶段再处理。&lt;/li>
&lt;li>如果在执行阶段要修改机器状态（如状态寄存器），保存下来直到写回阶段再修改。&lt;/li>
&lt;li>指令的PC值随指令流水前进到写回阶段为异常处理专用。&lt;/li>
&lt;li>将外部中断作为取指的异常处理。&lt;/li>
&lt;li>指定一个通用寄存器（或一个专用寄存器）为异常处理时保存PC值专用。&lt;/li>
&lt;li>当发生异常的指令处在写回阶段时，保存该指令的PC及必需的其他状态，置取指的PC值为异常处理程序入口地址。&lt;/li>
&lt;/ol>
&lt;h3 id="调试tips-5">调试Tips
&lt;/h3>&lt;ol>
&lt;li>异常处理需要复杂的控制系统支持，添加起来有一定难度。&lt;del>但它对CPU意味着可以在考试中途出去上个厕所回来接着做而非必须一口气做到底&lt;/del>&lt;/li>
&lt;li>如果觉得直接在流水线上改动的不熟练的话，或许可以在单周期CPU上先添加一下，然后再切分到流水线的各个级。&lt;del>如果你有做好git版本控制的话应该很好找吧&lt;/del>&lt;/li>
&lt;li>某些CSR寄存器和PC寄存器一样存在特定的复位值，见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>6.3节。&lt;/li>
&lt;li>对于CSR寄存器，其也和通用寄存器一样存在冒险问题等待解决。&lt;/li>
&lt;li>在&lt;code>CSR.ESTAT.IS&lt;/code>域，其第10位在有些func程序中固定为0，有些开放读写，可能需要注意下。&lt;/li>
&lt;li>例外返回的地址不一定是&lt;code>CSR.ERA&lt;/code>中的地址。在本实验中返回原地址将会重新执行&lt;code>syscall&lt;/code>。&lt;del>是死循环捏&lt;/del>&lt;/li>
&lt;/ol>
&lt;h2 id="exp13添加其它异常支持">exp13：添加其它异常支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 完善&lt;code>ADEF&lt;/code>、&lt;code>ALE&lt;/code>、&lt;code>BRK&lt;/code>、&lt;code>INE&lt;/code>异常支持&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 添加中断支持&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 添加定时器、计时器&lt;/li>
&lt;/ul>
&lt;p>在exp12完成了&lt;code>syscall&lt;/code>的异常支持后，我想CPU中完整的异常处理的数据和控制通路已经搭建完成了，添加新的异常支持只需要针对新的异常进行对应的判断，发出对应的异常消息即可。&lt;/p>
&lt;h3 id="中断">中断
&lt;/h3>&lt;p>中断可被视为一种特定的异常，但是其与其它异常有着一个关键的不同点。&lt;/p>
&lt;p>由于中断通常由CPU核外部事件触发，其相对CPU核是异步的，所以发出的中断信号需要保持到被CPU采样，否则将永远无法触发中断异常。当然这是由中断源负责维护的。&lt;/p>
&lt;p>在较为简单的线中断模式下，硬件仅需每拍采样各个中断源并将其状态记录于&lt;code>CSR.ESTAT.IS&lt;/code>域中，并在认为有需要响应的中断时将中断例外标注至流水线中的某一条指令上，随后的过程与其它例外相同。&lt;/p>
&lt;h3 id="定时器与定时器中断">定时器与定时器中断
&lt;/h3>&lt;p>在龙芯32位精简版架构中定义了一个定时器，其随着时钟自减，直到为零时置起定时器中断信号。&lt;/p>
&lt;p>详细定义及运行控制信息见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>的&lt;code>TCFG&lt;/code>、&lt;code>TVAL&lt;/code>、&lt;code>TICLR&lt;/code>寄存器定义（7.6.2~7.6.4）。&lt;/p>
&lt;h3 id="计时器">计时器
&lt;/h3>&lt;p>龙芯架构 32 位精简版定义了一个恒定频率计时器，其主体是一个 64 位的计数器，称为 Stable Counter。Stable Counter 在复位后置为 0，随后每个计数时钟周期自增 1，当计数至全 1 时自动绕回至 0 继续自增。同时每个计时器都有一个软件可配置的全局唯一编号，称为 Counter ID，保存在&lt;code>CSR.TID&lt;/code>寄存器中。&lt;/p>
&lt;h3 id="调试tips-6">调试Tips
&lt;/h3>&lt;ol>
&lt;li>在经过了exp12的锤炼后，本实验应该不难了吧~~\doge~~&lt;/li>
&lt;li>在verilog描述中&lt;strong>注意多驱动问题&lt;/strong>。如果你选择给每个CSR寄存器一个always块负责内容修改的话，请注意这个CSR寄存器中所有数据更新都必须在这个always块中，以避免多驱动问题产生。例如&lt;code>CSR.ESTAT.IS[11]&lt;/code>的定时器中断状态位的赋值不能在&lt;code>CSR.TVAL&lt;/code>寄存器中，当然还有其它情况，请自行注意避免。（可以在综合的警告或者Linter语法检查找到已有的多驱动）&lt;/li>
&lt;li>选择你觉得舒服的CSR寄存器声明方式，可以按照名字定义32位的，也可以直接按照子域分开定义……善用宏定义将位索引转换为有意义的单词&lt;/li>
&lt;/ol>
&lt;h2 id="exp14添加类sram总线支持">exp14：添加类SRAM总线支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 学习总线的原理及作用&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 在CPU中添加简单的类SRAM接口总线支持&lt;/li>
&lt;/ul>
&lt;h3 id="总线">总线
&lt;/h3>&lt;p>总线的本质作用是完成数据交换。总线用于将两个或两个以上的部件连接起来，使得它们之间可以进行数据交换，或者说通信。&lt;/p>
&lt;p>总线的具体介绍可见&lt;a class="link" href="https://foxsen.github.io/archbase/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%BB%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html#%E6%80%BB%E7%BA%BF%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener"
>《计算机体系结构》&lt;/a>。&lt;/p>
&lt;p>在总线通信中，通常将读写操作发起方称为主方（master），响应方称为从方（slave）。每一次读写操作的过程可大致分为：请求发起、响应请求、请求数据传输、请求数据返回。和我们之前的实验中不同的是，由于实际情况下总线上可能不止处理一件事物、数据的读写也需要一定的时间，所以每个步骤之间是有不确定的时间间隔的。为了明确何时的数据是有效的，每次有效的数据传输都基于握手信号，只有握手成功才会传输有效数据。&lt;/p>
&lt;h3 id="类sram接口">类SRAM接口
&lt;/h3>&lt;p>我们的CPU最终需要实现AMBA AXI总线接口，但是直接上手AXI总线可能有些困难，所以我们先学习类SRAM接口，或者说在我们原先的SRAM接口上加入握手机制，其接口信号如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>信号名称&lt;/th>
&lt;th>位宽&lt;/th>
&lt;th>方向&lt;/th>
&lt;th>功能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>req&lt;/td>
&lt;td>1&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>读写请求信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wr&lt;/td>
&lt;td>1&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>高电平表示写请求，低电平为读操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>size&lt;/td>
&lt;td>2&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>传输字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addr&lt;/td>
&lt;td>32&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>请求的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wstrb&lt;/td>
&lt;td>4&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>写请求的写字节使能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wdata&lt;/td>
&lt;td>32&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>写请求的写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addr_ok&lt;/td>
&lt;td>1&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>请求的地址传输完毕&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data_ok&lt;/td>
&lt;td>1&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>请求的数据传输完毕（读取的数据or数据的写入）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rdata&lt;/td>
&lt;td>32&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>读请求返回的读数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>相较于原先的SRAM接口，我们只添加了&lt;code>size&lt;/code>、&lt;code>addr_ok&lt;/code>、&lt;code>data_ok&lt;/code>三根信号线，接下来我们解释一下这三条线的作用。&lt;/p>
&lt;h4 id="size">&lt;code>size&lt;/code>
&lt;/h4>&lt;p>&lt;code>size&lt;/code>信号表示该次请求传输的字节数，根据访存指令不同选择不同的值&lt;/p>
&lt;ul>
&lt;li>0: 1字节。&lt;code>ld.b&lt;/code>、&lt;code>ld.ub&lt;/code>、&lt;code>st.b&lt;/code>&lt;/li>
&lt;li>1: 2字节。&lt;code>ld.h&lt;/code>、&lt;code>ld.uh&lt;/code>、&lt;code>st.h&lt;/code>&lt;/li>
&lt;li>2: 4字节。&lt;code>ld.w&lt;/code>、&lt;code>st.w&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="addr_ok">&lt;code>addr_ok&lt;/code>
&lt;/h4>&lt;p>&lt;code>addr_ok&lt;/code>信号用于和&lt;code>req&lt;/code>信号一起完成读写请求的握手。只有在&lt;code>clk&lt;/code>的上升沿同时看到&lt;code>req&lt;/code>和&lt;code>addr_ok&lt;/code>为1的时候才是一次成功的请求握手，读写请求、读写地址和可能的写数据被发送至从方。&lt;/p>
&lt;h4 id="data_ok">&lt;code>data_ok&lt;/code>
&lt;/h4>&lt;p>&lt;code>data_ok&lt;/code>信号有双重身份。对应读事务的时候它是数据返回的有效信号；对应写事务的时候，它是写入完成的有效信号。&lt;/p>
&lt;p>在类SRAM接口中主方对于数据响应总是可以接收，所以不再设置Master接收&lt;code>data_ok&lt;/code>的握手信号。也就是说如果存在未返回数据响应的请求，则在&lt;code>clk&lt;/code>的上升沿看到&lt;code>data_ok&lt;/code>为1就可以认为是—次成功的数据响应握手。&lt;/p>
&lt;h4 id="读写时序">读写时序
&lt;/h4>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB.jpg"
width="1117"
height="835"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB_huc2c27e7784c3d970354444dd857b64ff_57899_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB_huc2c27e7784c3d970354444dd857b64ff_57899_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99.jpg"
width="1284"
height="1004"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99_hu6080e06310ce250da43bf3cd0d4f91f1_77787_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99_hu6080e06310ce250da43bf3cd0d4f91f1_77787_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>需要注意的是，总线上支持多事务处理，比如说以下连续写读操作：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB.jpg"
width="808"
height="825"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB_hu1fbc0db3da952ee1c74445a9374df906_52208_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB_hu1fbc0db3da952ee1c74445a9374df906_52208_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="235px"
>&lt;/p>
&lt;p>对于初学者来说还是先一个一个事务处理，多事务会复杂上不少，对于我们的单发射流水线也起不到很大优化效果。&lt;/p>
&lt;blockquote>
&lt;p>建议阅读一下《CPU设计实战》中“类SRAM总线的设计”一节，书中有详细的分析。如果没有Loongarch版的话MIPS版也是相通的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="调试tips-7">调试Tips
&lt;/h3>&lt;ol>
&lt;li>从总线接口开始，你就会发现何为时序逻辑比组合逻辑难了。不出意外的话你应该会开始遇到各种差一拍或者其它奇奇怪怪的情况，请记得此时你的流水级处理的事情不像之前那样只有一拍，而变成类似一个状态机一样的多周期流水级，需要对流入和流出的控制有着明确的信号逻辑。&lt;/li>
&lt;li>明确需要当拍更新（组合逻辑）和下拍更新（时序逻辑）的信号及它们间的相互依赖。&lt;/li>
&lt;/ol>
&lt;h2 id="exp1516添加axi总线支持完成axi随机延迟验证">exp15、16：添加AXI总线支持、完成AXI随机延迟验证
&lt;/h2>&lt;p>CPU对外只有一个AXI接口，需在内部完成取指和数据访问的仲裁。推荐在本任务中实现一个类SRAM-AXI的2x1的转接桥，然后拼接上exp14完成的类SRAM接口的CPU，将myCPU封装为AXI接口。&lt;/p>
&lt;h3 id="axi接口">AXI接口
&lt;/h3>&lt;p>备注栏中是我们针对exp给出的—些设计建议。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3.jpg"
width="1730"
height="2933"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3_huf61b5be99eb247b205205c0decc13487_844529_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3_huf61b5be99eb247b205205c0decc13487_844529_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="141px"
>&lt;/p>
&lt;p>AXI接口的设计资料比较多，《CPU设计实战》和&lt;a class="link" href="https://foxsen.github.io/archbase/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%BB%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html#%E7%89%87%E4%B8%8A%E6%80%BB%E7%BA%BF" target="_blank" rel="noopener"
>《计算机体系结构基础》&lt;/a>以及网络上都有十分详细的分析和教学，我就不班门弄斧了。&lt;/p>
&lt;p>在这里提供一个&lt;a class="link" href="#%e7%b1%bbSRAM-AXI%e8%bd%ac%e6%8e%a5%e6%a1%a5" >转接桥参考&lt;/a>。&lt;/p>
&lt;h3 id="调试tips-8">调试Tips
&lt;/h3>&lt;ol>
&lt;li>到这里提前恭喜你已经写出完整的CPU (◆゜∀゜）👍&lt;/li>
&lt;li>&lt;a class="link" href="https://bookdown.org/loongson/_book3/chapter-axi-bus.html#subsec-exp16" target="_blank" rel="noopener"
>在exp16实践任务中&lt;/a>第6、7步比较费时间，建议各个种类各挑一个就行&lt;/li>
&lt;li>到这我也没什么Tips可写了，靠各位自己STFW啦*(^_^)/*&lt;/li>
&lt;/ol>
&lt;h2 id="附录">附录
&lt;/h2>&lt;blockquote>
&lt;p>在学习之前，你需要&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 学会verilog的基本语法&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://library.vincent-ice.me/posts/verilog%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95/" target="_blank" rel="noopener"
>Verilog 基础知识 | Vincent的图书馆&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_43460068/article/details/122001173" target="_blank" rel="noopener"
>Verilog HDL——运算符_verilog逻辑运算符_~Old的博客-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/72014513?ivk_sa=1024320u&amp;amp;utm_id=0" target="_blank" rel="noopener"
>Verilog语法之四：运算符 - 知乎 (zhihu.com)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/weixin_54358182/article/details/129495887" target="_blank" rel="noopener"
>Verilog 基础仿真文件编写_verilog仿真程序编写_背影疾风的博客-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 学会补码及其加减法&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_34771697/article/details/77972501" target="_blank" rel="noopener"
>原码-反码-补码 &amp;ndash;数学公式分析_原码反码补码计算公式及关系-CSDN博客&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/105917577" target="_blank" rel="noopener"
>【原创】计算机为什么要用补码？ - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_43511405/article/details/105898286" target="_blank" rel="noopener"
>【计算机组成原理】补码的加减运算方法_补码相加怎么算的-CSDN博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="多路复选器">多路复选器
&lt;/h3>&lt;p>作用：从一组输入数据中选出某一个来&lt;/p>
&lt;img src="assets/mux.png" alt="mux" style="zoom:33%;" />
&lt;p>核心：用与门当做开关，通过数据信号和控制信号相与实现各数据的选择效果&lt;/p>
&lt;h4 id="二选一">二选一
&lt;/h4>&lt;p>电路图：&lt;img src="assets/MUX2.png" alt="MUX2.png" style="zoom: 50%;" />&lt;/p>
&lt;p>verilog实现方式：&lt;/p>
&lt;ul>
&lt;li>门级电路（了解即可）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2_gate&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">}})&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">}});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>行为级描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span> &lt;span class="c1">//1=&amp;gt;a,0=&amp;gt;b
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>带参数的常用写法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2_par&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 调用方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mux2_par&lt;/span> &lt;span class="p">#(.&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">u_mux2_par&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="四选一">四选一
&lt;/h4>&lt;p>电路图：&lt;img src="assets/MUX4.png" alt="MUX4" style="zoom: 50%;" />&lt;/p>
&lt;p>verilog实现方式：&lt;/p>
&lt;ul>
&lt;li>门级电路（了解即可）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4_gate&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>行为级描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>带参数的常用写法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4_par&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 调用方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mux4_par&lt;/span> &lt;span class="p">#(.&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">u_mux4_par&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>本章你需要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 带参数的写法及其调用方法&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="加法器">加法器
&lt;/h3>&lt;h4 id="半加器">半加器
&lt;/h4>&lt;p>只将两个1位二进制数相加，不考虑低位进位。&lt;/p>
&lt;ul>
&lt;li>真值表&lt;/li>
&lt;/ul>
&lt;table border="4" >
&lt;tr align =center>
&lt;td colspan="2">输入&lt;/td>
&lt;td colspan="2">输出&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>S&lt;/td>
&lt;td>CO&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>逻辑函数&lt;/li>
&lt;/ul>
$$
S=\overline{A}B+A\overline{B}=A\oplus B\\
CO=AB
$$
&lt;ul>
&lt;li>电路图&lt;/li>
&lt;/ul>
&lt;img src="assets/half_adder.png" alt="half_adder" style="zoom:61%;" />
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">half_adder&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="全加器">全加器
&lt;/h4>&lt;p>除了要将两个1位二进制数相加外，还有考虑来自低位的进位。&lt;/p>
&lt;ul>
&lt;li>真值表&lt;/li>
&lt;/ul>
&lt;table border="5" >
&lt;tr align =center>
&lt;td colspan="3">输入&lt;/td>
&lt;td colspan="2">输出&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>CI&lt;/td>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>S&lt;/td>
&lt;td>CO&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>&lt;del>逻辑函数&lt;/del> 可以通过两个半加器串联修改实现&lt;/li>
&lt;/ul>
$$
S=A\oplus B\oplus CI\\
CO=AB+\left( A+B\right) \left( CI\right)
$$
&lt;ul>
&lt;li>电路图&lt;/li>
&lt;/ul>
&lt;img src="assets/full_adder.png" alt="full_adder" style="zoom:61%;" />
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder_1bit&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="多位加法器">多位加法器
&lt;/h4>&lt;h5 id="行波进位加法器ripple-carry-adder">行波进位加法器（Ripple-carry adder）
&lt;/h5>&lt;ul>
&lt;li>示意图&lt;/li>
&lt;/ul>
&lt;img src="assets/RCA.jpg" alt="ripple_carry_adder" style="zoom: 67%;" />
&lt;p>如同波一般向前计算。每次运算需要等待前一位的进位值，由全加器的电路图可知，从cin到cout有两级门电路的时延，所以对于N位行波进位加法器，时延就是$3+(N-1)*2=2N+1$级。可见，在位数更高的RCA中，串行计算带来的时延会相当大，这对于现代高速运算是不可忍受的。&lt;/p>
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder_8bit&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">temp_co&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">8&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adder_simple&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adder_1bit&lt;/span> &lt;span class="n">adder_unit&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">co&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="超前进位加法器carry-lookahead-adder">超前进位加法器（Carry-lookahead Adder）
&lt;/h5>&lt;p>为了提高运算速度，必须设法减小或消除由于进位信号逐级传递所耗费的时间，于是设计出超前进位加法器。&lt;/p>
&lt;h6 id="超前进位逻辑">超前进位逻辑
&lt;/h6>&lt;p>两个多位数中第&lt;em>i&lt;/em>位相加产生的进位输出$(CO)_i$可表示为
&lt;/p>
$$
(CO)_i=A_iB_i+\left( A_i+B_i\right) \left( CI\right)_i
$$
&lt;p>
我们将$G_i = A_iB_i$称为进位生成函数，将$P_i = (A_i+B_i)(CI)_i$称为进位传递函数。&lt;/p>
&lt;p>通过数学计算展开可得
&lt;/p>
$$
\left( CO\right) _{i}=G_{i}+P_{i}G_{i-1}+P_{i}P_{i-1}G_{i-2}+\ldots +P_{i}P_{i-1}\ldots P_{1}G_{0}
+P_{i}P_{i-1}\ldots P_{0}G_{0}
$$
&lt;p>
于是我们得到了任意一位产生的进位，避免了等待进位信号的逐级传递，将实现上述逻辑的电路称为&lt;strong>CLU&lt;/strong>（Carry Lookahead Unit）。由公式可以看出，并行生成各级$C_i$的时延来自$G_i$和$P_i$的先与后或，再加上生成$G_i$和$P_i$的一级门电路，总共是三级门电路时延。而且可以看出，时延的级数并不会随位数的增加而增加，不论多少位CLA，生成各级$C_i$的时延恒为三级门电路。&lt;/p>
&lt;p>由全加器的真值表可得第$i$位和$S_i$的逻辑式
&lt;/p>
$$
S_i=A_i\oplus B_i\oplus (CI)_i \ \ \ 或 \ \ \ S_i= \sim G_i P_i\oplus (CI)_i
$$
&lt;p>
同样不超过三级门电路&lt;/p>
&lt;h6 id="4位超前进位加法器">4位超前进位加法器
&lt;/h6>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">CLA4&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">co_buf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ci_buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">ci_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">ci_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="更多位超前进位加法器">更多位超前进位加法器
&lt;/h6>&lt;p>在设计出4位超前进位加法器后，一个很自然的想法是：要想得到更多位CLA，只需像4位CLA那样，只是多递归几次的区别。这个方法叫&lt;strong>全超前进位&lt;/strong>。全超前进位理论上是可行的，但由CLU的公式可知，随着位数的增加，实现CLU的门电路数量会急剧增加，导致电路面积开销过大；另一方面，位数的增加也会使扇入飞速增大，导致时延增加。&lt;/p>
&lt;p>&lt;strong>所以，单纯的递归并不是好的解决方案。&lt;/strong>&lt;/p>
&lt;p>一个解决方案是借鉴RCA。将多个4位CLA级联，即采用“组内超前进位，组间串行进位“来构成更多位超前进位加法器。其中每个4位CLA从进位输入到进位输出是两级门电路时延，加上第一级CLA的PG时延和最后一级CLA的异或门时延，这种方式构成的N位超前进位加法器的总时延为$1+2*(N/4)+1=N/2+2$。&lt;/p>
&lt;p>如果想获得更快的速度，就得采用另一种方法——&lt;strong>多级超前进位加法器&lt;/strong>。多级超前进位加法器采用“组内超前进位，组间也超前进位”的方式，可进一步降低因组间串联进位带来的时延。即将每个4位CLA看做一位再由超前进位逻辑再次进行超前进位，故称为多级超前进位加法器。&lt;/p>
&lt;blockquote>
&lt;p>本章你要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 超前进位加法器是怎么优化降低时延的&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> generate-for循环调用模块&lt;/li>
&lt;/ul>
&lt;p>一些可参考资料&lt;/p>
&lt;ul>
&lt;li>《数字电子技术基础》阎石 p172-176&lt;/li>
&lt;li>《计算机体系结构基础》胡伟武 p188-193&lt;/li>
&lt;li>&lt;a class="link" href="http://blog.chinaaet.com/T_Tang/p/5100051382" target="_blank" rel="noopener"
>32位超前进位加法器的设计-T-Tang-电子技术应用-AET-中国科技核心期刊-最丰富的电子设计资源平台 (chinaaet.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/579055858?utm_id=0" target="_blank" rel="noopener"
>16位两级超前进位加法器的Verilog实现及时延分析 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="乘法器">乘法器
&lt;/h3>&lt;p>不采用任何优化算法的乘法过程，可以用我们小学就学过的列竖式乘法来说明。从乘数的低位开始，每次取一位与被乘数相乘，其乘积作为部分积暂存，乘数的全部有效位都乘完后，再将所有部分积根据对应乘数数位的权值错位累加，得到最后的乘积。&lt;/p>
&lt;img src="assets/ShuShi.jpg" alt="ShuShi" style="zoom:50%;" />
&lt;p>这样原始的乘法在设计上是可以实现的，但在工程应用上几乎不会采用，在时延与面积上都需要优化。一个N位的乘法运算，需要产生N个部分积，并对它们进行全加处理，位宽越大，部分积个数越多，需要的加法器也越多，加法器延时也越大，那么针对乘法运算的优化，主要也就集中在两个方面：&lt;strong>一是减少加法器带来的延时，二是减少部分积的个数&lt;/strong>。&lt;/p>
&lt;h4 id="补码移位乘法器">补码移位乘法器
&lt;/h4>&lt;p>首先解决负数乘法问题。在加减法中我们采用补码解决负数和减法问题，在负数乘法中同样可以使用补码。&lt;/p>
&lt;p>假定有 8 位定点数 $Y$， $[Y]_补$ 的二进制格式写作 $y_7 y_6 y_5 y_4 y_3 y_2 y_1 y_0$ ，根据补码定义，$Y$ 的值等于
&lt;/p>
$$
Y=y_{7}\times -2^{7}+y_{6}\times 2^{6}+y_{5}\times 2^{5}+\ldots +y_{0}\times 2^{0}
$$
&lt;p>
由此可得出
&lt;/p>
$$
\begin{aligned}\left[ X\times Y\right] _{补}&amp;=\left[ X\times (y _{7}\times -2^{7}+y_{6}\times 2^{6}+\ldots +y_{0}\times 2^0) \right]_{补} \\
&amp;=\left[X \times -y_7\times 2^{7}+X\times y_{6}\times 2^{6}+\ldots +X\times y_{0}\times 2^{0}\right] _{补}\\
&amp;=\left[ X\times-y_{7}\times2^{7}\right] _{补}+\left[ X\times y_6\times 2^{6}\right] _{补}+\ldots +[ X\times y_{0}\times 2^{0}) _{补}\\
&amp;=-y_{7}\times \left[ X \times 2^{7} \right] _{补} + y_{6}\times \left[ X \times 2^{6} \right] _{补}+\ldots +y_{0}\times \left[ X\times 2^{0}\right]_{补}\\
&amp;=\left[ X\right] _{补}\times \left( -y_{7}\times 2^{7}+y_{6}\times 2^{6}+\ldots +y_{0}\times 2^{0} \right) \end{aligned}
$$
&lt;p>根据公式可以用verilog设计出简单的移位补码乘法器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mult_simple&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1_ext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b11111111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">mult_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">8&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">16&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1_ext&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="华莱士树">华莱士树
&lt;/h4>&lt;p>由于累加器本身的进位传递延时对电路性能依然存在非常大的影响，所以优化的第一个方面，就是改进部分积累加结构，提升累加性能。如果采用部分积直接相加的方式，因为全加器进位的关系，当前bit的相加结果依赖于它前一bit的进位输出，整个计算过程相当于串行化，位宽越大，延时越大，所以优化的关键就是消除进位链，使运算并行化。&lt;/p>
&lt;p>进位保留加法器（Carry Save Adder, CSA）是比较常用的一种优化方式，CSA实际上就是一位全加器。在上一章中我们学习了全加器有3个输入A,B,CI和2个输出S,CO，通过CI和上一级CO相接实现串行的加法，但是在CSA中我们保留每一位的CO，CI使用另外一个加数D来替代，即
&lt;/p>
$$
A+B+D=S+\{C,0\}
$$
&lt;p>
这样我们就实现了3个加数变为2个加数的加数缩减，也就是说我们将加数减少了1/3，如果我们再往后加一层同样的CSA，可以进一步减少加数，直到只剩两个加数即可使用一个加法器得到最终结果。对于N个加数的加法，使用串行加法器需要N-1个加法器的延时，使用多层华莱士树大致需要$log_{1.5}(0.5N)$个加法器延迟，显然明显地降低计算延迟，数据宽度越宽，其效果越明显。&lt;/p>
&lt;p>下面为8个1位数相加的四层华莱士树结构图，同样也可将1位数扩展为多位数，结构是相似的。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace.jpg"
width="523"
height="515"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace_hu8a670269c76f263a077ff7f167c4e54b_24627_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace_hu8a670269c76f263a077ff7f167c4e54b_24627_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="wallace"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;strong>注意每一层的进位信号只能接到下一层，不能接到上一层&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">compressor32&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">out2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样也可以设计4-2压缩的华莱士树&lt;/p>
&lt;h4 id="booth乘法器">booth乘法器
&lt;/h4>&lt;p>如果遵循第一节的补码乘法算法，需要特地挑出第 N 个部分积，并使用补码减法操作，这就需要实现一个额外的状态机来控制，增加了硬件设计复杂度。 因此对补码乘法公式进行变换
&lt;/p>
$$
\begin{aligned}
Y&amp;=-y_{7}\times 2^{7}+y_{6}\times 2^{6}+y_{5}\times 2^{5}+\ldots +y_{0}\times 2^{0}\\
&amp;=\left( -y_7 \times 2^{7}+\left( y_{6}\times 2^{7}-y_{6}\times 2^{6}\right) +\left( y_{5}\times 2^{6}-y_{5}\times 2^{5}\right) +\ldots
+\left( y_1\times 2^{2}-y_1\times 2^{1}\right) +\left( y_{0}\times 2^1- y_{0}\times 2^{0}\right) +\left( 0\times 2^{0}\right) \right) \\
&amp;=\left( y_{6}-y_{7}\right) \times 2^{7}+\left( y_{5}-y_{6}\right) \times 2^{6}+\ldots +\left( y_{0}-y_{1}\right) \times 2^{1}+
\left( y_{-1}-y_{0}\right) \times 2^{0}\end{aligned}
$$
&lt;p>
其中$y_{-1}$取值为 0。 经过变换，公式变得更加规整，不再需要专门对最后一次部分积采用补码减法，更适合硬件实现。 这个新公式被称为 Booth 一位乘算法。&lt;/p>
&lt;p>根据算法公式，很容易得出它的规则&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$y_i$&lt;/th>
&lt;th style="text-align:center">$y_{i-1}$&lt;/th>
&lt;th style="text-align:center">操作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>于是我们可以设计出booth一位乘&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">compressor32&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="c1">//华莱士树32压缩
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">out2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mult_booth1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="c1">//booth一位乘
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1_ext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b11111111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">mult_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">op1_ext&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">op1_ext&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">op1_ext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wallace1_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace1_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace1_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace2_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace2_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">9&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">9&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">10&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Booth 一位乘算法中，为了计算 N 位的补码乘法, 依然需要 N-1 次加法。 而数据宽度较大的补码加法器面积大、电路延迟长，限制了硬件乘法器的计算速度，所以优化的第二个方面就是减少部分积的个数。重新对补码乘法公式进行变换，得到 Booth 两位乘算法。
&lt;/p>
$$
𝑌=(𝑦_5+𝑦_6−2𝑦_7 )×2^6+(𝑦_3+𝑦_4−2𝑦_5 )×2^4+⋯+(𝑦_{−1}+𝑦_0−2𝑦_1 )×2^0
$$
&lt;p>
根据算法公式，很容易得出它的规则&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$y_{i+1}$&lt;/th>
&lt;th style="text-align:center">$y_{i}$&lt;/th>
&lt;th style="text-align:center">$y_{i-1}$&lt;/th>
&lt;th>操作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$+2[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$-2[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>于是你们就可以设计一个8位booth二位乘乘法器了&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>本章你要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 补码乘法&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 并行化优化思路&lt;/li>
&lt;/ul>
&lt;p>一些参考资料&lt;/p>
&lt;ul>
&lt;li>《计算机体系结构基础》胡伟武 p196-206&lt;/li>
&lt;li>《CPU设计实战》p140-146&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/127164011" target="_blank" rel="noopener"
>乘法器的布斯算法原理与VERILOG实现 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/291239777" target="_blank" rel="noopener"
>八位“Booth二位乘算法”乘法器 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="除法器">除法器
&lt;/h3>&lt;p>符号解释：&lt;/p>
&lt;ul>
&lt;li>$N$ = numerator (dividend)，分子，被除数&lt;/li>
&lt;li>$D$ = denominator (divisor)，分母，除数&lt;/li>
&lt;li>$Q$ = quotient，商&lt;/li>
&lt;li>$R$ = Remainder，余数&lt;/li>
&lt;/ul>
&lt;h4 id="循环相减法">循环相减法
&lt;/h4>&lt;p>最简单粗暴的法子，减到没法减。&lt;/p>
&lt;p>其伪代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Q :&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> R ≥ D &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Q :&lt;span class="o">=&lt;/span> Q + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>Q,R&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="慢速算法迭代">慢速算法（迭代）
&lt;/h4>&lt;p>以下恢复余数法、非恢复余数法、SRT算法均是慢速算法，其共同点为通过循环等式，对余数R进行迭代：
&lt;/p>
$$
R_{j+1} = B \times R_j - q_{n-(j+1)} \times D
$$
&lt;p>
其中：&lt;/p>
&lt;ul>
&lt;li>$R_j$ 是第 $j$ 个部分余数，$R$ = $R_n$ ，$N$ = $R_0$&lt;/li>
&lt;li>$B$ 是基，在二进制中，为2&lt;/li>
&lt;li>$q_{n−(j+1)}$ 是商的第 $n−(j+1)$ 位，例如第1次迭代（j=0）产生 $q_{n−1}$ ，商的最高位&lt;/li>
&lt;li>$n$ 是商的位数&lt;/li>
&lt;li>$D$ 是除数&lt;/li>
&lt;/ul>
$$
\begin{aligned}
R &amp;= R_n = 2R_{n-1}-q_0D = 2R_{n-2}-2^1q_1D-q_0D = \cdots \\
&amp;= 2^nN - 2^{n-1}q_{n-1}D - \cdots -2^1q_1D - q_0D \\
&amp;= 2^nN-QD
\end{aligned}
$$
&lt;p>注意要将N（被除数）左移n位&lt;/p>
&lt;h4 id="恢复余数法">恢复余数法
&lt;/h4>&lt;p>恢复余数法无法直接用于与有符号数，对于有符号数需要先转换为无符号数，然后根据除数与被除数的符号判断商与余数的符号。&lt;/p>
&lt;p>其算法核心是在每次迭代时都假定$q$为1，计算出下一个部分和。然后判断该部分和的正负性，如果为正则假定正确，即该位商为1；如果为负则假定不正确，即该位商为0，且将部分余数恢复为正（即将减去的除数加回去）。&lt;/p>
&lt;p>算法伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D :&lt;span class="o">=&lt;/span> D &lt;span class="s">&amp;lt;&amp;lt; n -- R和D需要两倍位宽
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">for i := n&lt;/span> − &lt;span class="m">1&lt;/span> .. &lt;span class="m">0&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> R &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span> -- 该位商为 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> -- 该位商为 &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> R + D -- 将部分余数恢复为正
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="非恢复余数法">非恢复余数法
&lt;/h4>&lt;p>在非恢复余数法中，使用&lt;code>{-1,1}&lt;/code>替代&lt;code>{0,1}&lt;/code>，同时去除恢复余数的冗杂步骤，根据该位商情况迭代不同的。&lt;/p>
&lt;blockquote>
&lt;p>$-3 = (-1)(1)(1)(-1) = -2^3 + 2^2 + 2^1 - 2^0$&lt;/p>
&lt;/blockquote>
&lt;p>算法伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D :&lt;span class="o">=&lt;/span> D &lt;span class="s">&amp;lt;&amp;lt; n -- R和D需要两倍位宽
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">for i = n&lt;/span> − &lt;span class="m">1&lt;/span> .. &lt;span class="m">0&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> R &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> − &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R + D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="on-the-fly算法">&lt;strong>On-The-Fly算法&lt;/strong>
&lt;/h5>&lt;p>由于非恢复余数法中的商出现了负数，直接得出的商是非标准形式的，我们需要把非标准形式的商在算法的最后一步转换为标准形式，但是它需要耗费额外的延迟以及芯片面积。&lt;/p>
&lt;p>On-the-fly转换是为了获得实时的转换结果而设计的，它仅仅使用2个Flip-Flop和一些简单的组合逻辑就可以完成转换过程。&lt;/p>
&lt;p>Q的值在每次迭代中的更新公式为：
&lt;/p>
$$
Q_{j+1} = Q_j + q_{j+1}r^{-(j+1)}
$$
&lt;p>
在存在负数的商位的情况下：
&lt;/p>
$$
Q_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} \ge 0\\
Q_j - r^{-j} + (r-\left | q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} &lt; 0
\end{matrix}\right.
$$
&lt;p>
该更新公式有一个缺点，需要做减法，进位的传播会使电路变得很慢，因此我们定义另一个寄存器$QM_{j+1} = Q_j - r^{-j}$。于是减法操作可替换为对寄存器 QM 进行采样。&lt;/p>
&lt;p>此时两个寄存器的更新公式为：
&lt;/p>
$$
Q_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} \ge 0\\
QM_j + (r-\left | q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} &lt; 0
\end{matrix}\right.
$$
$$
QM_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} > 0\\
QM_j + (r-\left | (r-1)-q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} \le 0
\end{matrix}\right.
$$
&lt;p>初始化条件为：
&lt;/p>
$$
Q = QM =
\left\{\begin{matrix}
全0 &amp; , 商为正\\
全1 &amp; , 商为负
\end{matrix}\right.
$$
&lt;blockquote>
&lt;p>一些参考资料&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/devindd/articles/17633558.html#fnref1" target="_blank" rel="noopener"
>硬件除法专题-SRT除法 - devindd - 博客园&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/550913605" target="_blank" rel="noopener"
>SRT除法的一些理解 - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/lum250/article/details/125111667" target="_blank" rel="noopener"
>除法器的实现（恢复余数、不恢复余数、级数展开、Newton-Raphson）_恢复余数除法器-CSDN博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="类sram-axi转接桥">类SRAM-AXI转接桥
&lt;/h3>&lt;p>龙芯杯团队赛中曾经提供的一个转接桥参考，效率偏低，且不支持burst传输。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">cpu_axi_interface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">resetn&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//inst sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="n">inst_req&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">inst_wr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_size&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_addr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">inst_data_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//data sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="n">data_req&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">data_wr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_size&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_addr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">data_addr_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">data_data_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//axi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//ar
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">araddr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arlen&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arsize&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arburst&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arlock&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arcache&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arprot&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">arvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">arready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//r
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rresp&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">rlast&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">rvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">rready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//aw
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awaddr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awlen&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awsize&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awburst&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awlock&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awcache&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awprot&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">awvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">awready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//w
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wstrb&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">wlast&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">wvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">wready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">bid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">bresp&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">bvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">bready&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//addr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//req is inst or data;1:data,0:inst
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_wr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">data_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_req&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">inst_req&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">data_req&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_req&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_req_or&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_req&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_wr_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_wr&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_wr&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_wr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_size_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_size&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_size&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_addr_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_addr&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_addr&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_wdata_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_wdata&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_wdata&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//inst sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_data_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_req_or&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_data_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_rdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_rdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//---axi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_back&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">addr_rcv&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rready&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">bvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">bready&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addr_rcv&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">arready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">awvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">awready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wdata_rcv&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">wready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ar
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">arid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">araddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arsize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arburst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arcache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arprot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//r
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">rready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//aw
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">awid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0001&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awaddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awsize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awburst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awcache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awprot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//w
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">wid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0001&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wstrb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_size_r&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d1&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0011&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b1111&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wlast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mi">&amp;#39;d1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">bready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Debug方法概论</title><link>https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/</guid><description>&lt;blockquote>
&lt;p>本文摘自龙芯杯团队赛发布包中的仿真调试说明及《CPU设计实战》&lt;/p>
&lt;/blockquote>
&lt;h2 id="仿真调试">仿真调试
&lt;/h2>&lt;h3 id="仿真调试概述">仿真调试概述
&lt;/h3>&lt;h4 id="写在前面">写在前面
&lt;/h4>&lt;p>&lt;strong>首先的首先! 充分了解你的设计! 了解你的设计! 了解你的设计! 重要的事情说三遍!&lt;/strong>
千万不要在不了解设计功能的情况下进行调试，这样会浪费大量的时间。&lt;/p>
&lt;h4 id="一些小技巧">一些小技巧
&lt;/h4>&lt;h5 id="记录所有信号的波形">记录所有信号的波形
&lt;/h5>&lt;p>在默认设置下, 只有被添加进波形窗口的信号才会被记录, 但是有时候我们需要记录所有信号的波形, 这时候就会发现新加入的波形并没有信号, 不得不重新运行一次仿真才能获得波形, 这样会浪费大量时间, 所以我们希望可以一次性记录所有信号的波形, 这样就可以避免重复运行仿真。
在Vivado工程视图下, 点击左侧&amp;quot;Project Manager&amp;quot; -&amp;gt; &amp;ldquo;Settings&amp;rdquo;, 在弹出的设置界面中选择&amp;quot;Project Settings&amp;quot; -&amp;gt; &amp;ldquo;Simulation&amp;rdquo;, 在右侧的&amp;quot;Simulation&amp;quot;选项卡中, 将&amp;quot;xsim.simulate.log_all_signals&amp;quot;复选框勾选, 这样就可以一次性记录所有信号的波形了。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals.png"
width="1084"
height="967"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals_hu8f1ec6e610cb9adc5904d790d29351e7_72590_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals_hu8f1ec6e610cb9adc5904d790d29351e7_72590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="logAllSignals"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;h5 id="给重要时刻做标记">给重要时刻做标记
&lt;/h5>&lt;p>善用波形窗口的标记功能, 可以&lt;strong>避免回溯哪里出问题的时候浪费大量时间&lt;/strong>。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker.png"
width="726"
height="80"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker_hu5352d61b75d96fd8dd7dc101828d6718_6712_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker_hu5352d61b75d96fd8dd7dc101828d6718_6712_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mark"
class="gallery-image"
data-flex-grow="907"
data-flex-basis="2178px"
>&lt;/p>
&lt;h5 id="信号分组">信号分组
&lt;/h5>&lt;p>当你的调试信号非常多的时候, 上下翻看信号十分容易出现混乱, 这时&lt;strong>建议可以将信号分组&lt;/strong>, 比如把同一个模块或者同一个流水级的信号放在同一个group中, 这样可以试调试需求收起或展开。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group.png"
width="604"
height="1309"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group_hu8d98e37f2402e54f84c320183314a5ae_92200_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group_hu8d98e37f2402e54f84c320183314a5ae_92200_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="group"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;h5 id="信号搜索">信号搜索
&lt;/h5>&lt;p>如果你需要从某一时刻向前或向后找一个多位宽信号等于某个值的时刻, 除非你十分确定它就在附近, 否则&lt;strong>强烈建议使用值查找方法&lt;/strong>, 而不是手动翻找。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value.png"
width="1495"
height="927"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value_hu5595be86e1f9c57aab119a329a5e47b9_91300_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value_hu5595be86e1f9c57aab119a329a5e47b9_91300_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="search"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;h4 id="调试思路概述">调试思路概述
&lt;/h4>&lt;p>调试是指在我们设计的一个系统在执行功能出现了错误时，定位出错误的原因。比如我们设计了一个CPU，在运行一个测试程序时发现结果不对，这时就需要进行调试，以便后续进行纠正。可以看到全局上的调试原理是从结果推原因，&lt;em>难点就是定位错误的源头&lt;/em>。
本文档编写时采用的的调试思路是: &lt;strong>时间上先定错，空间上再定错&lt;/strong>。一个设计在执行功能出现错误时，往往是在一个大片的时间段内该设计的电路的执行都不符合预期。“时间上先定错，空间上再定错”具体解释如下:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>时间上先定错&lt;/strong>: 在出错的大片时间段里，定位出源头部分，源头部分是一个较小的时间段。&lt;/li>
&lt;li>&lt;strong>空间上再定错&lt;/strong>: 在源头时间段里，查看设计电路的控制部分和数据通路，定位是哪个信号带来的错误，或者是哪几个信号的组合带来的错误，或者是设计上哪里有疏忽带来的错误。&lt;/li>
&lt;/ol>
&lt;p>比如一个设计的 CPU 在执行测试程序出错了，这个程序是分很多指令的，这些指令是在时间上顺序执行的，我们首先需要找出第一个错误的的指令（也就是时间上定位错误），随后在 CPU 的数据通路和控制信号里定位该指令错误的原因（也就是空间上定位错误）。&lt;br>
相对于空间上的定错，时间上的定错更加困难。特别是对CPU调试而言，更是如此，往往80%的精力都用于时间上定错了。
时间上定错和空间上定错，是一种针对设计的整体调试的指导思想。但当我们仿真发现一个错误时，往往需要先去辨别错误时什么类型，并按照一定的方法追踪错误原因。&lt;/p>
&lt;br/>
&lt;br/>
&lt;p>仿真出错情况按照波形直接观察结果可分为两类:&lt;/p>
&lt;ol>
&lt;li>波形出错: 从波形图里直接观察，而不需要分析电路设计的功能，就能判断的错，比如波形中信号为
“X”。&lt;/li>
&lt;li>逻辑出错: 波形直接观察很正常，但其电路执行结果不符合预期，属于逻辑出错，比如加法器运行结果不
对。
“波形出错”为浅层次的出错，都是很容易查找到原因的。
&lt;strong>“逻辑出错”则是深层次的出错，是真正调试难点，其具体内容也是包罗万象。&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="波形出错">波形出错
&lt;/h3>&lt;p>波形出错，细分又可归为以下几类:&lt;/p>
&lt;ol>
&lt;li>发现信号为“Z”&lt;/li>
&lt;li>发现信号为“X”&lt;/li>
&lt;li>波形停止: 某一时刻开始仿真波形不再输出新内容, 而仿真仍在进行&lt;/li>
&lt;li>越沿采样: 上升沿采样到被采样数据在上升沿后的值&lt;/li>
&lt;li>其他，波形怪异: 仿真波形图显示怪异，与设计的电路功能无关的错误&lt;/li>
&lt;/ol>
&lt;h4 id="信号为z">信号为“Z”
&lt;/h4>&lt;p>“Z”表示高阻，比如电路断路了就是显示为高阻，往往是模块调用的信号未连接导致的信号悬空，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z.png"
width="966"
height="360"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z_hu0302a8bb021e83fa85f5832ed369d40f_95816_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z_hu0302a8bb021e83fa85f5832ed369d40f_95816_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="signalZ"
class="gallery-image"
data-flex-grow="268"
data-flex-basis="644px"
>
上图示例中有一下几点比较重要：&lt;/p>
&lt;ol>
&lt;li>信号值为“Z”，为模块调用是信号未连接，未连接包括两种：&lt;strong>显式的未连接&lt;/strong>，如图 1-1(a)中的.c()；&lt;strong>隐式的未连接&lt;/strong>，如图 1-1(a)中模块adder调用时，a端口即未连接。“显式的未连接”一般是人为故意设置的，只针对 output 类接口；“隐式的未连接”则是疏忽，属于代码不规范，往往也是导致信号值为“Z”的主要原因。&lt;/li>
&lt;li>adder 模块里，a 端口未连接，导致 a 为“Z”，但 c 端口也未连接，c 却是固定值。这是因而 a 端口是input，c 端口是 output。output 类接口未连接是母模块里不使用该信号，可能是人为故意设置的。所有的input 类接口被调用时不允许悬空。&lt;/li>
&lt;li>adder 模块里 a信号从 0时刻开始就是“Z”，而 a_r 信号确实在 100ns 左右才变成“Z”的。这是因而 a信号为端口，被调用时就未链接，故从0刻就为“Z”，但a_r信号是内部寄存器，从100ns时刻才使用a信号参与赋值，所以也变成了“Z”。&lt;/li>
&lt;/ol>
&lt;p>针对以上以上几点，我们有一下几点建议：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>RTL编写时注意代码规范，特别是模块调用时，按接口顺序一一对应。&lt;/li>
&lt;li>所有input类接口被调用时不允许悬空。&lt;/li>
&lt;li>一旦发现一个信号为“Z”，向前追踪产生该信号的因子信号，看是哪个为“Z”，一直追踪下去直到追踪到该模块里的input接口，随后进行修正。&lt;/li>
&lt;li>有可能“Z”只出现在向量信号里的某几位上，也是一样的追踪，有可能调用时某个接口存在宽度不匹配也会带来该接口上某些位为“Z”。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="信号为x">信号为“X”
&lt;/h4>&lt;p>“X”表示未赋值，比如寄存器未初始化，多驱动等，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X.png"
width="975"
height="385"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X_hu820c3342f700fa1f4327fccdcefe151c_86807_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X_hu820c3342f700fa1f4327fccdcefe151c_86807_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="signalX"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="607px"
>
在上图中，由于b_r信号声明后始终未赋值，导致其值为“X”，后续 c信号由于使用了b_r信号，导致其值也为“X”。&lt;/p>
&lt;p>另外，Vivado对于多驱动（2个及2个以上电路单元驱动同一信号），仿真时也会产生“X”信号，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven.png"
width="908"
height="264"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven_hu9e91ad4d2cafe175e1061151f32a8b77_41611_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven_hu9e91ad4d2cafe175e1061151f32a8b77_41611_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="multiDrive"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="825px"
>&lt;/p>
&lt;p>这种情况下追寻信号为“X”的原因可能不太好追，可以尝试先进行综合，观察下Critial warning，此时会报出多驱
动的警告, 如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning.png"
width="898"
height="286"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning_hu796207cb53c48ac70860a34b4e3ba662_73328_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning_hu796207cb53c48ac70860a34b4e3ba662_73328_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="multiDriveWarning"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="753px"
>&lt;/p>
&lt;p>针对信号为“X”情况，我们有以下几点建议:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>一旦发现仿真错误来自某个信号为“X”，则向前追踪产生该信号的因子信号，看是哪个为“X”，一直追踪下去直到追踪到某个信号未赋值，随后修正。&lt;/li>
&lt;li>如果因子信号都没有为X的，则很可能是多驱动导致的，则综合排查Error和Critical warning。&lt;/li>
&lt;li>寄存器型信号如果没有复位值，在复位阶段其值可能也为“X”，但可能这并不会带来错误。&lt;/li>
&lt;li>“X”和1进行或运算结果为1，“X”和0进行或运行结果为0。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="波形停止">波形停止
&lt;/h4>&lt;p>波形停止是指仿真停止某一时刻，再也无法前进分毫，而仿真却显示不停地在运行，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop.png"
width="933"
height="330"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop_hue96692f6371d58854ce1504d8fa90522_69085_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop_hue96692f6371d58854ce1504d8fa90522_69085_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="waveStop"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>另外一种波形停止的情况是tcl报错“FATAL_ERROR: Iteration limit 10000 is reached.”
&lt;br/>&lt;/p>
&lt;p>波形停止基本都是由于“组合环路”导致的，所谓组合环路就是信号A的组合逻辑表达式中某个产生因子为B，而B的组合逻辑表达式中又用到了信号A，如上图源码c_t用到了c，而c又用到c_t。仿真器是在每个周期内计算该周期的所有表达式，组合逻辑循环嵌套，带来的是仿真器的循环计算，导致其无法退出该计算，带来了波形停止的现象。
由于波形停止出现时，并不好排查哪里写出了组合环路，我们建议按以下处理：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>一旦发现波形停止，则先对设计进行综合。&lt;/li>
&lt;li>查看综合产生的Error和Critical warning，并尝试修正。比如上图示例中的组合环路，经过Vivado的综合
后变成了一个多驱动的关键警告，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning.png"
width="944"
height="379"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning_hua7cd5af7436fc2ebcee1517281d00968_118938_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning_hua7cd5af7436fc2ebcee1517281d00968_118938_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="combLoopWarning"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="597px"
>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>另外，Vivado工程中有 TCL命令 report_timing_summary，会检查组合环路，并报出检查结果。但很遗憾，对于我们上图的示例，该命令并没有检查出组合环路，很有可能和综合时变成了多驱动有关。&lt;/p>
&lt;h4 id="越沿采样">越沿采样
&lt;/h4>&lt;p>越沿采样在波形出错中是一个隐藏较深的出错，往往可能会和逻辑出错混在一起。初看起来，其波形也是很正常的，而且在发生越沿采样后，往往会再执行很长时间才会出错。因而需要大家先按照逻辑出错去调试，最后如果发现数据采样有些异常，就需要甄别下是否是越沿采样的错误了。
越沿采样是指一个被采样的信号在上升沿采样到了其在上升沿后的值，一般情况下，认为这是一个错误，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample.png"
width="873"
height="333"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample_hu13c5a16259a195943300ac7d916e7818_65192_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample_hu13c5a16259a195943300ac7d916e7818_65192_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="overSample"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/p>
&lt;p>上图示例中在105ns时刻，clk上升沿到来，a_r和a_r_r同时变为了 1（也就是a的值）。a_r在105时刻前是0，在 105时刻后是 1。从源码来看，a_r_r是在上升沿采样a_r的值，结果其在 105时刻采样到 a_r为1的值，也就是采样到了a_r在同一上升沿后的值。这就属于越沿采样。
造成这一现象更深层的原因是Verilog里阻塞赋值“=”和非阻塞赋值“&amp;lt;=” 混用。上图源码中a_r采用阻塞赋值，而a_r_r采用非阻塞赋值。
每一次赋值，分为两步：为计算等式左侧的表达式和赋值给右侧的信号，简记为计算和赋值。在一个上升沿到来时，所有由上升沿驱动的信号按以下顺序进行处理：&lt;/p>
&lt;ol>
&lt;li>先处理阻塞赋值，先完成计算和赋值，同一信号完成计算后立马完成赋值。同一 always 块里的阻塞赋值从上到下按顺序串行执行，不同 always 块里的阻塞赋值依赖工具实现确定顺序串行执行，一一完成计算和赋值。&lt;/li>
&lt;li>再进行非阻塞赋值的计算。所有非阻塞赋值其等式左侧的值都同时计算好。&lt;/li>
&lt;li>上升沿结束时，所有非阻塞赋值同时完成最终的赋值动作。
从以上描述可以看到，非阻塞赋值是在上升沿的最后一个时间步里完成处理的，晚于阻塞赋值的处理。所以上图示例中，a_r_r的赋值晚于a_r的赋值，造成了越沿采样的情况。
&lt;br/>&lt;/li>
&lt;/ol>
&lt;p>越沿采样，除非特意设计，一般我们认为是一个设计错误，针对越沿采样，我们有一下几点建议：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>RTL编写时注意代码规范，&lt;strong>所有always写的时序逻辑只允许采用非阻塞赋值&lt;/strong>。&lt;/li>
&lt;li>一旦发现越沿采样的情况，追踪被采样信号，直到追踪到某一个阻塞赋值的信号，随后进行修正。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="波形怪异">波形怪异
&lt;/h4>&lt;p>目前未能想到的波形出错的类型都归为波形怪异。
当出现波形怪异类的错时，需要区分其是仿真工具出错还是RTL代码出错：&lt;/p>
&lt;ol>
&lt;li>观察出错的信号，看其生成因子，如果自我判断 RTL 应该没有，且波形显示确实太怪异（比如始终为
32’hxx?x0x?），则很有可能仿真工具出错。重启电脑甚至重建工程试试。&lt;/li>
&lt;li>实在无法从波形里区分出是什么错。可以尝试先运行综合，看出综合后的 Error、Critical warning 和
warning。其中&lt;strong>Error是必须要修正的&lt;/strong>，Critical warning是强烈建议要修正的，warning是建议能修则修的。&lt;/li>
&lt;li>经常有些不符合规范的代码，Vivado也不会报出 Warning，需要大家仔细复核自己的代码。常见的隐蔽错
误有：对input信号进行了赋值，模块调用信号连接错误，reset信号接成了clock信号，等等。&lt;/li>
&lt;/ol>
&lt;h3 id="逻辑出错">逻辑出错
&lt;/h3>&lt;p>逻辑出错则是包罗万象，错误类型是设计的电路功能有错，此时波形界面看起来是很正常的，我们需要利用波形观察各信号的变化，结合预定的电路功能进行定错。
以数据和控制分开来看，逻辑出错可分为两类：&lt;strong>数据通路出错&lt;/strong>和&lt;strong>控制信号出错&lt;/strong>。其中数据通路通常属于较简单的错，比如加法器算两个加数的和，结果不对；而控制信号出错则往往比较难调，往往是设计时的边角问题考虑不周导致的，比如 CPU 的访存系统出错。这些都是逻辑上出错了，但是很不幸的是，在我们未能定位出该错误的源头时，我们往往不能判断出其是数据通路出错，还是控制信号出错。电路设计者在设计之初应当对整个电路
有较全面的认识和考虑，尽量减少控制信号出错的情况。
逻辑出错时，不同的电路设计有其特定的调试手段，难以总结出统一的调试手段，&lt;strong>但他们的指导思想是一致的：时间上先定错，空间上再定错。&lt;/strong>&lt;/p>
&lt;p>以下我们将针对CPU的逻辑出错调试作简单的说明，主要以流水线CPU为例进行说明。&lt;/p>
&lt;h4 id="定位出错时间源头">定位出错时间源头
&lt;/h4>&lt;p>首先需要各流水级信号分组抓出，比如抓出每级流水里的 PC 值、指令编码和执行结果。
流水级间的进入和退出的控制信号也尤其重要，必须抓出，CPU 初期调试往往都是流水线控制出错了。
&lt;br/>&lt;/p>
&lt;p>具体调试时，可以采用一下方案：&lt;/p>
&lt;ol>
&lt;li>在波形最后出错处，确认取回的指令和 PC 值是对应正确的，也就是确认取指正确，这时就需要对照反汇编程序test.s。&lt;/li>
&lt;li>如果取指不正确，则往前追溯，直到第一个取指正确的地方。追溯的方法也有讲究，有时不能简单一条条指令追溯，因为第一个取指正确的地方可能在很早之前，必要的时候，应跨越一大段指令段，去确认取指是否正确。追溯过程就是程序段不停的压缩，直到找到第一个取指正确的地方，此时往往要用到仿真工具中加标签的方法。&lt;/li>
&lt;li>找到第一条指令正确的地方后，可以先确认该指令执行结果是否正确。随后我们的调试目标是确认时间上第一个出错的地方是在该指令前还是在该指令后。确认方法就需要结合测试程序，比如判断该指令位于的函数，确认该函数是否应该执行，其进入条件是否正确。这里有很多种调试方法，需要根据具体情况具体分析，无法很好的总结分类，需要大家在实践中进行总结。总而言之，需要将测试程序代码和 CPU 结合起来联调。&lt;/li>
&lt;/ol>
&lt;p>以上方法是由后往前追，如果追溯过程中发现无法再追了，则可以考虑由前往后追。这里的“前”就需要大家好好定位了，甚至可能存在运气的成分，一定要确保这个“前”之前的程序执行时对，这样往后追才能追到正确的第一个错误的店，否则，只会将自己引向错误的方法。
时间上的定错，要求大家对func测试程序有一定的了解和掌握。&lt;/p>
&lt;h4 id="定位出错空间源头">定位出错空间源头
&lt;/h4>&lt;p>在完成时间上的定错后，也就是找到一个执行出错的指令后，需要进行空间定错了。&lt;/p>
&lt;p>空间定错时需要大家对CPU微结构有更深入的理解。建议大家以空间划分的视角去理解CPU，特别是流水线CPU，每一流水级都是有对应的部件的，应当理解清楚各流水级的划分。
空间定位时，有两种方法：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>从CPU流水前端向流水后端排查，确认指令在哪个流水级开始出错。首先要排查的就是取指是否正确。&lt;/li>
&lt;li>从 CPU 流水后端向流水前端排查，确认指令是从哪个流水级出错的。首先要排查的就是写回结果是否正确。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="上板调试">上板调试
&lt;/h2>&lt;p>当出现上板和仿真的行为不一致的时候, 调试起来就会变得&lt;strong>非常困难&lt;/strong>, 请按照以下步骤进行调试:&lt;/p>
&lt;h3 id="复核生成下载的bit文件是否正确">复核生成、下载的bit文件是否正确
&lt;/h3>&lt;p>&lt;strong>请再次确认烧录的bit文件是否是最新正确的bit文件。&lt;/strong>
bit文件默认在 \project\loongson.runs\impl_1\ 目录下的 soc_lite_top.bit 文件。&lt;/p>
&lt;h3 id="复核仿真结果是否正确">复核仿真结果是否正确
&lt;/h3>&lt;p>顶层不能出现“X”或“Z”, &lt;strong>特别是控制信号。&lt;/strong>&lt;/p>
&lt;h3 id="检查时序报告">检查时序报告
&lt;/h3>&lt;p>Vivado 界面左侧“IMPLEMENTATION” -&amp;gt; “Open Implemented Design” -&amp;gt; “Report Timing Summary”, 确保所有时序都是正的。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report_hu5eababdfbb666973f739110226b88054_220319_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report_hu5eababdfbb666973f739110226b88054_220319_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="timingReport"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>如果有负值, 可以点击数值查看具体路径(称为关键路径), 右键点击原理图查看具体路径, 根据路径分割关键路径使得时序满足。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path_hu85a1ef3de81ceb9c6f4aa382d9096c6e_239420_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path_hu85a1ef3de81ceb9c6f4aa382d9096c6e_239420_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="timingPath"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>一般我们用以下几个方法解决建立时间不满足问题:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>简化逻辑&lt;/li>
&lt;li>插入触发器&lt;/li>
&lt;li>降低时钟频率&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>时序报告阅读教程可&lt;a class="link" href="https/blog.csdn.net/Bunny9__/article/details/119982706" target="_blank" rel="noopener"
>参考&lt;/a>或者自行百度。&lt;/p>
&lt;h3 id="修正warning">修正warning
&lt;/h3>&lt;p>认真排查综合和实现时的Warning，特别是Critical Warning，&lt;em>尽量修正&lt;/em>。
可以使用Vivado界面左侧&amp;quot;RTL ANALYSIS&amp;quot; -&amp;gt; &amp;ldquo;Run Linter&amp;quot;查看Linter Warning。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning_huc6b68afd4e5a229faa568f5c009a3446_238019_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning_huc6b68afd4e5a229faa568f5c009a3446_238019_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="lintWarning"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h3 id="检查rtl代码">检查RTL代码
&lt;/h3>&lt;p>认真排查RTL代码规范，避免多驱动、阻塞赋值乱用、模块端口乱接、时钟复位信号接错&amp;hellip;&amp;hellip;&lt;/p>
&lt;h3 id="调整随机种子复现上板错误">调整随机种子复现上板错误
&lt;/h3>&lt;p>如果上板时发现在某一些随机种子下测试通过，在另一些随机种子情况下出错，请确认出错的随机种子，修改 rtCONFREG/confreg.v 里的 RANDOM_SEED 的定义，改为出错时的随机种子，随后进行仿真：如果有错，则调试；如果发现仿真没错，则在上板时找寻下一个出错的随机种子，同样设定好RANDOM_SEED后进行仿真，如果还是没错则转下一步。
最后的功能测试通过的要求是：上板后，&lt;em>随意切换&lt;/em>拨码开关，均不会出错。&lt;/p>
&lt;h3 id="使用逻辑分析仪进行在线调试">使用逻辑分析仪进行在线调试
&lt;/h3>&lt;p>&lt;strong>请先重点排查其他问题，最后再使用在线调试的方法&lt;/strong>
&lt;del>这个真的超级超级麻烦&lt;/del>
请&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-chipscope-debug" target="_blank" rel="noopener"
>参考&lt;/a>
&lt;br/>&lt;/p>
&lt;p>如果还是解决不了直接转下一步&lt;/p>
&lt;h3 id="反思">反思
&lt;/h3>&lt;p>&lt;strong>真的，现在除了反思还能干什么？&lt;/strong>&lt;/p></description></item><item><title>功能测试</title><link>https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</guid><description>&lt;h2 id="基于trace比对的调试框架">基于trace比对的调试框架
&lt;/h2>&lt;p>在调试C程序的时候应该都使用过单步调试这种调试手段。在“慢动作”运行程序的每一行代码的情况下，能够及时看到每一行代码的运行行为是否符合预期，从而能够及时定位到出错点。在实验开发环境中提供的这套基于trace比对的调试辅助手段，借鉴的就是这种“单步调试”的策略。&lt;/p>
&lt;p>其具体实现方式是：我们先用一个已知的功能上是正确的CPU运行一遍测试指令序列，将每条指令的PC和写寄存器的信息记录下，记为golden_trace；然后在验证myCPU的时候运行相同的指令序列，在myCPU每条指令写寄存器的时候，将myCPU中的PC和写寄存器的信息同之前的golden_trace进行比对，如果不一样，那么立刻报错并停止仿真。&lt;/p>
&lt;p>简单的来说, golden_trace就是参考答案, 通过比对myCPU的运行结果和golden_trace的运行结果, 来判断myCPU功能的正确性。&lt;/p>
&lt;h2 id="功能测试环境使用方法">功能测试环境使用方法
&lt;/h2>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local/tree/ee7dd7e5f1d12a9f94788a279f096b25407d9d0b" target="_blank" rel="noopener"
>基于NSCSCC2024 团体赛功能测试&lt;/a>
它是&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local" target="_blank" rel="noopener"
>CPU设计实战&amp;ndash;Loongarch版&lt;/a>的实验环境的exp16&lt;/p>
&lt;/blockquote>
&lt;h3 id="开发环境组织结构介绍">开发环境组织结构介绍
&lt;/h3>&lt;p>整个实验开发环境的基本目录结构及各部分功能简介如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">功能验证测试程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">编译生成的二进制测试程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">coe&lt;/span> &lt;span class="n">测试程序对应上板用的二进制纯数据文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mif&lt;/span> &lt;span class="n">测试程序对应功能仿真用的二进制纯数据文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">测试程序汇编代码说明&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">gettrace&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">trace文件生成工程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">gettrace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">xpr&lt;/span> &lt;span class="n">生成golden_trace的Vivado工程文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">golden_trace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">生成的golden_trace文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">myCPU&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">待验证的CPU设计代码目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">soc_verify&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">soc_axi&lt;/span> &lt;span class="n">所现的CPU的SoC验证环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">rtl&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">验证用SoC设计代码目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">soc_lite_top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">SoC的顶层文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">CONFREG&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">confreg模块&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">用于访问实验板上的LED灯&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">拨码开关等外设&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">xilinx_ip&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">定制的Xilinx&lt;/span> &lt;span class="n">IP&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">包含clk_pll&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">inst_ram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">testbench&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">功能仿真验证平台&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">mycpu_tb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">功能仿真顶层&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">该模块会抓取debug信息与golden_trace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt进行比对&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">run_vivado&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">Vivado工程的运行目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">constraints&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">Vivado工程设计的约束&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">create_project&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tcl&lt;/span> &lt;span class="n">创建Vivado工程的tcl脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="soc_lite片上系统结构介绍">SoC_Lite片上系统结构介绍
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure.png"
width="578"
height="361"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure_hu1184322f6376438a13ca0fde4155d650_15429_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure_hu1184322f6376438a13ca0fde4155d650_15429_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="soc_lite"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;center>用于验证myCPU的片上系统&lt;/center>
&lt;ul>
&lt;li>PLL: 锁相环，用于产生时钟信号&lt;/li>
&lt;li>iram: 指令内存，用于存放测试程序&lt;/li>
&lt;li>dram: 数据内存，用于存放数据&lt;/li>
&lt;li>confreg: 外设控制器，用于控制LED灯、拨码开关等外设&lt;/li>
&lt;li>mycpu: 待验证的CPU设计&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>因为在LoongArch指令系统架构下，所有I/O设备的寄存器都是采用memory mapped方式访问的。我们这里实现的confreg也不例外。Memory mapped的访问方式意味I/O设备中的寄存器各自都有一个唯一内存编址，所以CPU可以通过load、store指令对其进行访问。&lt;/p>
&lt;/blockquote>
&lt;h3 id="生成golden_trace">生成golden_trace
&lt;/h3>&lt;h4 id="func功能测试程序">func功能测试程序
&lt;/h4>&lt;p>&lt;strong>以下涉及Linux编译的部分不要求大家初期掌握, 包里已经提供了编译好的最终文件&lt;/strong>&lt;/p>
&lt;h5 id="func测试程序说明">func测试程序说明
&lt;/h5>&lt;p>func程序分为func/start.S和func/inst/*.S，都是LoongArch32汇编程序:&lt;/p>
&lt;ol>
&lt;li>func/start.S ：主函数，执行必要的启动初始化后调用func/inst/下的各汇编程序。&lt;/li>
&lt;li>func/inst/*.S ：针对每条指令或功能点有一个汇编测试程序。&lt;/li>
&lt;li>func/include/*.h ：测试程序的配置信息和宏定义。&lt;/li>
&lt;/ol>
&lt;p>主函数func/start.S中主体部分代码如下，分为三大部分，具体查看注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是设置程序开始的LED灯和数码管显示，单色LED全灭，双色LED灯一红一绿。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a0, LED_RG1_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a1, LED_RG0_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a2, LED_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (s1, NUM_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t1, 0x0002)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t2, 0x0001)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t3, 0x0000ffff)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lu12i.w s3, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a0, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t2, a1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t3, a2, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w s3, s1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是运行各功能点测试，每个测试完执行idle_1s等待一段时间，且数码管显示加1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inst_test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl n1_lu12i_w_test #lu12i.w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl idle_1s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl n2_add_w_test #add.w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl idle_1s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是显示测试结果，PASS则双色LED灯亮两个绿色，单色LED不亮；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #Fail则双色LED灯亮两个红色，单色LED灯全亮。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test_end:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (s0, TEST_NUM)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> beq s0, s3, 1f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a0, LED_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a1, LED_RG1_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a2, LED_RG0_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t1, 0x0002)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w zero, a0, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a2, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>inst/ 目录下每个功能点的测试代码程序名为n#_*_test.S，其中“#”为编号，如有15个功能点测试，则从n1编号到n15。每个功能点的测试，其测试代码大致如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LEAF(n1_lu12i_w_test)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s0, s0 ,1 #加载功能点编号s0++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s2, zero, 0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lu12i.w t2, 0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###test inst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t1, zero, 0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TEST_LU12I_W(0x00000, 0x00000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...... #测试程序，省略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TEST_LU12I_W(0xff0af, 0xff0a0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###detect exception
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne s2, zero, inst_error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###score ++ #s3存放功能测试计分，每通过一个功能点测试，则+1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s3, s3, 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###output (s0&amp;lt;&amp;lt;24)|s3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inst_error:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t1, s0, 24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> or t0, t1, s3 #s0高8位为功能点编号，s3低8位为通过功能点数，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #相或结果显示到数码管上。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t0, s1, 0 #s1存放数码管地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jirl zero, ra, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> END(n1_lu12i_w_test)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上可以看到，测试程序的行为是：当通过第一个功能测试后，数码管会显示0x0100_0001，随后执行idle_1s；执行第二个功能点测试，再次通过数码管会显示0x0200_0002，执行idle_1s……依次类推。显示，每个功能点测试通过，应当数码管高8位和低8位永远一样。如果中途数码管显示从0x0500_0005变成了0x0600_0005，则说明运行第六个功能点测试出错。&lt;/p>
&lt;p>最后来看 &lt;code>start.S&lt;/code> 文件中 &lt;code>idle_1s&lt;/code> 函数的代码，其使用一个循环来暂停测试程序执行的。其主体部分代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> idle_1s:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #initial t3 //读取confreg模块里的switch_interleave的值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ld.w t2, t0, 0 #switch_interleave: {switch[7],1&amp;#39;b0, switch[6],1&amp;#39;b0...switch[0],1&amp;#39;b0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor t2, t2, t1 //拨码开关拨上为0，故要xor来取反
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t3, t2, 9 #t3 = switch interleave &amp;lt;&amp;lt; 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sub1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t3, t3, -1 //t3累减1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #select min{t3, switch_interleave} //获取t3和当前switch_interleave的最小值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ld.w t2, t0, 0 #switch_interleave:{switch[7],1&amp;#39;b0,switch[6],1&amp;#39;b0...switch[0],1&amp;#39;b0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor t2, t2, t1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t2, t2, 9 #switch interleave &amp;lt;&amp;lt; 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4 //以上ld.w-xor-slli.w三条指令再次获取switch_interleave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sltu t4, t3, t2 //无符号比大小，如果t3比switch_interleave 小则置t4=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne t4, zero, 1f //t4!=0,意味着t3比switch_interleave大，则跳1f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t3, t2, 0 //否则，将t3赋值为更小的switch_interleave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne t3,zero, sub1 //如果t3没有减到0，则返回循环开头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jirl zero, ra, 0 //结束idle_1s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上代码可以看到，idle_1s 会依据拨码开关的状态设定循环次数。在仿真环境下，我们会模拟拨码开关为全拨下的状态，以使 idle_1s 循环次数最小。之所以这样设置，是因为 FPGA 运行远远快于仿真的速度，假设CPU运行一个程序需要106个CPU周期，再假设CPU在FPGA上运行频率为10MHz，那其在FPGA上运行完一个程序只需要0.1s；同样，我们仿真运行这个程序，假设我们仿真设置的CPU运行频率也是10MHz，那我们仿真运行完这个程序也是只需要0.1s吗？显然这是不可能的，仿真是软件模拟CPU运行情况的，也就是它要模拟每个周期CPU内部的变化，运行完这一个程序，需要模拟106个CPU周期。我们在一台2016年产的主流X86台式机上进行实测发现，Vivado自带的Xsim仿真器运行SoC_Lite的仿真，每模拟一个周期大约需要600us，这意味着Xsim上模拟106个周期所花费的实际时间约10分钟。&lt;/p>
&lt;p>同一程序，运行仿真测试大约需要10分钟，而在FPGA上运行只需要0.1秒（甚至更短，比如CPU运行在50MHz主频则运行完程序只需要0.02s）。所以我们如果不控制好仿真运行时的 idle_1s 函数，则我们可能会陷入到idle_1s长时间等待中；类似的，如果我们上板时设定 idle_1s 函数很短（比如拨码开关全拨下），则 idle_1s 时间太短导致我们无法看到数码管累加的效果&lt;/p>
&lt;p>&lt;strong>如果大家在自实现CPU上板运行过程中，发现数码管累加跳动太慢，请调小拨码开关代表的数值；如果发现数码管累加跳动太快，请调大拨码开关代表的数值。&lt;/strong>&lt;/p>
&lt;h5 id="loongarch-gcc交叉编译工具的安装">LoongArch-GCC交叉编译工具的安装
&lt;/h5>&lt;p>自行编译func程序需要使用LoongArch32R的GCC交叉编译工具。该工具链的安装可以从 &lt;a class="link" href="https://gitee.com/loongson-edu/la32r-toolchains" target="_blank" rel="noopener"
>https://gitee.com/loongson-edu/la32r-toolchains&lt;/a> 下载源码自行编译、安装，也可以直接从 &lt;a class="link" href="https://gitee.com/loongson-edu/la32r-toolchains/releases" target="_blank" rel="noopener"
>https://gitee.com/loongson-edu/la32r-toolchains/releases&lt;/a> 下安装包。我们这里主要介绍后一种方式的安装步骤。&lt;/p>
&lt;p>下载安装包时请根据所用机器是X86还是LoongArch选择对应的版本。下载压缩包 loongarch32r-linux-gnusf-*.tar.gz 至Linux操作系统自身的文件系统中。需要特别提醒的是，目前X86版本LoongArch32R的GCC交叉编译工具只支持64位系统（在系统下运行uname -a命令显示架构为x86_64的）。接下来：&lt;/p>
&lt;p>（1）打开一个terminal，进入压缩包所在目录，进行解压：&lt;/p>
&lt;pre>&lt;code>$ sudo tar zxvf loongarch32r-linux-gnusf-*.tar.gz -C /opt/
&lt;/code>&lt;/pre>
&lt;p>（2）确保目录/opt/loongarch32r-linux-gnusf-*/bin/存在，随后执行：&lt;/p>
&lt;pre>&lt;code>$ echo “export PATH=/opt/loongarch32r-linux-gnusf-*/bin/:$PATH” &amp;gt;&amp;gt; ~/.bashrc
&lt;/code>&lt;/pre>
&lt;p>（3）重新打开一个terminal，输入loongarch32然后敲击tab键，如果能够-linux-gnusf-之类的补全，就说明工具链已经安装成功。此时可以编写一个hello.c 然后用工具链进行编译看其是否可以工作。&lt;/p>
&lt;pre>&lt;code>$ loongarch32r-linux-gnusf-gcc hello.c
&lt;/code>&lt;/pre>
&lt;h5 id="func测试程序编译说明">func测试程序编译说明
&lt;/h5>&lt;h6 id="编译脚本">编译脚本
&lt;/h6>&lt;p>func测试程序的编译脚本为验证平台目录下的func/Makefile，对Makefile了解的可以去看下该脚本。该脚本支持以下命令：&lt;/p>
&lt;ul>
&lt;li>make help ：查看帮助信息&lt;/li>
&lt;li>make ：编译得到仿真下使用的结果&lt;/li>
&lt;li>make clean ：删除*.o，*.a和./obj/目录&lt;/li>
&lt;/ul>
&lt;h6 id="编译结果">编译结果
&lt;/h6>&lt;p>func测试程序编译结果位于func/obj/下, 主要会用到的文件及作用如下:&lt;/p>
&lt;ul>
&lt;li>inst_ram.coe ：定制inst_ram所需的数据文件&lt;/li>
&lt;li>inst_ram.mif ：仿真时inst_ram读取的数据文件&lt;/li>
&lt;li>test.s : 对main.elf反汇编得到的文件&lt;/li>
&lt;/ul>
&lt;h5 id="golden_trace生成">golden_trace生成
&lt;/h5>&lt;p>进入 gettrace/ 目录，打开gettrace.xpr工程文件，运行仿真，自动生成参考结果golden_trace.txt。
重点关注此时inst_ram加载的确实是前一个步骤编译出的结果。
要等仿真运行完成，golden_trace.txt才有完整的内容。&lt;/p>
&lt;h3 id="验证自己的cpu">验证自己的CPU
&lt;/h3>&lt;h4 id="cpu对外总线接口">CPU对外总线接口
&lt;/h4>&lt;p>一般来说我们根据由易到难挨个实现SRAM接口, 带握手的SRAM接口, AXI总线接口, 这里我们以SRAM接口为例:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">名称&lt;/th>
&lt;th style="text-align:center">位宽&lt;/th>
&lt;th style="text-align:center">方向&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">clk&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">时钟信号, 来自clk_pll的时钟输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">resetn&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">复位信号, 低电平同步复位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">中断信号, 8个硬件中断信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_en&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_wen&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存字节写使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_addr&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存地址, 字节寻址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_rdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">指令内存读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_en&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_wen&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存字节写使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_addr&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存地址, 字节寻址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_rdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">数据内存读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_pc&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级（多周期最后一级）的PC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_we&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的写使能，为字节写使能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_wnum&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的目的寄存器号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的写数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="打开vivado工程">打开Vivado工程
&lt;/h4>&lt;p>测试平台采用tcl脚本来创建工程, 方法如下:&lt;/p>
&lt;ol>
&lt;li>启动Vivado&lt;/li>
&lt;li>点击最下方的&amp;quot;Tcl Console&amp;quot;标签&lt;/li>
&lt;li>cd到 /soc_verify/soc_axi/run_vivado/ 目录下&lt;/li>
&lt;li>输入 source create_project.tcl 创建Vivado工程&lt;/li>
&lt;li>如果你的CPU设计代码在 /myCPU/ 目录下, 则会自动导入到工程中, 请检查是否导入成功, 如未成功请手动导入&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>更具体可&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-tcl-create-project" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="func测试验证结果判断">func测试验证结果判断
&lt;/h4>&lt;h5 id="仿真结果正确判断">仿真结果正确判断
&lt;/h5>&lt;p>仿真结果正确判断有两种方法。&lt;/p>
&lt;p>第一种方法，也是最简单的，就是看Vivado控制台打印&lt;em>Error&lt;/em>还是&lt;em>PASS&lt;/em>。正确的控制台打印信息如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info.png"
width="729"
height="381"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info_hu18ab18c0ae90476d981631443431c0df_145626_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info_hu18ab18c0ae90476d981631443431c0df_145626_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="funcPass"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>第二种方法，是通过波形窗口观察程序执行结果func正确的执行行为，抓取confreg模块的信号led_data、led_rg0_data、led_rg1_data、num_data：&lt;/p>
&lt;ol>
&lt;li>开始，单色LED写全1表示全灭，双色LED写0x1和0x2表示一红一绿，数码写全0；&lt;/li>
&lt;li>执行过程中，单色LED全灭，双色LED灯一红一绿，数码管高8位和低8位同步累加；&lt;/li>
&lt;li>结束时，单色LED写全1表示全灭，双色LED均写0x1表示亮两绿，数码管高8位和低8位数值（十六进制）相同，对应测试功能点数目。
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave.png"
width="664"
height="940"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave_huce95865f682a9f873e47f2370baa81b8_274222_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave_huce95865f682a9f873e47f2370baa81b8_274222_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="funcWave"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/li>
&lt;/ol>
&lt;h5 id="上板验证结果正确判断">上板验证结果正确判断
&lt;/h5>&lt;p>func正确的执行行为是：&lt;/p>
&lt;ol>
&lt;li>开始，单色LED全灭，双色LED灯一红一绿，数码管显示全0；&lt;/li>
&lt;li>执行过程中，单色LED全灭，双色LED灯一红一绿，数码管高8位和低8位同步累加；&lt;/li>
&lt;li>结束时，单色LED全灭，双色LED灯亮两绿，数码管高8位和低8位数值相同，对应测试功能点数目。&lt;/li>
&lt;/ol>
&lt;p>如果func执行过程中出错了，则数码管高8位和低8位第一次不同处即为测试出错的功能点编号(&lt;strong>只要不同步变化即有错误&lt;/strong>)，且最后的结果是单色LED全亮，双色LED灯亮两红，数码管高8位和低8位数值不同。&lt;/p>
&lt;p>最后FPGA验证通过的效果如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result.png"
width="946"
height="753"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result_hu0dd7af1b6647ce7e7124b01ff91881eb_1489086_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result_hu0dd7af1b6647ce7e7124b01ff91881eb_1489086_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="fpgaPass"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>
&lt;br/>&lt;/p>
&lt;h6 id="拨码开关的作用">拨码开关的作用
&lt;/h6>&lt;p>1.复位后，拨码开关控制wait_1s的循环次数，也就是控制数码管累加的速度。每两个功能点之间会穿插一个wait_1s函数，wait_1s通过一段循环完成计时的功能：在上板时，wait_1s 循环次数由拨码开关控制，可设置循环次数为 （0~0xaaaa）*$2^9$ 。请在复位后，通过拨码开关选择合理的wait_1s延时。
&lt;br/>&lt;/p>
&lt;p>2.复位期间，拨码开关控制随机种子（只对 soc_axi_func 环境有用），也就是axi_ram访问随机延迟的初始种子。
上板时，按下复位键，会自动采样8个拨码开关的值，传为初始随机种子，且会显示初始随机种子低16位到单色 LED 灯上。
上板时随机种子与拨码开关对应关系如下表，需要注意的时延迟类型依据拨码开关的值分为三大类：长延迟、短延迟和无延迟类型。在上板运行时都应当覆盖到这三类延迟类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">拨码开关状态&lt;/th>
&lt;th style="text-align:center">LED显示&lt;/th>
&lt;th style="text-align:center">初始种子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">拨上为1&lt;/td>
&lt;td style="text-align:center">每个拨码开关对应两个led&lt;/td>
&lt;td style="text-align:center">长延迟:[7:0]!=8&amp;rsquo;hff, 短延迟:[7:0]=8&amp;rsquo;hff, 无延迟:[15:0]==16&amp;rsquo;h00ff&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h00&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h0000&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h0000}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h01&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h0003&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h0003}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h02&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h000c&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h000c}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h03&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h000f&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h000f}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;hff&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;hffff&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;hffff}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="进阶-chiplab的difftest测试平台">进阶: chiplab的difftest测试平台
&lt;/h2>&lt;p>difftest相比于trace比对的调试平台更加强大, 它将相同的指令分别给设计核核参考核执行, 之后比对所有的通用寄存器和csr寄存器的值，如果完全相同则认为设计核执行正确。&lt;/p>
&lt;p>在trace比对中, 有些转移指令和store指令不写寄存器, 此时如果发生错误并不会立即停止仿真，而是等到下一条写寄存器的指令才会发现错误。
而在difftest中则不会有这个问题，一旦store指令中的物理地址和存储数据与参考核不同，也会立即暂停仿真，以此来尽早定位错误。&lt;/p>
&lt;blockquote>
&lt;p>具体使用可&lt;a class="link" href="https://chiplab.readthedocs.io/zh/latest/Simulation/difftest.html" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Verilog 基础知识</title><link>https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;h2 id="基础知识">基础知识
&lt;/h2>&lt;h3 id="模块module">模块(Module)
&lt;/h3>&lt;p>​Verilog中的module可以看成一个具有输入输出端口的黑盒子，该黑盒子有输入和输出接口(信号)，通过把输入在盒子中执行某些操作来实现某项功能。(类似于C语言中的函数)&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module.png"
width="996"
height="468"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module_huf162340d60312438ca10b5bb1786ae94_83604_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module_huf162340d60312438ca10b5bb1786ae94_83604_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="510px"
>&lt;/p>
&lt;h4 id="模块描述">模块描述
&lt;/h4>&lt;p>顶层模块(top_module)结构用Verilog语言可描述为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>模块以module 开始，endmodule结束&lt;/li>
&lt;li>top_module 为模块名&lt;/li>
&lt;li>input : 为输入端口&lt;/li>
&lt;li>output:  为输出端口&lt;/li>
&lt;li>&lt;strong>所有代码必须处于module模块中！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>同理，次级模块(mod_a)结构用Verilog语言可描述为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mod_a&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">in1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">in2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意事项：每个模应单独块处于一个.v文件中，模块名即为文件名(规范代码！)&lt;/strong>&lt;/p>
&lt;h4 id="模块输入输出信号">模块输入输出信号
&lt;/h4>&lt;ul>
&lt;li>输出：output&lt;/li>
&lt;li>输入：input&lt;/li>
&lt;/ul>
&lt;p>模块的输入输出端口都可看出模块的信号，若不写信号类型则默认为wire类型信号！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以下两个语句本质是一致的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了wire型信号，还有reg型信号，具体详见1.4节！&lt;/p>
&lt;h4 id="模块实例化">模块实例化
&lt;/h4>&lt;p>如图1所示，top_module的两个输入端口连接到次级模块(mod_a)的输入端口，那如何在top_module模块模块中使用mod_a模块的功能呢？这就需要通过模块实例化，可以把top_module看成C语言中的主函数，次级模块mod_a看成普通函数，这样就可以在主函数中调用其他函数来完成相应的功能！&lt;/p>
&lt;p>在top_module中实例化mod_a的方式为：&lt;/p>
&lt;p>&lt;strong>模块实例化语法：模块名 实例名(定义连接port的信号);&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 按mod_a定义的端口顺序实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance2&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 按mod_a端口名实例化(推荐此种写法)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="逻辑块alwaysgenerate">逻辑块(always、generate)
&lt;/h3>&lt;h4 id="always逻辑块">always逻辑块
&lt;/h4>&lt;p>always块可构建 &lt;em>组合逻辑块&lt;/em> 和 &lt;em>时序逻辑块&lt;/em>，复杂的逻辑操作都需要处于该逻辑块中，如if、case、for等&lt;/p>
&lt;h5 id="组合逻辑块">组合逻辑块
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>always逻辑块中任意信号变化时立即触发，执行begin - end之间的语句&lt;/li>
&lt;li>begin - end用于将多条语句组成一个代码块，只有一条语句时可省略&lt;/li>
&lt;/ul>
&lt;h5 id="时序逻辑电路">时序逻辑电路
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>clk 信号的上升沿触发&lt;/li>
&lt;li>posedge: 上升沿&lt;/li>
&lt;li>negedge: 下降沿&lt;/li>
&lt;/ul>
&lt;h4 id="generate逻辑块">generate逻辑块
&lt;/h4>&lt;p>generate主要结合for循环使用，主要用途有：&lt;/p>
&lt;ul>
&lt;li>对向量中的多个位进行重复操作&lt;/li>
&lt;li>对同一个模块进行多次重复实例化(主要用途)&lt;/li>
&lt;/ul>
&lt;h5 id="操作向量">操作向量
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// genvar i;也可以定义在generate内部
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="c1">// verilog中for循环不支持i++
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// ^:异或运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="模块重复多次实例化">模块重复多次实例化
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">gen_mod_a&lt;/span> &lt;span class="c1">// gen_mod_a为每个begin_end结构的名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance2&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>注意：模块多次实例化时必须写每个begin_end结构的名称(gen_mod_a)&lt;/li>
&lt;li>仿真器会通过gen_mod_a来标识生成结构: gen_mod_a[0],gen_mod_a[1]&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;h4 id="initial块">initial块
&lt;/h4>&lt;p>initial块可以理解为一个初始化块，在initial的起始位置的语句在0时刻即开始执行，之后如果遇到延时，则延时之后执行接下来的语句。&lt;/p>
&lt;p>初始块是&lt;strong>不可综合&lt;/strong>的，因此不能将其转化为带有数字元素的硬件原理图。因此初始块除了在仿真中使用外，并没有太大的作用。&lt;/p>
&lt;p>如:在仿真文件中初始化各种参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys_clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys_rst_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">#&lt;/span>&lt;span class="mh">50&lt;/span> &lt;span class="c1">// #n 代表延时n个时间单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sys_rst_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>initial 块在电路中不可综合，故一般不出现在RTL代码中&lt;/li>
&lt;li>initial 一般只在仿真文件中使用&lt;/li>
&lt;/ul>
&lt;p>若需要在RTL代码中初始化参数，需要用always块，用initial块会导致错误！&lt;/p>
&lt;p>如下所示，在RTL代码中初始化存储器的方式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">255&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="赋值方式">赋值方式
&lt;/h3>&lt;p>Verilog 中赋值方式有三种：连续赋值、阻塞赋值、非阻塞赋值&lt;/p>
&lt;h4 id="连续赋值assign">连续赋值(assign)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>该语句表示把x和y两个信号进行连接，真实的物理连接！&lt;/li>
&lt;li>&lt;strong>不能在always块中使用&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="阻塞赋值">阻塞赋值(=)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 组合块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>组合always块中用阻塞式赋值&lt;/strong>&lt;/li>
&lt;li>执行顺序：按照begin_end语句块中的&lt;strong>顺序依次执行&lt;/strong>，上述输出结果为：out1 = a ，out2 = b&lt;/li>
&lt;/ul>
&lt;h4 id="非阻塞赋值">非阻塞赋值(&amp;lt;=)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 时序块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out1&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out2&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>时序always块中用非阻塞赋值&lt;/strong>&lt;/li>
&lt;li>执行顺序：begin_end中所有语句&lt;strong>并行执行&lt;/strong>，上述输出结果为：out1 = a ，out2 = a&lt;/li>
&lt;/ul>
&lt;h2 id="基础语法">基础语法
&lt;/h2>&lt;h3 id="标识符">标识符
&lt;/h3>&lt;ul>
&lt;li>用途：标识符用于定义常数、变量、信号、端口、参数名、模块名等。&lt;/li>
&lt;li>组成：字母、数字、$、下划线任意组合而成&lt;/li>
&lt;li>注意事项：
&lt;ul>
&lt;li>区分大小写(Verilog 和 verilog是不同的)&lt;/li>
&lt;li>第一个字符只能是字母或下划线(123demo 是非法标识符)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="逻辑值与逻辑运算">逻辑值与逻辑运算      
&lt;/h3>&lt;h4 id="逻辑值">逻辑值
&lt;/h4>&lt;p>Verilog中有4中逻辑值：0、1、x、z&lt;/p>
&lt;ul>
&lt;li>0: 低电平&lt;/li>
&lt;li>1: 高电平&lt;/li>
&lt;li>x: 表示状态未知&lt;/li>
&lt;li>z: 表示高阻状态&lt;/li>
&lt;/ul>
&lt;p>注意：这里的z、x是不区分大小写的(X、Z也可)&lt;/p>
&lt;h4 id="逻辑运算">逻辑运算
&lt;/h4>&lt;h5 id="逻辑运算符与相等或不等">逻辑运算符：&amp;amp;&amp;amp;(与)、==（相等）、||（或）、!=（不等）
&lt;/h5>&lt;ul>
&lt;li>如 m&amp;amp;&amp;amp;n  : 判断m和n是否全为真(非0即为真)，真则输出1&amp;rsquo;b1，否则输出1&amp;rsquo;b0 (4’b1010&amp;amp;4’b0101 = 1’b1)&lt;/li>
&lt;li>最后输出结果只有1bit&lt;/li>
&lt;/ul>
&lt;h5 id="按位运算符">按位运算符：&amp;amp;、|、~、^、~&amp;amp;、~^、~| 
&lt;/h5>&lt;ul>
&lt;li>如 m&amp;amp;n  : 是把m的每一位与n的每一位按位做与运算 (4’b1010&amp;amp;4’b0101 = 4’b0000)&lt;/li>
&lt;li>输出结果与m/n的bit数相同&lt;/li>
&lt;/ul>
&lt;h5 id="归约运算符-">归约运算符：  &amp;amp;、|、~、^、&amp;amp;、~^、~| 
&lt;/h5>&lt;ul>
&lt;li>只有一个参量参与运算时( &amp;amp;为一元运算符),表示规约与，即向量内部进行与运算&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示a[3]&amp;amp;a[2]&amp;amp;a[1]&amp;amp;a[0] 相当于(a[3:0]==4&amp;#39;b1111)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示b[3]|b[2]|b[1]|b[0] 相当于(b[3:0]!=4&amp;#39;b0000)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示c[3]^c[2]^c[1]^c[0]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>即(&amp;amp;4’b0101 = 0&amp;amp;1&amp;amp;0&amp;amp;1 = 1&amp;rsquo;b0 )&lt;/li>
&lt;li>最后输出结果只有1bit&lt;/li>
&lt;/ul>
&lt;h3 id="常量的表示方法">常量的表示方法
&lt;/h3>&lt;p>与C语言类似，常量主要有：整数型、实数型和字符串型三种&lt;/p>
&lt;h4 id="用十进制整数表示整型常量">用十进制整数表示整型常量
&lt;/h4>&lt;p>(1) 正数：直接写 10 表示位宽为32bit的十进制整数(系统默认)
(2) 负数：-10需要用二进制补码表示，多了一位符号位(1 1010)
(3) 用科学计数法表示：12.345e3   表示 12345&lt;/p>
&lt;h4 id="用基数法表示整数型常量">用基数法表示整数型常量
&lt;/h4>&lt;p>[换算成二进制数后的位宽]&amp;rsquo;&lt;em>[数制符号][与数制对应的值]&lt;/em>&lt;/p>
&lt;ul>
&lt;li>二进制(b):     8&amp;rsquo;b1000_1100      &lt;/li>
&lt;li>十六进制(h):  8&amp;rsquo;h8c&lt;/li>
&lt;li>八进制(o):     8&amp;rsquo;o214&lt;/li>
&lt;li>十进制(d):     8&amp;rsquo;d140&lt;/li>
&lt;/ul>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>当表示二进制时，最好每4位写一个下划线以增强可读性：如8&amp;rsquo;b1000_1100   与8&amp;rsquo;b10001100 是一样的&lt;/li>
&lt;li>基数表示法中遇到x时：十六进制表示4个x，八进制中表示3个x  &lt;/li>
&lt;li>&lt;strong>当位宽大于二进制位数时左边自动补0，小于二进制数时2从左边截断！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="字符串用双引号">字符串(用双引号)
&lt;/h4>&lt;ul>
&lt;li>每个字符由1个8位的ASCII码值表示，即需要1byte存储空间&lt;/li>
&lt;li>如：“Hello world”字符串由11个ASCII符号构成，需要11byte存储空间&lt;/li>
&lt;/ul>
&lt;h3 id="注释方式">注释方式
&lt;/h3>&lt;p>Verilog中注释主要有行注释(//)和块注释(/*  &amp;hellip;.     */)两种，表示方法与C语言一致！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 行注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 块注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量wirereg">变量(wire、reg)
&lt;/h3>&lt;p>Verilog中的变量主要有两种：wire和reg&lt;/p>
&lt;h4 id="wire">wire
&lt;/h4>&lt;p>(1) 线网型(wire): 表示电路间的物理连接，wire定义的变量也可看成信号端口
(2) 当两个wire信号被连续赋值时，在逻辑块中会被映射成真实的物理连线，此时这两个信号端口的变化是同步的！&lt;/p>
&lt;h4 id="reg">reg
&lt;/h4>&lt;p>(1) 寄存器型(reg): 表示一个抽象的数据存储单元
(2) reg 具有对某一时间点状态进行保持的功能&lt;/p>
&lt;h4 id="用法与注意事项">用法与注意事项
&lt;/h4>&lt;p>(1) 在always、initial语句中被赋值的变量(赋值号左边的变量)都是reg型变量
(2) 在assign语句中被赋值的变量，为wire型变量&lt;/p>
&lt;h3 id="向量vector与-参数常量">向量(vector)与 参数(常量)
&lt;/h3>&lt;h4 id="parameter-参数常量">parameter 参数(常量)
&lt;/h4>&lt;p>(1) 参数是一种常量，通常出现在module内部，常被用于定义状态、数据位宽等&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">parameter&lt;/span> &lt;span class="n">STATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) &lt;strong>只作用于声明的那个文件&lt;/strong>，且可以被灵活改变！
(3) 局部参数localparam，只在本模块中使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">localparam&lt;/span> &lt;span class="n">WIDTH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(4) 参数的名称一般为大写，以区分其他变量 &lt;/p>
&lt;h4 id="向量vector">向量(vector)
&lt;/h4>&lt;p>vector(向量)，是一组信号的集合,可视为位宽超过1bit 的 wire 信号。&lt;/p>
&lt;p>(1) 定义方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输入输出型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">output&lt;/span> &lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 模块中间向量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) 向量的位宽定义：&lt;/p>
&lt;ul>
&lt;li>[upper:lower] 定义位宽，如 [7:0] 表示位宽为8 bit ，即upper=7，lower=0&lt;/li>
&lt;li>vector_name可以一次写多个向量&lt;/li>
&lt;/ul>
&lt;h4 id="向量片选">向量片选
&lt;/h4>&lt;ul>
&lt;li>a[3:0]    取向量a的0~4位数据&lt;/li>
&lt;li>b[n]      取向量b的第n位数据&lt;/li>
&lt;li>c[-1:-2]  取向量c的最低2位数据&lt;/li>
&lt;li>c[0:3]    取向量c的最高4位数据&lt;/li>
&lt;/ul>
&lt;p>多路选择器应用：实现一个 256 选 1 选择器，sel 信号作为选择信号，当 sel = 0 时选择 in[3:0]，sel = 1 时选择 in[7:4],以此类推。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">255&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// assign out = {in[sel*4 +: 4]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// assign out = {in[sel*4+3 -: 4]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>片选信号sel输入为n位二进制数，当参与运算、充当索引时会自动转换成十进制数&lt;/li>
&lt;li>该题所选取的信号片段为: in[sel*4+3: sel*4] ,但这不符合Verilog的片选语法规则故应写成：&lt;/li>
&lt;/ul>
&lt;p>in[sel*4 +: 4]   表示索引从sel*4开始的高4bit信号&lt;/p>
&lt;p>in[sel*4+3 -: 4] 表示索引从sel*4+3开始的低4bit信号&lt;/p>
&lt;ul>
&lt;li>或是直接选出需要的每一位，再用{ }拼接成新向量：&lt;/li>
&lt;/ul>
&lt;p>{in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]}&lt;/p>
&lt;h3 id="三元表达式">三元表达式
&lt;/h3>&lt;p>(1) 与C语言相同，Verilog也有三元表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">condition&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">if_true&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">if_false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当条件为真，表达式值为if_true ，否则表达式值为if_false。&lt;/p>
&lt;p>(2) 应用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 一个二选一MUX，通过sel的值选择a或b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 一个T触发器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">toggle&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ena&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">&amp;#39;&lt;/span>&lt;span class="n">bz&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 三态缓冲器
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="分支语句if-elsecase">分支语句(if-else、case)
&lt;/h3>&lt;h4 id="if-else语句">if-else语句
&lt;/h4>&lt;p>(1) 最常用的形式：(优势：&lt;strong>输出的所有可能都写到，不存在未知电平输出！&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) 不建议使用if-else嵌套，会存在优先级问题，导致逻辑混乱，
(3) 所有if-else语句都应写成(1)的形式！
(4) 根据条件表达式依次比较，*&lt;em>存在优先级！&lt;/em> *&lt;/p>
&lt;h4 id="case-语句">case 语句
&lt;/h4>&lt;p>(1) 书写形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">控制表达式&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">分支语句&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">分支语句&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endcase&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较&amp;lt;控制表达式&amp;gt;与&amp;lt;分支语句n&amp;gt;的取值相等则执行对应语句，否则执行default后语句！&lt;/p>
&lt;p>(2) &lt;em>执行完某一分支语句后立即跳出case语句结构，终止case语句执行。&lt;/em>
(3) &lt;strong>&amp;lt;分支语句n&amp;gt;的取值必须互不相同！&lt;/strong>
(4) 以encase结束case语句块
(5) 各分支语句间&lt;strong>不存在优先级！&lt;/strong>
(6) 具体应用: 用case语句搭建多路选择器，（以9选1多路选择器为例）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0010&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0011&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0100&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0101&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0110&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0111&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">16&amp;#39;hffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endcase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="for循环语句">for循环语句
&lt;/h2>&lt;p>(1) 书写形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">integer&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">for_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>执行&amp;lt;循环语句&amp;gt;n次&lt;/li>
&lt;li>for_name为每一次循环的名称&lt;/li>
&lt;/ul>
&lt;h3 id="关系运算符">关系运算符(&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=)
&lt;/h3>&lt;ul>
&lt;li>运算结果为真返回 1&lt;/li>
&lt;li>运算结果为假返回 0&lt;/li>
&lt;li>若某个操作数值不定(x)，则返回值为 x&lt;/li>
&lt;/ul>
&lt;h3 id="拼接运算符--">拼接运算符({ , })
&lt;/h3>&lt;h4 id="拼接">拼接
&lt;/h4>&lt;p>用一对花括号加逗号组成“{ , }”拼接运算符，逗号隔开的数据&lt;strong>按顺序拼接成新数据！&lt;/strong>&lt;/p>
&lt;h4 id="通过拼接实现移位">通过拼接实现移位
&lt;/h4>&lt;p>在左边拼接实现右移，右边拼接实现左移！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">// a[3:0]左移4位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}&lt;/span> &lt;span class="c1">// a[3:0]右移4位
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="连接符中重复多次的操作">连接符中重复多次的操作
&lt;/h4>&lt;p>语法： {重复次数{vector}}&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}}&lt;/span> &lt;span class="c1">// 重复4次a[3:0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}}&lt;/span> &lt;span class="c1">// 3&amp;#39;d5与a[3:0]重复4次拼接
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="移位运算符">移位运算符
&lt;/h3>&lt;p>移位运算符用于将左边操作数左移或右移指定的位数！移位后空闲位用0填充。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>左移运算符：&amp;laquo;
如：4‘b1101 &amp;laquo; 3 结果为：4‘b1000&lt;/p>
&lt;/li>
&lt;li>
&lt;p>右移算法符: &amp;raquo;
如：4‘b1101 &amp;raquo; 3 结果为：4‘b0001&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移位运算符其他用途：左移一位可以看成是乘以 2，右移一位可以看成是除以 2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移位运算符代替乘除法可以节省资源！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="完整模块示例">完整模块示例
&lt;/h2>&lt;h3 id="二进制全加器">二进制全加器
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder.png"
width="307"
height="212"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder_hu89533cf0424ba3323edd0db86c96d53c_11547_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder_hu89533cf0424ba3323edd0db86c96d53c_11547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;ul>
&lt;li>a、b为输入 1bit 数据&lt;/li>
&lt;li>cin为上一个加法器进位输入&lt;/li>
&lt;li>cout为本加法器的进位输出&lt;/li>
&lt;li>sum = a+b&lt;/li>
&lt;/ul>
$$
\begin{array}{c}
sum=a \wedge b \wedge cin \\
cout=(a \&amp; b) | (a \&amp; cin) | (b \&amp; cin)
\end{array}
$$
&lt;p>代码实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">full_adder&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">cout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="16进制全加器">16进制全加器
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit.png"
width="562"
height="727"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit_hu18c208ace072546113281d8f502ec621_55264_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit_hu18c208ace072546113281d8f502ec621_55264_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;p>16进制全加器如上图所示，它可由上节中16个二进制全加器组合而成。&lt;/p>
&lt;p>用Verilog实现16进制全加器代码为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder16&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">cout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">16&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">16&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">gen_full_adder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">full_adder&lt;/span> &lt;span class="n">instance1&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">16&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="模块中的参数传递">模块中的参数传递
&lt;/h2>&lt;h3 id="定义可传递参数的模块">定义可传递参数的模块
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">counter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">COUNT_MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">25&lt;/span>&lt;span class="mi">&amp;#39;d24&lt;/span>&lt;span class="n">_999_999&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">STATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sys_clk&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">reg&lt;/span> &lt;span class="n">led_out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="带参数模块的实例化">带参数模块的实例化
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">COUNT_MAX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">25&lt;/span>&lt;span class="mi">&amp;#39;d24&lt;/span>&lt;span class="n">_999_999&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 参数赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">STATE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="n">counter_instance&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">sys_clk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys_clk&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">led_out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">led_out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>vivado 2023.2安装</title><link>https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="下载安装包">下载安装包
&lt;/h1>&lt;ol>
&lt;li>
&lt;p>百度搜索vivado，找到&amp;quot;下载 - Xilinx&amp;quot;，进入vivado下载页面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择2023.2版本，&lt;a class="link" href="https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/2023-2.html" target="_blank" rel="noopener"
>下载链接&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载Windows环境下的在线安装器（Windows Self Extracting Web Installer）&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download.jpg"
width="1212"
height="1052"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download_huc070f3988e1974e8483ead4db9239c07_79606_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download_huc070f3988e1974e8483ead4db9239c07_79606_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="download"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;ul>
&lt;li>下载需要登陆AMD。如果已有AMD账户直接填写用户名和密码登陆，如果没有账户则点“Create account”免费创建一个新账户。&lt;/li>
&lt;li>点击链接后会要求输入个人信息，随便填即可。&lt;/li>
&lt;li>&lt;a class="link" href="https://pan.baidu.com/s/1xt8L6RWmHROTX-C5JzIj3A?pwd=3a6p" target="_blank" rel="noopener"
>&lt;em>如果在线安装器下载不下来&lt;/em>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h1 id="在线安装">在线安装
&lt;/h1>&lt;ol>
&lt;li>
&lt;p>双击运行已下载的可执行文件FPGAs_AdaptiveSoCs_Unified_2023.2_1013_2256_Win64.exe。（使用管理员权限，允许网络访问）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果弹出更新窗口，点击“continue”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue_hudc9ccf3a6061c88baeb0d8a4b427aec5_81974_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue_hudc9ccf3a6061c88baeb0d8a4b427aec5_81974_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="continue"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>登录下载时注册的AMD账号，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login_hu062b6f8317e133346cb0306f7d09837a_77070_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login_hu062b6f8317e133346cb0306f7d09837a_77070_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="login"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择“vivado”，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product_hud59b6367412afaf51bc4cfdb1ee35fb2_107739_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product_hud59b6367412afaf51bc4cfdb1ee35fb2_107739_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="product"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择免费的标准版，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition_hu0b939661dd1d6896e46b7423f3241c97_89519_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition_hu0b939661dd1d6896e46b7423f3241c97_89519_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="edition"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在“Device”中必勾选“Artix-7”，因为开发板搭载的FPGA是Artix-7，其他器件可以根据需要进行选择，“Design Tools”和“Installation Options”按照默认即可。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device_hua6caeee0c57d2606be5a552e175ea5e2_98399_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device_hua6caeee0c57d2606be5a552e175ea5e2_98399_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="device"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全部“I agree”，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree_hu60b5f28c2f4720c4f3471589533b45b8_121250_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree_hu60b5f28c2f4720c4f3471589533b45b8_121250_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="agree"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择Vivado安装目录，默认安装在“C:\Xilinx”下，可以点击浏览或者直接更改路径，注意&lt;strong>安装路径中不能出现中文和空格&lt;/strong>。点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory_huf9d5ccff252c347ff37ad093e9005ce8_97580_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory_huf9d5ccff252c347ff37ad093e9005ce8_97580_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="directory"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;em>我由于安装过了，显示和大家不一样。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看summary，点击“install”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待安装完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="问题">问题
&lt;/h1>&lt;ul>
&lt;li>不同版本间的编译逻辑可能有所不同，可能会导致不可预知的差异，我们建议使用比赛指定的23.2版本&lt;/li>
&lt;li>注意安装路径&lt;strong>不要有中文和空格&lt;/strong>！包括后续项目文件路径中都&lt;strong>不能出现中文和空格！！！&lt;/strong>&lt;/li>
&lt;li>&lt;em>如果你的用户名不幸的有中文的话，STFW改成英文的吧，不然会有更多奇奇怪怪的bug&lt;/em>&lt;/li>
&lt;li>如果在线安装器有网络问题的话，尝试关闭魔法多试几次，实在不行使用完整的安装包选择本地安装（官网103GB的版本）。&lt;/li>
&lt;/ul>
&lt;h1 id="与代码编辑器的联动">与代码编辑器的联动
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/weixin_44425619/article/details/115479272" target="_blank" rel="noopener"
>VIVADO使用vscode实现实时纠错与自动补全等功能_vivado代码自动对齐_fujiayu1997zz的博客-CSDN博客&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/341728027" target="_blank" rel="noopener"
>Sublime与Verilog【一】：从安装到使用，提高FPGA开发效率！ - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>