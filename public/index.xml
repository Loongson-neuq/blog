<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NEUQ 龙芯实验室博客</title><link>https://loongson-neuq.pages.dev/</link><description>Recent content on NEUQ 龙芯实验室博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 14 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://loongson-neuq.pages.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>龙芯实验攻略</title><link>https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/</guid><description>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://bookdown.org/loongson/_book3/" target="_blank" rel="noopener"
>实验手册&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local" target="_blank" rel="noopener"
>实验代码仓库&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="exp620条指令单周期cpu">exp6：20条指令单周期CPU
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &lt;a class="link" href="https://library.vincent-ice.me/posts/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/" target="_blank" rel="noopener"
>学习使用龙芯提供的基于trace比对的调试框架&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习龙芯提供的单周期CPU的&lt;strong>数据通路&lt;/strong>&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> &lt;a class="link" href="https://library.vincent-ice.me/posts/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/" target="_blank" rel="noopener"
>学习基本仿真调试思路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习使用trace比对的CPU系统调试&lt;/li>
&lt;/ul>
&lt;h3 id="数据通路">数据通路
&lt;/h3>&lt;p>数据通路是芯片上最重要的“路”之一，介于初学时对CPU的数据通路不够了解，自己动手拼搭模块会无从下手，我们建议学习现有的CPU的数据通路，这里我们采用龙芯实验代码仓库中提供的&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local/tree/master/mycpu_env/myCPU" target="_blank" rel="noopener"
>单周期CPU&lt;/a>（存在错误需要调试）。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath.png"
width="1024"
height="443"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath_hu96000dc7cc64683fddab428c239ee9b0_106858_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath_hu96000dc7cc64683fddab428c239ee9b0_106858_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="231"
data-flex-basis="554px"
>&lt;/p>
&lt;p>简单的数据通路结构图，请自己理解给出的单周期CPU的结构、不同部件之间如何协同工作、各个控制信号如何控制数据的流动。&lt;/p>
&lt;p>CPU的debug实际上就是在观察数据通路上各处流动的数据是不是我们想要的数据，然后修改控制信号的逻辑或者数据通路本身以获得预期结果。&lt;/p>
&lt;h3 id="调试tips">调试Tips
&lt;/h3>&lt;ol>
&lt;li>善用反汇编文件（&lt;code>func/obj/test.s&lt;/code>）查询某个PC对应的指令&lt;/li>
&lt;li>当CPU的第一条指令都没有成功运行，而你一点思路都没有的话，不妨试着在数据通路图上模拟运行一遍第一条指令&lt;/li>
&lt;li>运行过程中的Error一般出在之前成功运行的指令都没有用的部分&lt;/li>
&lt;/ol>
&lt;h2 id="exp7不考虑相关冲突处理的简单流水线cpu">exp7：不考虑相关冲突处理的简单流水线CPU
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习流水线的基本概念（课上讲义、百度、&lt;a class="link" href="https://foxsen.github.io/archbase/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF.html#sec-pipeline-cpu" target="_blank" rel="noopener"
>计算机体系结构基础&lt;/a>）&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 多周期CPU的概念&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 修改单周期CPU，使其流水线化&lt;/li>
&lt;/ul>
&lt;h3 id="流水线的作用">流水线的作用
&lt;/h3>&lt;p>随着CPU电路中组合逻辑部分越来越复杂，其延迟也必然增大，整个电路的频率就会变低。&lt;/p>
&lt;p>在单周期CPU中，每个时钟周期必须完成取指、译码、读寄存器、执行、访存等很多组合逻辑工作，为了保证在下一个时钟上升沿到来之前准备好寄存器堆的写数据，需要将每个时钟周期的间隔拉长，导致处理器的主频无法提高，使用流水线技术可以提高处理器的主频。&lt;/p>
&lt;blockquote>
&lt;p>在这里我将跳过流水线的基本概念，直接分析经典的五级静态单发射流水线CPU。&lt;/p>
&lt;/blockquote>
&lt;h3 id="修改步骤">修改步骤
&lt;/h3>&lt;h4 id="划分流水级">划分流水级
&lt;/h4>&lt;p>按照经典五级流水线，我们将单周期CPU的处理流程划分为五个阶段：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IF（取指）&lt;/strong>：从指令存储器读取指令。&lt;/li>
&lt;li>&lt;strong>ID（译码）&lt;/strong>：解析指令，读取寄存器堆数据。&lt;/li>
&lt;li>&lt;strong>EX（执行）&lt;/strong>：执行算术/逻辑运算或计算地址。&lt;/li>
&lt;li>&lt;strong>MEM（访存）&lt;/strong>：访问数据存储器（如加载/存储指令）。&lt;/li>
&lt;li>&lt;strong>WB（写回）&lt;/strong>：将结果写回寄存器堆。&lt;/li>
&lt;/ul>
&lt;h4 id="插入流水线寄存器">插入流水线寄存器
&lt;/h4>&lt;p>在流水线中，每一级都可能处理着不同的指令，这时我们就需要一些存储当前级指令信息的级间寄存器，这些级间寄存器储存着指令相关的数据和控制信息以供当前级处理使用。&lt;/p>
&lt;p>&lt;a name="数据通路流水线">&lt;/a> 以下是流水线化后的CPU数据通路示意图：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF.png"
width="1299"
height="507"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF_huc900496a16e8ff47f7506fc23b58fe3c_307729_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E7%AE%80%E5%8D%95%E6%B5%81%E6%B0%B4%E7%BA%BF_huc900496a16e8ff47f7506fc23b58fe3c_307729_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="datapath-简单流水线"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h3 id="调试tips-1">调试Tips
&lt;/h3>&lt;ol>
&lt;li>调整CPU顶层接口，增加指令RAM的片选信号 &lt;code>inst_sram_en&lt;/code> 和数据RAM的片选信号 &lt;code>data_sram_en&lt;/code>&lt;/li>
&lt;li>调整CPU顶层接口，将&lt;code>inst_sram_we&lt;/code> 和 &lt;code>data_sram_we&lt;/code> 都从1比特的写使能调整为4比特的字节写使能&lt;/li>
&lt;li>在流水线CPU中，调试定错可以基于级间寄存器的内容判断&lt;/li>
&lt;li>各级流水线中命名需要有命名逻辑，很容易找不到&lt;/li>
&lt;/ol>
&lt;h2 id="exp8阻塞技术解决相关引发的冲突">exp8：阻塞技术解决相关引发的冲突
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 流水线CPU的运行过程&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 流水线冲突以及如何处理流水线冲突（阻塞方法）&lt;/li>
&lt;/ul>
&lt;h3 id="流水线冲突">流水线冲突
&lt;/h3>&lt;p>&lt;strong>流水线冲突（Hazard）&lt;/strong> 是指由于指令在流水线中并行执行时产生的依赖关系或资源竞争，导致后续指令无法正常执行的现象。主要分为三类：数据相关、控制相关和结构相关。&lt;/p>
&lt;h4 id="数据冲突">数据冲突
&lt;/h4>&lt;p>数据相关根据冲突访问读和写的次序可以分为3种。&lt;/p>
&lt;ol>
&lt;li>写后读（Read After Write,简称RAW）相关，即后面指令要用到前面指令所写的数据，也称为真相关。&lt;/li>
&lt;li>写后写（Write After Write,简称WAW）相关，即两条指令写同一个单元，也称为输出相关。&lt;/li>
&lt;li>读后写（Write After Read,简称WAR）相关，即后面的指令覆盖前面指令所读的单元，也称为反相关。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>在静态五级流水线CPU中，仅会出现RAW相关流水线冲突，WAW和WAR在乱序流水线中需要考虑。&lt;/p>
&lt;/blockquote>
&lt;p>对于以下两条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第2条指令的源寄存器&lt;code>r2&lt;/code>为第1条指令的目的寄存器，即存在RAW相关。其时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B.webp"
width="931"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;p>我们注意到在第3个时钟周期时，第2条指令读取&lt;code>r2&lt;/code>寄存器的值，但此时第1条指令未执行写回，也就是说读取到&lt;code>r2&lt;/code>寄存器的值并非是最新的、正确的值，第2条指令的运行数据必然是错误的。&lt;/p>
&lt;p>为了保证执行的正确，一种最直接的解决方式是让第2条指令在译码阶段&lt;strong>等待（阻塞）3拍&lt;/strong>，直到第1条指令将结果写入寄存器后才能读取寄存器，进入后续的执行阶段。这时时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E.webp"
width="1021"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E_hu1eff70aeac03fe3a7cbcf17fea7edf87_9158_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E9%98%BB%E5%A1%9E_hu1eff70aeac03fe3a7cbcf17fea7edf87_9158_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="423"
data-flex-basis="1016px"
>&lt;/p>
&lt;h4 id="控制冲突">控制冲突
&lt;/h4>&lt;p>控制冲突主要是由于分支/跳转指令导致后续指令的取指目标不确定。&lt;/p>
&lt;p>对于以下的指令序列：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jirl&lt;/span> &lt;span class="no">$r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">add.w&lt;/span> &lt;span class="no">$r7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">$r9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6.webp"
width="838"
height="287"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6_hub11051a98a84252ca870657974d84de1_12098_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6_hub11051a98a84252ca870657974d84de1_12098_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="700px"
>&lt;/p>
&lt;p>我们注意到在第3周期&lt;code>jirl&lt;/code>指令被执行的时候，两条&lt;code>add.w&lt;/code>指令已经进入流水线，而这两条指令是不需要被执行的，这就引发了控制冲突。&lt;/p>
&lt;p>为了解决这个问题，可以通过在取指阶段引入2拍的流水线阻塞来解决，此时时空图如下：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E.webp"
width="1011"
height="287"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E_hu6d514a7baa4cf5e89fface0e5993f529_11678_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E6%97%B6%E7%A9%BA%E5%9B%BE-%E6%8E%A7%E5%88%B6%E9%98%BB%E5%A1%9E_hu6d514a7baa4cf5e89fface0e5993f529_11678_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="352"
data-flex-basis="845px"
>&lt;/p>
&lt;p>在单发射5级静态流水线中，如果增加专用的运算资源&lt;strong>将转移指令条件判断和计算下一条指令PC的处理调整到译码阶段&lt;/strong>，那么转移指令后面的指令只需要在取指阶段等1拍。&lt;/p>
&lt;blockquote>
&lt;p>在前文中的&lt;a href="#数据通路流水线">数据通路图&lt;/a>中，我其实已经将跳转处理调整到译码阶段了。&lt;/p>
&lt;/blockquote>
&lt;p>为更进一步减少由控制相关引起的阻塞，可以采用转移指令的&lt;strong>延迟槽&lt;/strong>技术，在定义指令系统的时候就明确转移指令延迟槽指令的执行不依赖于转移指令的结果（如MIPS），这样转移指令后面的指令在取指阶段1拍也不用等。&lt;/p>
&lt;p>另外一种思路是&lt;strong>分支预测&lt;/strong>，通过合理的方式对跳转目标PC的预测以消除等待计算的时间，具体可参考《超标量处理器设计》一书中分支预测&lt;a class="link" href="https://www.cnblogs.com/lyc-seu/p/16995926.html" target="_blank" rel="noopener"
>相关部分&lt;/a>。&lt;/p>
&lt;h4 id="结构冲突">结构冲突
&lt;/h4>&lt;p>结构相关引起冲突的原因是两条指令要同时访问流水线中的同一个功能部件。&lt;/p>
&lt;p>回顾前文中使用阻塞处理冲突时，被阻塞的指令之后的指令也由于执行部件被占用而无法在流水线中执行，一起被堵在后面。&lt;/p>
&lt;p>再回顾前文中数据通路，我们发现有指令、数据两个存储器（哈佛架构），这其实也是为了解决取指和访存同时读取存储器的结构冲突。&lt;/p>
&lt;h3 id="流水线冲突的解决">流水线冲突的解决
&lt;/h3>&lt;p>流水线冲突的解决方式主要分为两种：&lt;strong>阻塞&lt;/strong>和&lt;strong>旁路&lt;/strong>。&lt;/p>
&lt;h4 id="阻塞">阻塞
&lt;/h4>&lt;p>在前文讲解流水线冲突的过程中，我们均采用的是阻塞方法，即一个字：等！等到该准备的都准备好了再执行。其优点是控制逻辑简单，无需添加很多电路单元；当然其缺点也很明显，CPU大部分时间都在摸鱼了，造成了很大的性能浪费。&lt;/p>
&lt;h4 id="旁路">旁路
&lt;/h4>&lt;p>旁路技术主要原理是添加一些专用计算模块，以降低甚至消除阻塞时间，体现了芯片设计中的&lt;strong>以空间换时间&lt;/strong>的思路。&lt;/p>
&lt;p>例如前文中将分支跳转的执行从执行级调整到译码级，并增加专用的分支跳转模块。&lt;/p>
&lt;h3 id="修改方式">修改方式
&lt;/h3>&lt;p>将流水线中添加阻塞控制的思路在这里提供两种：&lt;/p>
&lt;h4 id="控制单元">控制单元
&lt;/h4>&lt;p>添加一个流水线运行控制单元，其负责处理各级流水线发出的阻塞请求，并给各流水级发出阻塞信号，阻塞信号作为级间寄存器的使能信号即可。&lt;/p>
&lt;h4 id="握手机制">握手机制
&lt;/h4>&lt;p>握手机制需要在各级流水线中添加握手信号，当两方握上手后使能级间寄存器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">for_valid&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">next_allowin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buffer&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">for_input&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>for_valid&lt;/code>为前级有效信号&lt;/li>
&lt;li>&lt;code>next_allowin&lt;/code>为后级允许进入信号&lt;/li>
&lt;li>&lt;code>buffer&lt;/code>为级间寄存器&lt;/li>
&lt;li>&lt;code>for_input&lt;/code>为前级输入数据&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意如果使用后级允许进入信号生成本级允许信号的话，可能会使关键路径贯穿整个流水线，在流水线深度较深的情况下需要注意。&lt;/p>
&lt;/blockquote>
&lt;h3 id="调试tips-2">调试Tips
&lt;/h3>&lt;ol>
&lt;li>在已有部件正确的情况下，只需要判断新加入的部件是否正常运行&lt;/li>
&lt;li>优先关注控制信号是否正确&lt;/li>
&lt;li>如果需要可以先进行单独部件的仿真测试&lt;/li>
&lt;/ol>
&lt;h2 id="exp9前递技术解决相关引发的冲突">exp9：前递技术解决相关引发的冲突
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 流水线冲突的概念及阻塞处理实现&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 使用前递技术处理数据冲突&lt;/li>
&lt;/ul>
&lt;h3 id="前递技术">前递技术
&lt;/h3>&lt;p>让我们重新观察使用阻塞方式处理数据冲突的时空图：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B.webp"
width="931"
height="241"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_480x0_resize_q75_h2_box_2.webp 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/RAW%E5%8E%9F%E5%A7%8B_hu08ed403e89601f8454fd04da881a32ba_7312_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="386"
data-flex-basis="927px"
>&lt;/p>
&lt;p>对于&lt;code>add.w&lt;/code>指令，在流水线的执行级已经将结果计算出，如果我们可以提前将结果发送给译码级处，就不用阻塞流水线等待了，这就是流水线前递（Forwarding）技术。同样，我们也要添加访存级、写回级的数据前递回译码级的数据通路。&lt;/p>
&lt;h3 id="数据通路-1">数据通路
&lt;/h3>&lt;p>以下是添加了前递通路的数据通路参考：&lt;/p>
&lt;p>&lt;a name="前推流水线">&lt;/a>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92.png"
width="1491"
height="507"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92_hu96bc9da7293e7fdcd6e09addfa9c78bb_327642_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/datapath-%E5%89%8D%E9%80%92_hu96bc9da7293e7fdcd6e09addfa9c78bb_327642_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="705px"
>&lt;/p>
&lt;h3 id="调试tips-3">调试Tips
&lt;/h3>&lt;ol>
&lt;li>同样的我们几乎只需要关注前推处理的逻辑&lt;/li>
&lt;li>注意&lt;code>ld.w&lt;/code>等访存指令需要在访存级结束才能有正确数据&lt;/li>
&lt;/ol>
&lt;h2 id="exp10算术逻辑运算指令和乘除法运算指令添加">exp10：算术逻辑运算指令和乘除法运算指令添加
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 熟悉CPU的&lt;a href="#前推流水线">数据通路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习如何控制数据流动&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习如何添加指令&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 学习如何使用IP核（基本方法参考&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-generate-ram-ip" target="_blank" rel="noopener"
>RAM IP核定制&lt;/a>，具体IP核请自行搜索）&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 拓展：学习&lt;a class="link" href="#%e4%b9%98%e6%b3%95%e5%99%a8" >乘法器&lt;/a>、&lt;a class="link" href="#%e9%99%a4%e6%b3%95%e5%99%a8" >除法器&lt;/a>原理&lt;/li>
&lt;/ul>
&lt;h3 id="算术逻辑运算类指令">算术逻辑运算类指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>slti&lt;/code>、&lt;code>sltui&lt;/code>、&lt;code>andi&lt;/code>、&lt;code>ori&lt;/code>、&lt;code>xori&lt;/code>、&lt;code>sll.w&lt;/code>、&lt;code>srl.w&lt;/code>、&lt;code>sra.w&lt;/code>、&lt;code>pcaddu12i&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>&lt;strong>首先，我们来观察需要添加的指令有什么特点、和我们已有的指令有什么联系吗？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>slti&lt;/code>、&lt;code>sltui&lt;/code>等与已添加的指令&lt;code>slt&lt;/code>、&lt;code>sltu&lt;/code>等仅在源操作数2从寄存器还是立即数中取值有区别，所以我们可以几乎&lt;strong>复用&lt;/strong>&lt;code>slt&lt;/code>、&lt;code>sltu等&lt;/code>指令的数据通路，仅需在源操作数2的仲裁信号&lt;code>src2_is_imm&lt;/code>处修改即可&lt;/li>
&lt;li>&lt;code>sll.w&lt;/code>、&lt;code>srl.w&lt;/code>等与已添加的指令&lt;code>slli.w&lt;/code>、&lt;code>srli.w&lt;/code>等仅在源操作数2从寄存器还是立即数中取值有区别，所以我们也可以&lt;strong>复用&lt;/strong>&lt;/li>
&lt;li>&lt;code>pcaddu12i&lt;/code>指令实际上等同&lt;code>addi.w&lt;/code>的运算过程，只不过源操作数1为该指令的PC值，源操作数2的立即数处理为在最低位后接12bit零，所以我们只需增加一些仲裁和处理逻辑即可&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>你可能会在添加&lt;code>pcaddu12i&lt;/code>的时候注意到，源操作数1的仲裁信号（&lt;code>src1_is_pc&lt;/code>）和源操作数2的立即数处理和仲裁信号（&lt;code>need_si20&lt;/code>、&lt;code>src2_is_imm&lt;/code>）已经存在了，不需要额外添加。如果你傻乎乎的又新加了两块逻辑，那么你应该重新复习一下完整的数据通路了。&lt;/p>
&lt;p>当我们需要新添加一些东西的时候，首先需要考虑一下能否&lt;strong>复用&lt;/strong>已有的，或者进行一些小小的修改，而非直接开堆。冗杂的堆砌不仅是对资源的浪费，对代码可读性也是一种灾难。&lt;/p>
&lt;/blockquote>
&lt;p>经过这一通分析，我想完成这9条指令对你来说是易如反掌了吧(　‘◟ ‘)✧&lt;/p>
&lt;p>你可以现在开始仿真debug，当pass了29个点的时候这些指令就没问题了，也可以接着添加最后一起仿真debug。&lt;/p>
&lt;h3 id="乘除运算类指令">乘除运算类指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>mul.w&lt;/code>、&lt;code>mulh.w&lt;/code>、&lt;code>mulh.wu&lt;/code>、&lt;code>div.w&lt;/code>、&lt;code>mod.w&lt;/code>、&lt;code>div.wu&lt;/code>、&lt;code>mod.wu&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>&lt;strong>首先，我们还是分析一下这些指令&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>没有乘除法运算单元，肯定要添加乘除法器 &lt;del>（或者你也可以试试用加减法来算）&lt;/del>&lt;/li>
&lt;li>数据流动与&lt;code>add.w&lt;/code>等 3R-type 指令相同，仅运算方式不一样（指令编码格式相同的指令的数据流动几乎相同）&lt;/li>
&lt;li>指令间的区别为有/无符号运算、如何选取结果输出&lt;/li>
&lt;/ul>
&lt;p>这样来说，我们只需要新加一个乘除法运算单元，其它部分依照&lt;code>add.w&lt;/code>复用即可。&lt;/p>
&lt;h4 id="使用vivado-ip核实现">使用Vivado IP核实现
&lt;/h4>&lt;h5 id="乘法">乘法
&lt;/h5>&lt;p>最简单的方式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">src1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">src2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">63&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">unsigned_prod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">63&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">signed_prod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">unsigned_prod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">src2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">signed_prod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">$signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">$signed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vivado中的综合工具遇到上面代码中的“＊’’运算符时，会自动调用片上的DSP48（内含固化的16位乘法器电路）实现，最终实现的电路的时序通常不错，也几乎不消耗LUT资源，推荐大家使用。&lt;/p>
&lt;p>也可以使用IP核&lt;code>Multiplier&lt;/code>实现。&lt;/p>
&lt;h5 id="除法">除法
&lt;/h5>&lt;p>使用&lt;code>Divider Generator&lt;/code>IP核实现。&lt;/p>
&lt;h6 id="如何创建">&lt;strong>如何创建&lt;/strong>
&lt;/h6>&lt;p>首先找到&lt;code>Divider Generator&lt;/code>IP核：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0.jpg"
width="1920"
height="1020"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0_hu652695300c9e1a86c86323424f9acf64_199576_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP0_hu652695300c9e1a86c86323424f9acf64_199576_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>开始定制&lt;code>Divider Generator&lt;/code>IP核：&lt;/p>
&lt;div align="center">
&lt;img src="assets/除法器IP1.jpg" alt="除法器IP1" width="48%">
&lt;img src="assets/除法器IP2.jpg" alt="除法器IP2" width="48%">
&lt;/div>
&lt;p>开始建立IP核：&lt;/p>
&lt;img src="assets/除法器IP3.jpg" style="zoom:50%;" />
&lt;p>实例化IP核：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4.jpg"
width="1613"
height="521"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4_hu0329b89948ac1ebd41199e1705e536a1_117228_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E9%99%A4%E6%B3%95%E5%99%A8IP4_hu0329b89948ac1ebd41199e1705e536a1_117228_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="743px"
>&lt;/p>
&lt;h6 id="如何使用">&lt;strong>如何使用&lt;/strong>
&lt;/h6>&lt;p>目前Vivado中提供的除法器IP一定是AXI接口的，所以接下来我们对模块顶层信号及其工作方式进行基本介绍。&lt;/p>
&lt;p>在定制IP核的界面中（可通过双击IP核的资源名称重新打开定制界面），左侧有接口信号图&lt;/p>
&lt;img src="assets/除法器IP5.jpg" style="zoom: 50%;" />
&lt;p>总体上我们会看到时钟信号、被除数、除数通道以及输出（商和余数）通道。&lt;/p>
&lt;p>对于被除数、除数通道，其有相同的信号组成&lt;/p>
&lt;ul>
&lt;li>&lt;code>tdata&lt;/code>信号为被除数、除数数据输入信号&lt;/li>
&lt;li>&lt;code>tready&lt;/code>、&lt;code>tvalid&lt;/code>为一对握手信号。&lt;code>tvalid&lt;/code>是请求信号，&lt;code>tready&lt;/code>是应答信号，在时钟上升沿到来时，如果&lt;code>tvalid&lt;/code>和&lt;code>tready&lt;/code>都等于1则视为成功的握手，发送方的数据写入接收方的缓存中&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>需要注意的是在握手成功后，&lt;strong>一定要把&lt;code>tvalid&lt;/code>清0，如果再次握手成功的话将会被视为一个新的除法运算。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>对于输出（商和余数）通道&lt;/p>
&lt;ul>
&lt;li>&lt;code>tdata&lt;/code>信号为商和余数数据输出信号，其中 [63:32] 位存放的是商，第 [31:0] 位存放的是余数&lt;/li>
&lt;li>&lt;code>tvalid&lt;/code>信号为输出有效信号，高电平表示除法计算完成，&lt;code>tdata&lt;/code>线上为计算结果&lt;/li>
&lt;/ul>
&lt;h4 id="自行设计电路实现">自行设计电路实现
&lt;/h4>&lt;p>可参考附录中的&lt;a class="link" href="#%e4%b9%98%e6%b3%95%e5%99%a8" >乘法器&lt;/a>、&lt;a class="link" href="#%e9%99%a4%e6%b3%95%e5%99%a8" >除法器&lt;/a>部分以及其它网络资源。&lt;/p>
&lt;blockquote>
&lt;p>注意到IP核中无论是乘法还是除法都只能固定计算有/无符号数，这样需要实例化两个运算单元分别进行运算，这样看起来非常浪费资源。我们可以采取一些措施将符号单独计算，全部转化为无符号数处理；也可以将32位的运算全部转化为33位有符号运算，只要根据有/无符号在第33位补充符号位/0即可。&lt;/p>
&lt;/blockquote>
&lt;h2 id="exp11转移指令和访存指令添加">exp11：转移指令和访存指令添加
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 熟悉CPU的&lt;a href="#前推流水线">数据通路&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 练习如何修改数据流动&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 练习如何添加指令&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 了解“地址对齐”&lt;/li>
&lt;/ul>
&lt;h3 id="转移指令">转移指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>blt&lt;/code>、&lt;code>bge&lt;/code>、&lt;code>bltu&lt;/code>、&lt;code>bgeu&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>相信经过exp10的分析，大家很快就能发现这些b指令都是换汤不换药（仅跳转条件判断不同）的一类指令，只要照着如&lt;code>beq&lt;/code>指令的过程添加即可。&lt;/p>
&lt;h3 id="访存指令">访存指令
&lt;/h3>&lt;p>需要添加的指令有&lt;code>ld.b&lt;/code>、&lt;code>ld.h&lt;/code>、&lt;code>ld.bu&lt;/code>、&lt;code>ld.hu&lt;/code>、&lt;code>st.b&lt;/code>、&lt;code>st.h&lt;/code>，指令具体信息可参考我的&lt;a class="link" href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/" target="_blank" rel="noopener"
>LoongArch32r指令表&lt;/a>。&lt;/p>
&lt;p>在看完手册后，我们发现普通访存指令的&lt;strong>数据通路、控制逻辑都是相同的&lt;/strong>，区别仅在&lt;strong>处理的数据位宽不同&lt;/strong>。&lt;/p>
&lt;p>接下来让我们回忆一下我们的&lt;code>data_sram&lt;/code>，它是一个宽度为32的Memory单元，每次读写的数据为32位。&lt;/p>
&lt;p>当读回32位数据后，我们选择访存地址对应的字/半字/字节并按照有/无符号扩展到32位就是读取的数据；当需要写入时，我们将需要写入的字/半字/字节按照&lt;strong>访存地址对应的位置&lt;/strong>填入32位数据的位置，并将&lt;strong>字节写使能信号&lt;/strong>的对应位使能即可。&lt;/p>
&lt;h4 id="地址对齐">地址对齐
&lt;/h4>&lt;p>访存地址对应的位置即地址对齐，其有一定的规则，假设存储器中存储的数据如下图所示，每个字节中存储其所在字节地址&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8.jpg"
width="241"
height="220"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8_hu100c9d77195cabdb98c56d8b8f420497_8466_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E5%AD%98%E5%82%A8%E5%99%A8_hu100c9d77195cabdb98c56d8b8f420497_8466_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="262px"
>&lt;/p>
&lt;p>假如运行&lt;code>ld.w&lt;/code>，访存地址为&lt;code>00B&lt;/code>，则得到的数据为&lt;code>03020100H&lt;/code>。（Loongarch采用小尾端的存储方式）&lt;/p>
&lt;p>假如运行&lt;code>ld.h&lt;/code>，存储器返回数据为&lt;code>03020100H&lt;/code>&lt;/p>
&lt;ul>
&lt;li>访存地址末尾为&lt;code>00B&lt;/code>，最终得到&lt;code>00000100H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>10B&lt;/code>，最终得到&lt;code>00000302H&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>假如运行&lt;code>ld.b&lt;/code>，存储器返回数据为&lt;code>03020100H&lt;/code>&lt;/p>
&lt;ul>
&lt;li>访存地址末尾为&lt;code>00B&lt;/code>，最终得到&lt;code>00000000H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>01B&lt;/code>，最终得到&lt;code>00000001H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>10B&lt;/code>，最终得到&lt;code>00000002H&lt;/code>。&lt;/li>
&lt;li>访存地址末尾为&lt;code>11B&lt;/code>，最终得到&lt;code>00000003H&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>你应该会想问，剩下的情况呢？剩下的情况是不被允许的！&lt;strong>剩下的情况被称为访存地址&lt;/strong>非自然对齐&lt;/strong>。&lt;/p>
&lt;p>假如从地址&lt;code>01H&lt;/code>处读取一个字（32bit），由于存储器的特性，我们需要先读取&lt;code>00H&lt;/code>处的一个字，再读取&lt;code>04H&lt;/code>处的一个字，再将它们的&lt;code>01H&lt;/code>~&lt;code>04H&lt;/code>处的数据拼接起来作为最终数据。实际上，读取一个字的数据对于CPU来说是非常费时间的（可能是上千个周期），更不用说读两个字了，所以我们在定义的时候就不允许这种跨字的数据读写（编译器分配地址空间时也会按照自然对齐地址分配）。&lt;/p>
&lt;h4 id="字节写使能">字节写使能
&lt;/h4>&lt;blockquote>
&lt;p>如果你不知道字节写使能是哪根线的话请重新看exp7的实践任务第2条&lt;/p>
&lt;/blockquote>
&lt;p>字节写使能即以字节为单位控制存储器写入的数据。&lt;/p>
&lt;p>例如字节写使能为&lt;code>0011B&lt;/code>，则地址为&lt;code>00B&lt;/code>、&lt;code>01B&lt;/code>处会写入新的数据，地址为&lt;code>10B&lt;/code>、&lt;code>11B&lt;/code>处数据&lt;strong>不会被修改&lt;/strong>。&lt;/p>
&lt;p>接下来让我们针对&lt;code>00H&lt;/code>处的一个字的存储单元运行一段指令序列吧~&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令序号&lt;/th>
&lt;th>指令&lt;/th>
&lt;th>访存地址（B）&lt;/th>
&lt;th>数据（H）&lt;/th>
&lt;th>存储器数据（H）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>st.w&lt;/td>
&lt;td>00&lt;/td>
&lt;td>1234ABCD&lt;/td>
&lt;td>&lt;strong>1234ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ld.b&lt;/td>
&lt;td>01&lt;/td>
&lt;td>&lt;strong>FFFFFFAB&lt;/strong>&lt;/td>
&lt;td>1234ABCD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>st.h&lt;/td>
&lt;td>10&lt;/td>
&lt;td>00009876&lt;/td>
&lt;td>&lt;strong>9876ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>ld.hu&lt;/td>
&lt;td>00&lt;/td>
&lt;td>&lt;strong>0000ABCD&lt;/strong>&lt;/td>
&lt;td>9876ABCD&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>st.b&lt;/td>
&lt;td>11&lt;/td>
&lt;td>12345678&lt;/td>
&lt;td>&lt;strong>7876ABCD&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>ld.w&lt;/td>
&lt;td>01&lt;/td>
&lt;td>&lt;em>ERROR&lt;/em>&lt;/td>
&lt;td>7876ABCD&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="调试tips-4">调试Tips
&lt;/h3>&lt;ol>
&lt;li>顶层信号中地址线&lt;code>addr&lt;/code>在接入存储器时将末两位截去，所以&lt;code>00B&lt;/code>~&lt;code>11B&lt;/code>的访存地址均会取出&lt;code>00H&lt;/code>开始的一个字，详见&lt;code>soc_lite_top.v&lt;/code>文件&lt;/li>
&lt;li>大部分分支跳转指令本身的执行错误不会引发trace比对的ERROR，其后一条指令才会引发&lt;/li>
&lt;li>当功能点越来越多，你可以尝试编译只有新指令的func程序来跳过前面已经pass的指令以提高仿真速度，但请最后跑一遍完整的func程序&lt;/li>
&lt;/ol>
&lt;h2 id="exp12添加系统调用异常支持">exp12：添加系统调用异常支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 理解CPU中断例外的概念&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 学习精确异常处理的过程&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 在CPU中添加系统调用异常的支持&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 完全掌握exp11及以前的内容&lt;/li>
&lt;/ul>
&lt;h3 id="特权指令">特权指令
&lt;/h3>&lt;p>在计算机系统层次结构中，应用层在操作系统层之上，只能看到和使用指令系统的一个子集，即指令系统的用户态部分。每个应用程序都有自己的寄存器、内存空间以及可执行的指令。现代计算机的指令系统在用户态子集之外还定义了操作系统核心专用的特权态部分，我们称之为特权指令系统。&lt;/p>
&lt;p>特权指令系统的存在主要是为了让计算机变得更好用、更安全。操作系统通过特权指令系统管理计算机，使得应用程序形成独占CPU的假象，并使应用间相互隔离，互不干扰。应用程序只能在操作系统划定的范围内执行，一旦超出就会被CPU切换成操作系统代码运行。&lt;/p>
&lt;p>龙芯架构32位精简版中处理器核分为2个特权等级（PrivilegeLeVel，简称PLV），分别是PLV0和PLV3。处理器核当前处于哪个特权等级由CSR.CRMD中PLV域的值唯一确定。&lt;/p>
&lt;p>所有特权等级中，&lt;strong>PLV0是具有最高权限的特权等级&lt;/strong>，也是&lt;strong>唯一可以使用特权指令并访问所有特权资源的特权等级&lt;/strong>。PLV3这个特权等级不能执行特权指令访问特权资源。对于Linux系统来说，架构中仅PLV0级可对应核心态，PLV3级对应用户态。&lt;/p>
&lt;h3 id="控制状态寄存器csr寄存器">控制状态寄存器（CSR寄存器）
&lt;/h3>&lt;p>为了控制CPU的运行状态以及处理特权指令，有一组控制状态寄存器（在龙芯架构中称为CSR寄存器），其位于一个独立的地址空间。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">名称&lt;/th>
&lt;th style="text-align:center">地址&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">CRMD&lt;/td>
&lt;td style="text-align:center">0x0&lt;/td>
&lt;td style="text-align:center">当前模式信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">PRMD&lt;/td>
&lt;td style="text-align:center">0x1&lt;/td>
&lt;td style="text-align:center">例外前模式信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ESTAT&lt;/td>
&lt;td style="text-align:center">0x5&lt;/td>
&lt;td style="text-align:center">例外状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ERA&lt;/td>
&lt;td style="text-align:center">0x6&lt;/td>
&lt;td style="text-align:center">例外返回地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">EENTRY&lt;/td>
&lt;td style="text-align:center">0xc&lt;/td>
&lt;td style="text-align:center">例外入口地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SAVE0~SAVE3&lt;/td>
&lt;td style="text-align:center">0x30~0x33&lt;/td>
&lt;td style="text-align:center">数据保存&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>完整CSR寄存器表和各个CSR寄存器的定义详见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>第7节。&lt;/p>
&lt;p>CSR寄存器有其专用的读写指令&lt;code>csrrd&lt;/code>、&lt;code>csrwr&lt;/code>、&lt;code>csrxchg&lt;/code>，注意这些指令仅在核心态（即PLV0）可运行。&lt;/p>
&lt;h3 id="异常和中断">异常和中断
&lt;/h3>&lt;p>计算机通常按照软件的执行流进行顺序执行和跳转，但有时会需要中断正常的执行流程去处理其他任务，可以触发这一过程的事件统称为异常。&lt;/p>
&lt;p>中断通常由CPU核外部事件发起，CPU核响应后暂停原先程序执行另一段程序的事件。从CPU角度看，中断也可以被视为一种特定的异常，接下来将不做区分统一以“异常”表达。&lt;/p>
&lt;p>顾名思义，“异常”不是常态。异常对应的情况发生的频度不高，但处理起来比较复杂。本着“好钢用在刀刃上”的设计原则，我们希望尽可能由软件程序而不是硬件逻辑来处理这些复杂的异常情况。这样做既能保证硬件的设计复杂度得到控制又能确保系统的实际运行性能没有太大的损失。&lt;/p>
&lt;p>异常处理绝大部分交给异常处理程序完成，但是在处理的开始和结束仍需硬件完成。&lt;/p>
&lt;h4 id="预备阶段">预备阶段
&lt;/h4>&lt;ul>
&lt;li>CPU核内部或外部事件置起异常信号，表示有异常事件发生，请求CPU处理。&lt;/li>
&lt;li>每个异常事件有其对应的异常编码，需要在申请时同时提供。编码对应详见&lt;a href="https://library.vincent-ice.me/posts/loongarch32r%E6%8C%87%E4%BB%A4%E9%9B%86/#%E5%BC%82%E5%B8%B8">这里&lt;/a>或者&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>表7-7。&lt;/li>
&lt;/ul>
&lt;h4 id="响应准备阶段">响应准备阶段
&lt;/h4>&lt;ul>
&lt;li>CPU确认自身可以响应异常处理。&lt;/li>
&lt;li>记录被异常打断的指令的地址到&lt;code>CSR.ERA&lt;/code>&lt;/li>
&lt;li>记录当前运行状态（&lt;code>CSR.CRMD&lt;/code>的PLV、IE）到&lt;code>CSR.PRMD&lt;/code>的对应域。&lt;/li>
&lt;li>同时调整CPU的权限等级（通常调整至最高特权等级&lt;code>CSR.CRMD.PLV=0&lt;/code>）并关闭中断响应（&lt;code>CSR.CRMD.IE=0&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h4 id="响应阶段">响应阶段
&lt;/h4>&lt;ul>
&lt;li>根据例外优先级（见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>6.2.2节）选择响应最高优先级的异常，将对应的异常编码写入&lt;code>CSR.ESTAT&lt;/code>的Ecode和Esubcode。&lt;/li>
&lt;li>跳转至例外入口（来自&lt;code>CSR.EENTRY&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;h4 id="结束阶段">结束阶段
&lt;/h4>&lt;ul>
&lt;li>异常处理程序结束后会执行&lt;code>ertn&lt;/code>指令，其指示CPU从例外处理状态返回。&lt;/li>
&lt;li>例外前运行状态（&lt;code>CSR.PRMD&lt;/code>的PLV、IE）被写回&lt;code>CSR.CRMD&lt;/code>的对应域。&lt;/li>
&lt;li>跳转到被异常打断的指令的地址&lt;code>CSR.ERA&lt;/code>处取指。&lt;/li>
&lt;/ul>
&lt;h4 id="精确异常">精确异常
&lt;/h4>&lt;p>走完异常处理的全部流程，如果我们从原程序流的角度“看”，那么我们会发现它根本不知道某个时刻CPU被“借走”处理了另一段程序，这就是所谓的&lt;strong>精确异常&lt;/strong>。&lt;/p>
&lt;p>简单的来说精确异常要求在处理异常时，发生异常的指令前面的所有指令都执行完（修改了机器状态），而发生异常的指令及其后面的指令都没有执行（没有修改机器状态）。&lt;/p>
&lt;p>在流水线处理器中，同时会有多条指令处于不同阶段，不同阶段都有发生异常的可能，那么如何实现精确异常呢？书中给出一种可行的设计方案：&lt;/p>
&lt;ol>
&lt;li>任何一级流水发生异常时，在流水线中记录下发生异常的事件，直到写回阶段再处理。&lt;/li>
&lt;li>如果在执行阶段要修改机器状态（如状态寄存器），保存下来直到写回阶段再修改。&lt;/li>
&lt;li>指令的PC值随指令流水前进到写回阶段为异常处理专用。&lt;/li>
&lt;li>将外部中断作为取指的异常处理。&lt;/li>
&lt;li>指定一个通用寄存器（或一个专用寄存器）为异常处理时保存PC值专用。&lt;/li>
&lt;li>当发生异常的指令处在写回阶段时，保存该指令的PC及必需的其他状态，置取指的PC值为异常处理程序入口地址。&lt;/li>
&lt;/ol>
&lt;h3 id="调试tips-5">调试Tips
&lt;/h3>&lt;ol>
&lt;li>异常处理需要复杂的控制系统支持，添加起来有一定难度。&lt;del>但它对CPU意味着可以在考试中途出去上个厕所回来接着做而非必须一口气做到底&lt;/del>&lt;/li>
&lt;li>如果觉得直接在流水线上改动的不熟练的话，或许可以在单周期CPU上先添加一下，然后再切分到流水线的各个级。&lt;del>如果你有做好git版本控制的话应该很好找吧&lt;/del>&lt;/li>
&lt;li>某些CSR寄存器和PC寄存器一样存在特定的复位值，见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>6.3节。&lt;/li>
&lt;li>对于CSR寄存器，其也和通用寄存器一样存在冒险问题等待解决。&lt;/li>
&lt;li>在&lt;code>CSR.ESTAT.IS&lt;/code>域，其第10位在有些func程序中固定为0，有些开放读写，可能需要注意下。&lt;/li>
&lt;li>例外返回的地址不一定是&lt;code>CSR.ERA&lt;/code>中的地址。在本实验中返回原地址将会重新执行&lt;code>syscall&lt;/code>。&lt;del>是死循环捏&lt;/del>&lt;/li>
&lt;/ol>
&lt;h2 id="exp13添加其它异常支持">exp13：添加其它异常支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 完善&lt;code>ADEF&lt;/code>、&lt;code>ALE&lt;/code>、&lt;code>BRK&lt;/code>、&lt;code>INE&lt;/code>异常支持&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 添加中断支持&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 添加定时器、计时器&lt;/li>
&lt;/ul>
&lt;p>在exp12完成了&lt;code>syscall&lt;/code>的异常支持后，我想CPU中完整的异常处理的数据和控制通路已经搭建完成了，添加新的异常支持只需要针对新的异常进行对应的判断，发出对应的异常消息即可。&lt;/p>
&lt;h3 id="中断">中断
&lt;/h3>&lt;p>中断可被视为一种特定的异常，但是其与其它异常有着一个关键的不同点。&lt;/p>
&lt;p>由于中断通常由CPU核外部事件触发，其相对CPU核是异步的，所以发出的中断信号需要保持到被CPU采样，否则将永远无法触发中断异常。当然这是由中断源负责维护的。&lt;/p>
&lt;p>在较为简单的线中断模式下，硬件仅需每拍采样各个中断源并将其状态记录于&lt;code>CSR.ESTAT.IS&lt;/code>域中，并在认为有需要响应的中断时将中断例外标注至流水线中的某一条指令上，随后的过程与其它例外相同。&lt;/p>
&lt;h3 id="定时器与定时器中断">定时器与定时器中断
&lt;/h3>&lt;p>在龙芯32位精简版架构中定义了一个定时器，其随着时钟自减，直到为零时置起定时器中断信号。&lt;/p>
&lt;p>详细定义及运行控制信息见&lt;a class="link" href="https://www.loongson.cn/uploads/images/2023041918122813624.%E9%BE%99%E8%8A%AF%E6%9E%B6%E6%9E%8432%E4%BD%8D%E7%B2%BE%E7%AE%80%E7%89%88%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C_r1p03.pdf" target="_blank" rel="noopener"
>原手册&lt;/a>的&lt;code>TCFG&lt;/code>、&lt;code>TVAL&lt;/code>、&lt;code>TICLR&lt;/code>寄存器定义（7.6.2~7.6.4）。&lt;/p>
&lt;h3 id="计时器">计时器
&lt;/h3>&lt;p>龙芯架构 32 位精简版定义了一个恒定频率计时器，其主体是一个 64 位的计数器，称为 Stable Counter。Stable Counter 在复位后置为 0，随后每个计数时钟周期自增 1，当计数至全 1 时自动绕回至 0 继续自增。同时每个计时器都有一个软件可配置的全局唯一编号，称为 Counter ID，保存在&lt;code>CSR.TID&lt;/code>寄存器中。&lt;/p>
&lt;h3 id="调试tips-6">调试Tips
&lt;/h3>&lt;ol>
&lt;li>在经过了exp12的锤炼后，本实验应该不难了吧~~\doge~~&lt;/li>
&lt;li>在verilog描述中&lt;strong>注意多驱动问题&lt;/strong>。如果你选择给每个CSR寄存器一个always块负责内容修改的话，请注意这个CSR寄存器中所有数据更新都必须在这个always块中，以避免多驱动问题产生。例如&lt;code>CSR.ESTAT.IS[11]&lt;/code>的定时器中断状态位的赋值不能在&lt;code>CSR.TVAL&lt;/code>寄存器中，当然还有其它情况，请自行注意避免。（可以在综合的警告或者Linter语法检查找到已有的多驱动）&lt;/li>
&lt;li>选择你觉得舒服的CSR寄存器声明方式，可以按照名字定义32位的，也可以直接按照子域分开定义……善用宏定义将位索引转换为有意义的单词&lt;/li>
&lt;/ol>
&lt;h2 id="exp14添加类sram总线支持">exp14：添加类SRAM总线支持
&lt;/h2>&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 学习总线的原理及作用&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 在CPU中添加简单的类SRAM接口总线支持&lt;/li>
&lt;/ul>
&lt;h3 id="总线">总线
&lt;/h3>&lt;p>总线的本质作用是完成数据交换。总线用于将两个或两个以上的部件连接起来，使得它们之间可以进行数据交换，或者说通信。&lt;/p>
&lt;p>总线的具体介绍可见&lt;a class="link" href="https://foxsen.github.io/archbase/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%BB%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html#%E6%80%BB%E7%BA%BF%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener"
>《计算机体系结构》&lt;/a>。&lt;/p>
&lt;p>在总线通信中，通常将读写操作发起方称为主方（master），响应方称为从方（slave）。每一次读写操作的过程可大致分为：请求发起、响应请求、请求数据传输、请求数据返回。和我们之前的实验中不同的是，由于实际情况下总线上可能不止处理一件事物、数据的读写也需要一定的时间，所以每个步骤之间是有不确定的时间间隔的。为了明确何时的数据是有效的，每次有效的数据传输都基于握手信号，只有握手成功才会传输有效数据。&lt;/p>
&lt;h3 id="类sram接口">类SRAM接口
&lt;/h3>&lt;p>我们的CPU最终需要实现AMBA AXI总线接口，但是直接上手AXI总线可能有些困难，所以我们先学习类SRAM接口，或者说在我们原先的SRAM接口上加入握手机制，其接口信号如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>信号名称&lt;/th>
&lt;th>位宽&lt;/th>
&lt;th>方向&lt;/th>
&lt;th>功能&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>req&lt;/td>
&lt;td>1&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>读写请求信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wr&lt;/td>
&lt;td>1&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>高电平表示写请求，低电平为读操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>size&lt;/td>
&lt;td>2&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>传输字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addr&lt;/td>
&lt;td>32&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>请求的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wstrb&lt;/td>
&lt;td>4&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>写请求的写字节使能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wdata&lt;/td>
&lt;td>32&lt;/td>
&lt;td>master-&amp;gt;slave&lt;/td>
&lt;td>写请求的写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addr_ok&lt;/td>
&lt;td>1&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>请求的地址传输完毕&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>data_ok&lt;/td>
&lt;td>1&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>请求的数据传输完毕（读取的数据or数据的写入）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rdata&lt;/td>
&lt;td>32&lt;/td>
&lt;td>slave-&amp;gt;master&lt;/td>
&lt;td>读请求返回的读数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>相较于原先的SRAM接口，我们只添加了&lt;code>size&lt;/code>、&lt;code>addr_ok&lt;/code>、&lt;code>data_ok&lt;/code>三根信号线，接下来我们解释一下这三条线的作用。&lt;/p>
&lt;h4 id="size">&lt;code>size&lt;/code>
&lt;/h4>&lt;p>&lt;code>size&lt;/code>信号表示该次请求传输的字节数，根据访存指令不同选择不同的值&lt;/p>
&lt;ul>
&lt;li>0: 1字节。&lt;code>ld.b&lt;/code>、&lt;code>ld.ub&lt;/code>、&lt;code>st.b&lt;/code>&lt;/li>
&lt;li>1: 2字节。&lt;code>ld.h&lt;/code>、&lt;code>ld.uh&lt;/code>、&lt;code>st.h&lt;/code>&lt;/li>
&lt;li>2: 4字节。&lt;code>ld.w&lt;/code>、&lt;code>st.w&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="addr_ok">&lt;code>addr_ok&lt;/code>
&lt;/h4>&lt;p>&lt;code>addr_ok&lt;/code>信号用于和&lt;code>req&lt;/code>信号一起完成读写请求的握手。只有在&lt;code>clk&lt;/code>的上升沿同时看到&lt;code>req&lt;/code>和&lt;code>addr_ok&lt;/code>为1的时候才是一次成功的请求握手，读写请求、读写地址和可能的写数据被发送至从方。&lt;/p>
&lt;h4 id="data_ok">&lt;code>data_ok&lt;/code>
&lt;/h4>&lt;p>&lt;code>data_ok&lt;/code>信号有双重身份。对应读事务的时候它是数据返回的有效信号；对应写事务的时候，它是写入完成的有效信号。&lt;/p>
&lt;p>在类SRAM接口中主方对于数据响应总是可以接收，所以不再设置Master接收&lt;code>data_ok&lt;/code>的握手信号。也就是说如果存在未返回数据响应的请求，则在&lt;code>clk&lt;/code>的上升沿看到&lt;code>data_ok&lt;/code>为1就可以认为是—次成功的数据响应握手。&lt;/p>
&lt;h4 id="读写时序">读写时序
&lt;/h4>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB.jpg"
width="1117"
height="835"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB_huc2c27e7784c3d970354444dd857b64ff_57899_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E8%AF%BB_huc2c27e7784c3d970354444dd857b64ff_57899_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99.jpg"
width="1284"
height="1004"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99_hu6080e06310ce250da43bf3cd0d4f91f1_77787_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99_hu6080e06310ce250da43bf3cd0d4f91f1_77787_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>需要注意的是，总线上支持多事务处理，比如说以下连续写读操作：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB.jpg"
width="808"
height="825"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB_hu1fbc0db3da952ee1c74445a9374df906_52208_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/%E7%B1%BBSRAM%E5%86%99%E8%AF%BB_hu1fbc0db3da952ee1c74445a9374df906_52208_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="235px"
>&lt;/p>
&lt;p>对于初学者来说还是先一个一个事务处理，多事务会复杂上不少，对于我们的单发射流水线也起不到很大优化效果。&lt;/p>
&lt;blockquote>
&lt;p>建议阅读一下《CPU设计实战》中“类SRAM总线的设计”一节，书中有详细的分析。如果没有Loongarch版的话MIPS版也是相通的。&lt;/p>
&lt;/blockquote>
&lt;h3 id="调试tips-7">调试Tips
&lt;/h3>&lt;ol>
&lt;li>从总线接口开始，你就会发现何为时序逻辑比组合逻辑难了。不出意外的话你应该会开始遇到各种差一拍或者其它奇奇怪怪的情况，请记得此时你的流水级处理的事情不像之前那样只有一拍，而变成类似一个状态机一样的多周期流水级，需要对流入和流出的控制有着明确的信号逻辑。&lt;/li>
&lt;li>明确需要当拍更新（组合逻辑）和下拍更新（时序逻辑）的信号及它们间的相互依赖。&lt;/li>
&lt;/ol>
&lt;h2 id="exp1516添加axi总线支持完成axi随机延迟验证">exp15、16：添加AXI总线支持、完成AXI随机延迟验证
&lt;/h2>&lt;p>CPU对外只有一个AXI接口，需在内部完成取指和数据访问的仲裁。推荐在本任务中实现一个类SRAM-AXI的2x1的转接桥，然后拼接上exp14完成的类SRAM接口的CPU，将myCPU封装为AXI接口。&lt;/p>
&lt;h3 id="axi接口">AXI接口
&lt;/h3>&lt;p>备注栏中是我们针对exp给出的—些设计建议。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3.jpg"
width="1730"
height="2933"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3_huf61b5be99eb247b205205c0decc13487_844529_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/AXI%E6%8E%A5%E5%8F%A3_huf61b5be99eb247b205205c0decc13487_844529_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="141px"
>&lt;/p>
&lt;p>AXI接口的设计资料比较多，《CPU设计实战》和&lt;a class="link" href="https://foxsen.github.io/archbase/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%BB%E7%BA%BF%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF.html#%E7%89%87%E4%B8%8A%E6%80%BB%E7%BA%BF" target="_blank" rel="noopener"
>《计算机体系结构基础》&lt;/a>以及网络上都有十分详细的分析和教学，我就不班门弄斧了。&lt;/p>
&lt;p>在这里提供一个&lt;a class="link" href="#%e7%b1%bbSRAM-AXI%e8%bd%ac%e6%8e%a5%e6%a1%a5" >转接桥参考&lt;/a>。&lt;/p>
&lt;h3 id="调试tips-8">调试Tips
&lt;/h3>&lt;ol>
&lt;li>到这里提前恭喜你已经写出完整的CPU (◆゜∀゜）👍&lt;/li>
&lt;li>&lt;a class="link" href="https://bookdown.org/loongson/_book3/chapter-axi-bus.html#subsec-exp16" target="_blank" rel="noopener"
>在exp16实践任务中&lt;/a>第6、7步比较费时间，建议各个种类各挑一个就行&lt;/li>
&lt;li>到这我也没什么Tips可写了，靠各位自己STFW啦*(^_^)/*&lt;/li>
&lt;/ol>
&lt;h2 id="附录">附录
&lt;/h2>&lt;blockquote>
&lt;p>在学习之前，你需要&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 学会verilog的基本语法&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://library.vincent-ice.me/posts/verilog%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95/" target="_blank" rel="noopener"
>Verilog 基础知识 | Vincent的图书馆&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_43460068/article/details/122001173" target="_blank" rel="noopener"
>Verilog HDL——运算符_verilog逻辑运算符_~Old的博客-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/72014513?ivk_sa=1024320u&amp;amp;utm_id=0" target="_blank" rel="noopener"
>Verilog语法之四：运算符 - 知乎 (zhihu.com)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/weixin_54358182/article/details/129495887" target="_blank" rel="noopener"
>Verilog 基础仿真文件编写_verilog仿真程序编写_背影疾风的博客-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 学会补码及其加减法&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_34771697/article/details/77972501" target="_blank" rel="noopener"
>原码-反码-补码 &amp;ndash;数学公式分析_原码反码补码计算公式及关系-CSDN博客&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/105917577" target="_blank" rel="noopener"
>【原创】计算机为什么要用补码？ - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_43511405/article/details/105898286" target="_blank" rel="noopener"
>【计算机组成原理】补码的加减运算方法_补码相加怎么算的-CSDN博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="多路复选器">多路复选器
&lt;/h3>&lt;p>作用：从一组输入数据中选出某一个来&lt;/p>
&lt;img src="assets/mux.png" alt="mux" style="zoom:33%;" />
&lt;p>核心：用与门当做开关，通过数据信号和控制信号相与实现各数据的选择效果&lt;/p>
&lt;h4 id="二选一">二选一
&lt;/h4>&lt;p>电路图：&lt;img src="assets/MUX2.png" alt="MUX2.png" style="zoom: 50%;" />&lt;/p>
&lt;p>verilog实现方式：&lt;/p>
&lt;ul>
&lt;li>门级电路（了解即可）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2_gate&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">}})&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">}});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>行为级描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span> &lt;span class="c1">//1=&amp;gt;a,0=&amp;gt;b
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>带参数的常用写法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux2_par&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 调用方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mux2_par&lt;/span> &lt;span class="p">#(.&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">u_mux2_par&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="四选一">四选一
&lt;/h4>&lt;p>电路图：&lt;img src="assets/MUX4.png" alt="MUX4" style="zoom: 50%;" />&lt;/p>
&lt;p>verilog实现方式：&lt;/p>
&lt;ul>
&lt;li>门级电路（了解即可）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4_gate&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;~&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>行为级描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>带参数的常用写法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mux4_par&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mh">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">wire&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>&lt;span class="c1">//00=&amp;gt;a,01=&amp;gt;b,10=&amp;gt;c,11=&amp;gt;d
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​ 调用方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mux4_par&lt;/span> &lt;span class="p">#(.&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">u_mux4_par&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">(),.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>本章你需要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 带参数的写法及其调用方法&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="加法器">加法器
&lt;/h3>&lt;h4 id="半加器">半加器
&lt;/h4>&lt;p>只将两个1位二进制数相加，不考虑低位进位。&lt;/p>
&lt;ul>
&lt;li>真值表&lt;/li>
&lt;/ul>
&lt;table border="4" >
&lt;tr align =center>
&lt;td colspan="2">输入&lt;/td>
&lt;td colspan="2">输出&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>S&lt;/td>
&lt;td>CO&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>逻辑函数&lt;/li>
&lt;/ul>
$$
S=\overline{A}B+A\overline{B}=A\oplus B\\
CO=AB
$$
&lt;ul>
&lt;li>电路图&lt;/li>
&lt;/ul>
&lt;img src="assets/half_adder.png" alt="half_adder" style="zoom:61%;" />
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">half_adder&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="全加器">全加器
&lt;/h4>&lt;p>除了要将两个1位二进制数相加外，还有考虑来自低位的进位。&lt;/p>
&lt;ul>
&lt;li>真值表&lt;/li>
&lt;/ul>
&lt;table border="5" >
&lt;tr align =center>
&lt;td colspan="3">输入&lt;/td>
&lt;td colspan="2">输出&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>CI&lt;/td>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>S&lt;/td>
&lt;td>CO&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr align =center>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/table>
&lt;ul>
&lt;li>&lt;del>逻辑函数&lt;/del> 可以通过两个半加器串联修改实现&lt;/li>
&lt;/ul>
$$
S=A\oplus B\oplus CI\\
CO=AB+\left( A+B\right) \left( CI\right)
$$
&lt;ul>
&lt;li>电路图&lt;/li>
&lt;/ul>
&lt;img src="assets/full_adder.png" alt="full_adder" style="zoom:61%;" />
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder_1bit&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="多位加法器">多位加法器
&lt;/h4>&lt;h5 id="行波进位加法器ripple-carry-adder">行波进位加法器（Ripple-carry adder）
&lt;/h5>&lt;ul>
&lt;li>示意图&lt;/li>
&lt;/ul>
&lt;img src="assets/RCA.jpg" alt="ripple_carry_adder" style="zoom: 67%;" />
&lt;p>如同波一般向前计算。每次运算需要等待前一位的进位值，由全加器的电路图可知，从cin到cout有两级门电路的时延，所以对于N位行波进位加法器，时延就是$3+(N-1)*2=2N+1$级。可见，在位数更高的RCA中，串行计算带来的时延会相当大，这对于现代高速运算是不可忍受的。&lt;/p>
&lt;ul>
&lt;li>verilog实现方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder_8bit&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">temp_co&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">8&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adder_simple&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adder_1bit&lt;/span> &lt;span class="n">adder_unit&lt;/span>&lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),.&lt;/span>&lt;span class="n">co&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">temp_co&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="超前进位加法器carry-lookahead-adder">超前进位加法器（Carry-lookahead Adder）
&lt;/h5>&lt;p>为了提高运算速度，必须设法减小或消除由于进位信号逐级传递所耗费的时间，于是设计出超前进位加法器。&lt;/p>
&lt;h6 id="超前进位逻辑">超前进位逻辑
&lt;/h6>&lt;p>两个多位数中第&lt;em>i&lt;/em>位相加产生的进位输出$(CO)_i$可表示为
&lt;/p>
$$
(CO)_i=A_iB_i+\left( A_i+B_i\right) \left( CI\right)_i
$$
&lt;p>
我们将$G_i = A_iB_i$称为进位生成函数，将$P_i = (A_i+B_i)(CI)_i$称为进位传递函数。&lt;/p>
&lt;p>通过数学计算展开可得
&lt;/p>
$$
\left( CO\right) _{i}=G_{i}+P_{i}G_{i-1}+P_{i}P_{i-1}G_{i-2}+\ldots +P_{i}P_{i-1}\ldots P_{1}G_{0}
+P_{i}P_{i-1}\ldots P_{0}G_{0}
$$
&lt;p>
于是我们得到了任意一位产生的进位，避免了等待进位信号的逐级传递，将实现上述逻辑的电路称为&lt;strong>CLU&lt;/strong>（Carry Lookahead Unit）。由公式可以看出，并行生成各级$C_i$的时延来自$G_i$和$P_i$的先与后或，再加上生成$G_i$和$P_i$的一级门电路，总共是三级门电路时延。而且可以看出，时延的级数并不会随位数的增加而增加，不论多少位CLA，生成各级$C_i$的时延恒为三级门电路。&lt;/p>
&lt;p>由全加器的真值表可得第$i$位和$S_i$的逻辑式
&lt;/p>
$$
S_i=A_i\oplus B_i\oplus (CI)_i \ \ \ 或 \ \ \ S_i= \sim G_i P_i\oplus (CI)_i
$$
&lt;p>
同样不超过三级门电路&lt;/p>
&lt;h6 id="4位超前进位加法器">4位超前进位加法器
&lt;/h6>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">CLA4&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">ci&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">co&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">co_buf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ci_buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ci&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">co&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">ci_buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">co_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">G&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">ci_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="更多位超前进位加法器">更多位超前进位加法器
&lt;/h6>&lt;p>在设计出4位超前进位加法器后，一个很自然的想法是：要想得到更多位CLA，只需像4位CLA那样，只是多递归几次的区别。这个方法叫&lt;strong>全超前进位&lt;/strong>。全超前进位理论上是可行的，但由CLU的公式可知，随着位数的增加，实现CLU的门电路数量会急剧增加，导致电路面积开销过大；另一方面，位数的增加也会使扇入飞速增大，导致时延增加。&lt;/p>
&lt;p>&lt;strong>所以，单纯的递归并不是好的解决方案。&lt;/strong>&lt;/p>
&lt;p>一个解决方案是借鉴RCA。将多个4位CLA级联，即采用“组内超前进位，组间串行进位“来构成更多位超前进位加法器。其中每个4位CLA从进位输入到进位输出是两级门电路时延，加上第一级CLA的PG时延和最后一级CLA的异或门时延，这种方式构成的N位超前进位加法器的总时延为$1+2*(N/4)+1=N/2+2$。&lt;/p>
&lt;p>如果想获得更快的速度，就得采用另一种方法——&lt;strong>多级超前进位加法器&lt;/strong>。多级超前进位加法器采用“组内超前进位，组间也超前进位”的方式，可进一步降低因组间串联进位带来的时延。即将每个4位CLA看做一位再由超前进位逻辑再次进行超前进位，故称为多级超前进位加法器。&lt;/p>
&lt;blockquote>
&lt;p>本章你要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 超前进位加法器是怎么优化降低时延的&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> generate-for循环调用模块&lt;/li>
&lt;/ul>
&lt;p>一些可参考资料&lt;/p>
&lt;ul>
&lt;li>《数字电子技术基础》阎石 p172-176&lt;/li>
&lt;li>《计算机体系结构基础》胡伟武 p188-193&lt;/li>
&lt;li>&lt;a class="link" href="http://blog.chinaaet.com/T_Tang/p/5100051382" target="_blank" rel="noopener"
>32位超前进位加法器的设计-T-Tang-电子技术应用-AET-中国科技核心期刊-最丰富的电子设计资源平台 (chinaaet.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/579055858?utm_id=0" target="_blank" rel="noopener"
>16位两级超前进位加法器的Verilog实现及时延分析 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="乘法器">乘法器
&lt;/h3>&lt;p>不采用任何优化算法的乘法过程，可以用我们小学就学过的列竖式乘法来说明。从乘数的低位开始，每次取一位与被乘数相乘，其乘积作为部分积暂存，乘数的全部有效位都乘完后，再将所有部分积根据对应乘数数位的权值错位累加，得到最后的乘积。&lt;/p>
&lt;img src="assets/ShuShi.jpg" alt="ShuShi" style="zoom:50%;" />
&lt;p>这样原始的乘法在设计上是可以实现的，但在工程应用上几乎不会采用，在时延与面积上都需要优化。一个N位的乘法运算，需要产生N个部分积，并对它们进行全加处理，位宽越大，部分积个数越多，需要的加法器也越多，加法器延时也越大，那么针对乘法运算的优化，主要也就集中在两个方面：&lt;strong>一是减少加法器带来的延时，二是减少部分积的个数&lt;/strong>。&lt;/p>
&lt;h4 id="补码移位乘法器">补码移位乘法器
&lt;/h4>&lt;p>首先解决负数乘法问题。在加减法中我们采用补码解决负数和减法问题，在负数乘法中同样可以使用补码。&lt;/p>
&lt;p>假定有 8 位定点数 $Y$， $[Y]_补$ 的二进制格式写作 $y_7 y_6 y_5 y_4 y_3 y_2 y_1 y_0$ ，根据补码定义，$Y$ 的值等于
&lt;/p>
$$
Y=y_{7}\times -2^{7}+y_{6}\times 2^{6}+y_{5}\times 2^{5}+\ldots +y_{0}\times 2^{0}
$$
&lt;p>
由此可得出
&lt;/p>
$$
\begin{aligned}\left[ X\times Y\right] _{补}&amp;=\left[ X\times (y _{7}\times -2^{7}+y_{6}\times 2^{6}+\ldots +y_{0}\times 2^0) \right]_{补} \\
&amp;=\left[X \times -y_7\times 2^{7}+X\times y_{6}\times 2^{6}+\ldots +X\times y_{0}\times 2^{0}\right] _{补}\\
&amp;=\left[ X\times-y_{7}\times2^{7}\right] _{补}+\left[ X\times y_6\times 2^{6}\right] _{补}+\ldots +[ X\times y_{0}\times 2^{0}) _{补}\\
&amp;=-y_{7}\times \left[ X \times 2^{7} \right] _{补} + y_{6}\times \left[ X \times 2^{6} \right] _{补}+\ldots +y_{0}\times \left[ X\times 2^{0}\right]_{补}\\
&amp;=\left[ X\right] _{补}\times \left( -y_{7}\times 2^{7}+y_{6}\times 2^{6}+\ldots +y_{0}\times 2^{0} \right) \end{aligned}
$$
&lt;p>根据公式可以用verilog设计出简单的移位补码乘法器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mult_simple&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1_ext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b11111111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">mult_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mh">8&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">16&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1_ext&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="华莱士树">华莱士树
&lt;/h4>&lt;p>由于累加器本身的进位传递延时对电路性能依然存在非常大的影响，所以优化的第一个方面，就是改进部分积累加结构，提升累加性能。如果采用部分积直接相加的方式，因为全加器进位的关系，当前bit的相加结果依赖于它前一bit的进位输出，整个计算过程相当于串行化，位宽越大，延时越大，所以优化的关键就是消除进位链，使运算并行化。&lt;/p>
&lt;p>进位保留加法器（Carry Save Adder, CSA）是比较常用的一种优化方式，CSA实际上就是一位全加器。在上一章中我们学习了全加器有3个输入A,B,CI和2个输出S,CO，通过CI和上一级CO相接实现串行的加法，但是在CSA中我们保留每一位的CO，CI使用另外一个加数D来替代，即
&lt;/p>
$$
A+B+D=S+\{C,0\}
$$
&lt;p>
这样我们就实现了3个加数变为2个加数的加数缩减，也就是说我们将加数减少了1/3，如果我们再往后加一层同样的CSA，可以进一步减少加数，直到只剩两个加数即可使用一个加法器得到最终结果。对于N个加数的加法，使用串行加法器需要N-1个加法器的延时，使用多层华莱士树大致需要$log_{1.5}(0.5N)$个加法器延迟，显然明显地降低计算延迟，数据宽度越宽，其效果越明显。&lt;/p>
&lt;p>下面为8个1位数相加的四层华莱士树结构图，同样也可将1位数扩展为多位数，结构是相似的。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace.jpg"
width="523"
height="515"
srcset="https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace_hu8a670269c76f263a077ff7f167c4e54b_24627_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/%E9%BE%99%E8%8A%AF%E5%AE%9E%E9%AA%8C%E6%94%BB%E7%95%A5/assets/wallace_hu8a670269c76f263a077ff7f167c4e54b_24627_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="wallace"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>&lt;strong>注意每一层的进位信号只能接到下一层，不能接到上一层&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">compressor32&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">out2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样也可以设计4-2压缩的华莱士树&lt;/p>
&lt;h4 id="booth乘法器">booth乘法器
&lt;/h4>&lt;p>如果遵循第一节的补码乘法算法，需要特地挑出第 N 个部分积，并使用补码减法操作，这就需要实现一个额外的状态机来控制，增加了硬件设计复杂度。 因此对补码乘法公式进行变换
&lt;/p>
$$
\begin{aligned}
Y&amp;=-y_{7}\times 2^{7}+y_{6}\times 2^{6}+y_{5}\times 2^{5}+\ldots +y_{0}\times 2^{0}\\
&amp;=\left( -y_7 \times 2^{7}+\left( y_{6}\times 2^{7}-y_{6}\times 2^{6}\right) +\left( y_{5}\times 2^{6}-y_{5}\times 2^{5}\right) +\ldots
+\left( y_1\times 2^{2}-y_1\times 2^{1}\right) +\left( y_{0}\times 2^1- y_{0}\times 2^{0}\right) +\left( 0\times 2^{0}\right) \right) \\
&amp;=\left( y_{6}-y_{7}\right) \times 2^{7}+\left( y_{5}-y_{6}\right) \times 2^{6}+\ldots +\left( y_{0}-y_{1}\right) \times 2^{1}+
\left( y_{-1}-y_{0}\right) \times 2^{0}\end{aligned}
$$
&lt;p>
其中$y_{-1}$取值为 0。 经过变换，公式变得更加规整，不再需要专门对最后一次部分积采用补码减法，更适合硬件实现。 这个新公式被称为 Booth 一位乘算法。&lt;/p>
&lt;p>根据算法公式，很容易得出它的规则&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$y_i$&lt;/th>
&lt;th style="text-align:center">$y_{i-1}$&lt;/th>
&lt;th style="text-align:center">操作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>于是我们可以设计出booth一位乘&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">compressor32&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="c1">//华莱士树32压缩
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">out2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">op3&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mult_booth1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="c1">//booth一位乘
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">op1_ext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b11111111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">op1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="k">signed&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">mult_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">op1_ext&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">op1_ext&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">op1_ext&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wallace1_buf&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace1_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace1_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace2_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace2_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mult_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">5&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">9&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">wallace4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compressor32&lt;/span> &lt;span class="n">wallace4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">9&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">10&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">adder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">10&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">wallace1_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">11&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Booth 一位乘算法中，为了计算 N 位的补码乘法, 依然需要 N-1 次加法。 而数据宽度较大的补码加法器面积大、电路延迟长，限制了硬件乘法器的计算速度，所以优化的第二个方面就是减少部分积的个数。重新对补码乘法公式进行变换，得到 Booth 两位乘算法。
&lt;/p>
$$
𝑌=(𝑦_5+𝑦_6−2𝑦_7 )×2^6+(𝑦_3+𝑦_4−2𝑦_5 )×2^4+⋯+(𝑦_{−1}+𝑦_0−2𝑦_1 )×2^0
$$
&lt;p>
根据算法公式，很容易得出它的规则&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">$y_{i+1}$&lt;/th>
&lt;th style="text-align:center">$y_{i}$&lt;/th>
&lt;th style="text-align:center">$y_{i-1}$&lt;/th>
&lt;th>操作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$+[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$+2[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$-2[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td>$-[X]_补$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>于是你们就可以设计一个8位booth二位乘乘法器了&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>本章你要学会的&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 补码乘法&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 并行化优化思路&lt;/li>
&lt;/ul>
&lt;p>一些参考资料&lt;/p>
&lt;ul>
&lt;li>《计算机体系结构基础》胡伟武 p196-206&lt;/li>
&lt;li>《CPU设计实战》p140-146&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/127164011" target="_blank" rel="noopener"
>乘法器的布斯算法原理与VERILOG实现 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/291239777" target="_blank" rel="noopener"
>八位“Booth二位乘算法”乘法器 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="除法器">除法器
&lt;/h3>&lt;p>符号解释：&lt;/p>
&lt;ul>
&lt;li>$N$ = numerator (dividend)，分子，被除数&lt;/li>
&lt;li>$D$ = denominator (divisor)，分母，除数&lt;/li>
&lt;li>$Q$ = quotient，商&lt;/li>
&lt;li>$R$ = Remainder，余数&lt;/li>
&lt;/ul>
&lt;h4 id="循环相减法">循环相减法
&lt;/h4>&lt;p>最简单粗暴的法子，减到没法减。&lt;/p>
&lt;p>其伪代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Q :&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> R ≥ D &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Q :&lt;span class="o">=&lt;/span> Q + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>Q,R&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="慢速算法迭代">慢速算法（迭代）
&lt;/h4>&lt;p>以下恢复余数法、非恢复余数法、SRT算法均是慢速算法，其共同点为通过循环等式，对余数R进行迭代：
&lt;/p>
$$
R_{j+1} = B \times R_j - q_{n-(j+1)} \times D
$$
&lt;p>
其中：&lt;/p>
&lt;ul>
&lt;li>$R_j$ 是第 $j$ 个部分余数，$R$ = $R_n$ ，$N$ = $R_0$&lt;/li>
&lt;li>$B$ 是基，在二进制中，为2&lt;/li>
&lt;li>$q_{n−(j+1)}$ 是商的第 $n−(j+1)$ 位，例如第1次迭代（j=0）产生 $q_{n−1}$ ，商的最高位&lt;/li>
&lt;li>$n$ 是商的位数&lt;/li>
&lt;li>$D$ 是除数&lt;/li>
&lt;/ul>
$$
\begin{aligned}
R &amp;= R_n = 2R_{n-1}-q_0D = 2R_{n-2}-2^1q_1D-q_0D = \cdots \\
&amp;= 2^nN - 2^{n-1}q_{n-1}D - \cdots -2^1q_1D - q_0D \\
&amp;= 2^nN-QD
\end{aligned}
$$
&lt;p>注意要将N（被除数）左移n位&lt;/p>
&lt;h4 id="恢复余数法">恢复余数法
&lt;/h4>&lt;p>恢复余数法无法直接用于与有符号数，对于有符号数需要先转换为无符号数，然后根据除数与被除数的符号判断商与余数的符号。&lt;/p>
&lt;p>其算法核心是在每次迭代时都假定$q$为1，计算出下一个部分和。然后判断该部分和的正负性，如果为正则假定正确，即该位商为1；如果为负则假定不正确，即该位商为0，且将部分余数恢复为正（即将减去的除数加回去）。&lt;/p>
&lt;p>算法伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D :&lt;span class="o">=&lt;/span> D &lt;span class="s">&amp;lt;&amp;lt; n -- R和D需要两倍位宽
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">for i := n&lt;/span> − &lt;span class="m">1&lt;/span> .. &lt;span class="m">0&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> R &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span> -- 该位商为 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> -- 该位商为 &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> R + D -- 将部分余数恢复为正
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="非恢复余数法">非恢复余数法
&lt;/h4>&lt;p>在非恢复余数法中，使用&lt;code>{-1,1}&lt;/code>替代&lt;code>{0,1}&lt;/code>，同时去除恢复余数的冗杂步骤，根据该位商情况迭代不同的。&lt;/p>
&lt;blockquote>
&lt;p>$-3 = (-1)(1)(1)(-1) = -2^3 + 2^2 + 2^1 - 2^0$&lt;/p>
&lt;/blockquote>
&lt;p>算法伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">R :&lt;span class="o">=&lt;/span> N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">D :&lt;span class="o">=&lt;/span> D &lt;span class="s">&amp;lt;&amp;lt; n -- R和D需要两倍位宽
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">for i = n&lt;/span> − &lt;span class="m">1&lt;/span> .. &lt;span class="m">0&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> R &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> + &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R − D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> q&lt;span class="o">(&lt;/span>i&lt;span class="o">)&lt;/span> :&lt;span class="o">=&lt;/span> − &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> R :&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span> * R + D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="on-the-fly算法">&lt;strong>On-The-Fly算法&lt;/strong>
&lt;/h5>&lt;p>由于非恢复余数法中的商出现了负数，直接得出的商是非标准形式的，我们需要把非标准形式的商在算法的最后一步转换为标准形式，但是它需要耗费额外的延迟以及芯片面积。&lt;/p>
&lt;p>On-the-fly转换是为了获得实时的转换结果而设计的，它仅仅使用2个Flip-Flop和一些简单的组合逻辑就可以完成转换过程。&lt;/p>
&lt;p>Q的值在每次迭代中的更新公式为：
&lt;/p>
$$
Q_{j+1} = Q_j + q_{j+1}r^{-(j+1)}
$$
&lt;p>
在存在负数的商位的情况下：
&lt;/p>
$$
Q_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} \ge 0\\
Q_j - r^{-j} + (r-\left | q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} &lt; 0
\end{matrix}\right.
$$
&lt;p>
该更新公式有一个缺点，需要做减法，进位的传播会使电路变得很慢，因此我们定义另一个寄存器$QM_{j+1} = Q_j - r^{-j}$。于是减法操作可替换为对寄存器 QM 进行采样。&lt;/p>
&lt;p>此时两个寄存器的更新公式为：
&lt;/p>
$$
Q_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} \ge 0\\
QM_j + (r-\left | q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} &lt; 0
\end{matrix}\right.
$$
$$
QM_{j+1} =
\left\{\begin{matrix}
Q_j + q_{j+1}r^{-(j+1)} &amp; , q_{j+1} > 0\\
QM_j + (r-\left | (r-1)-q_{j+1} \right | )r^{-(j+1)} &amp; , q_{j+1} \le 0
\end{matrix}\right.
$$
&lt;p>初始化条件为：
&lt;/p>
$$
Q = QM =
\left\{\begin{matrix}
全0 &amp; , 商为正\\
全1 &amp; , 商为负
\end{matrix}\right.
$$
&lt;blockquote>
&lt;p>一些参考资料&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/devindd/articles/17633558.html#fnref1" target="_blank" rel="noopener"
>硬件除法专题-SRT除法 - devindd - 博客园&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/550913605" target="_blank" rel="noopener"
>SRT除法的一些理解 - 知乎&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/lum250/article/details/125111667" target="_blank" rel="noopener"
>除法器的实现（恢复余数、不恢复余数、级数展开、Newton-Raphson）_恢复余数除法器-CSDN博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="类sram-axi转接桥">类SRAM-AXI转接桥
&lt;/h3>&lt;p>龙芯杯团队赛中曾经提供的一个转接桥参考，效率偏低，且不支持burst传输。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">cpu_axi_interface&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">resetn&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//inst sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="n">inst_req&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">inst_wr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_size&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_addr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">inst_rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">inst_data_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//data sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="n">data_req&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">data_wr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_size&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_addr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">data_rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">data_addr_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">data_data_ok&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//axi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">//ar
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">araddr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arlen&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arsize&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arburst&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arlock&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arcache&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">arprot&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">arvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">arready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//r
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">rresp&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">rlast&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">rvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">rready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//aw
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awaddr&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awlen&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awsize&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awburst&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awlock&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awcache&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">awprot&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">awvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">awready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//w
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wdata&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">wstrb&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">wlast&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">wvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">wready&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">bid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">bresp&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">bvalid&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">bready&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//addr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//req is inst or data;1:data,0:inst
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">do_wr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">31&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">wire&lt;/span> &lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">data_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_req&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">inst_req&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">data_req&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_req&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_req_or&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">!&lt;/span>&lt;span class="n">do_req&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_req&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_wr_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_wr&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_wr&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_wr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_size_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_size&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_size&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_addr_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_addr&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_addr&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_wdata_r&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">data_wdata&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inst_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">inst_addr_ok&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">inst_wdata&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//inst sram-like
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_data_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_req_or&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_data_ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">do_req_or&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">data_back&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">inst_rdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_rdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//---axi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">reg&lt;/span> &lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">data_back&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">addr_rcv&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rready&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">bvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">bready&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addr_rcv&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">arready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">awvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">awready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wdata_rcv&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">resetn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wvalid&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">wready&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data_back&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ar
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">arid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data_req&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">araddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arsize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arburst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arcache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arprot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">arvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//r
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">rready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//aw
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">awid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0001&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awaddr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awlen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awsize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awburst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awcache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awprot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">awvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">addr_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//w
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">wid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mi">&amp;#39;d0001&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_wdata_r&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wstrb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_size_r&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d0&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">do_size_r&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="mi">&amp;#39;d1&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0011&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">do_addr_r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b1111&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wlast&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mi">&amp;#39;d1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">wvalid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_req&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">do_wr_r&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;!&lt;/span>&lt;span class="n">wdata_rcv&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">assign&lt;/span> &lt;span class="n">bready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>[OS Week7] Coroutine, Iterator &amp; Asynchronous Programming</title><link>https://loongson-neuq.pages.dev/p/os-week7-coroutine-iterator-asynchronous-programming/</link><pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week7-coroutine-iterator-asynchronous-programming/</guid><description>&lt;h1 id="what-is-coroutine">What is Coroutine?
&lt;/h1>&lt;p>协程，是相对与子过程（即我们熟悉的函数）的一种概念。子过程是一种被调用的过程，而协程是一种可以挂起和恢复的过程。简单地说，你调用一个子过程（函数），你就只能等它从头执行完毕，下一次你再调用它的时候，它还是从头开始执行。而协程，你可以在中途挂起它，然后再恢复它，它会从上次&lt;strong>挂起&lt;/strong>的地方继续执行。&lt;/p>
&lt;h2 id="why-coroutine">Why Coroutine?
&lt;/h2>&lt;p>协程被称为 Green Thread，似乎与线程有些类似，但是他们完全不同。&lt;/p>
&lt;p>对于用户程序来说，操作系统对 CPU 做了一层抽象，让用户程序感觉自己拥有了一个整个 CPU（核心）。而线程的意义在于用户程序，能够拥有多个 CPU 核心，从而提高程序的并发性。通过操作系统的抽象，你可以创建数千个线程，但是 CPU 实际上只有几个核心。通过多个 CPU 核心完成任务，来更好地利用一整块 CPU，这就是&lt;strong>Parallelism（并行）&lt;/strong>。&lt;/p>
&lt;p>协程，并不关注 CPU 核心的问题，相反，协程可以在任意一个或多个 CPU 核心上调度运行，取决于调度器的实现。通常，当我们谈论协程的时候，我们会只关心一个 CPU 核心的问题，而将调度的问题交给调度器来解决。因此，协程解决的问题是，如何更加&lt;strong>充分&lt;/strong>地利用一个 CPU 核心。这就是&lt;strong>Concurrency（并发）&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>定义角度：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行(Parallelism)是指在同一时刻，有多个任务在&lt;strong>多个&lt;/strong>处理器上同时执行&lt;/li>
&lt;li>并发(Concurrency)是指在同一时间段内，有多个任务在交替执行，从&lt;strong>宏观&lt;/strong>来看似乎是同时进行的，但是在&lt;strong>微观&lt;/strong>上是交替执行（串行，单核心）的。&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>CPU利用角度：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行要求程序能够充分利用多个CPU核心，将任务分配到不同的核心上同时执行&lt;/li>
&lt;li>并发则是通过合理安排任务的执行顺序，让单个CPU核心能够高效地处理多个任务&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>实现机制：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行通常依赖于硬件的多核心支持，通过线程或进程实现多任务的真正同时执行&lt;/li>
&lt;li>并发可以通过协程、时间片轮转等机制，在单个核心上实现任务的交替执行&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>一个形象的比喻：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行就像多个收银员同时为不同顾客结账&lt;/li>
&lt;li>并发就像一个收银员通过快速切换为多个顾客轮流结账&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>性能提升方式：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行通过增加计算资源(CPU核心)来提高程序的整体吞吐量&lt;/li>
&lt;li>并发通过优化任务调度和执行顺序来提高单个计算资源的利用效率&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>适用场景：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>并行适合计算密集型任务，如图像处理、科学计算等&lt;/li>
&lt;li>并发适合I/O密集型任务，如网络请求、文件操作等&lt;/li>
&lt;/ul>
&lt;h1 id="单线程串行运行那么好为什么要一直切换正在运行的任务呢">单线程串行运行那么好，为什么要一直切换正在运行的任务呢？
&lt;/h1>&lt;p>上节课中，展示了一个例子，即使用 Singlethreaded 允许 16 次 &lt;code>Add_100000()&lt;/code> 函数，然后计算总时间。结果是 16 个任务串行执行的时间总和。然后，我们使用 Multithreaded 允许 16 次 &lt;code>Add_100000()&lt;/code> 函数，然后计算总时间。结果是 16 个任务并行执行的时间总和。结果发现 Singlethreaded 的时间比 Multithreaded 的时间还要短。这是因为线程间争锁、切换线程等操作，会消耗额外的时间。&lt;/p>
&lt;p>说明单线程对于性能来说其实是最好的，那么为什么要一直切换正在运行的任务呢？并且我们总是可以预料到，即使是单线程，一直切换任务也会消耗额外的时间。&lt;/p>
&lt;p>这基于下面的两个主要原因：&lt;/p>
&lt;h2 id="1-阻塞更差的响应性">1. 阻塞，更差的响应性
&lt;/h2>&lt;p>当我们串行运行任务时，如果一个任务阻塞了，那么整个程序都会被阻塞。这是因为我们的程序是单线程的，只有一个任务在运行。&lt;/p>
&lt;p>考虑以下一个场景，你在电脑上编写了以下程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后运行它，好了，由于程序串行运行，你的 OS 无法处理你的键盘鼠标输入，也无法绘制屏幕输出，因为这个程序一直在运行，不会停止，导致排队在后面的任务无法执行。&lt;/p>
&lt;p>但是如果我们不停切换任务，尽管一个任务阻塞，一段时间后，我们总是会切换到其他任务，这样就可以保证所有任务都能得到执行（至少有一小段时间），而不会因为一个任务阻塞而导致整个程序无法运行。&lt;/p>
&lt;p>在这个过程中，这个死循环任务被称为**CPU-bound（计算密集型）**任务，因为它一直在占用 CPU，而不会释放。&lt;/p>
&lt;h2 id="2-comsumer-producer-间的协作">2. Comsumer-Producer 间的协作
&lt;/h2>&lt;p>那还有什么其他类型的任务呢？大多数情况下，我们的程序&lt;strong>不是&lt;/strong>在一直不停地做 CPU 计算，而是在等待 I/O 操作完成，比如等待网络请求返回、等待文件读写，甚至等待用户鼠标键盘输入。这些任务被称为**I/O-bound（I/O 密集型）**任务，因为它们需要等待 I/O 操作完成，才能继续执行。&lt;/p>
&lt;p>这些任务等待的对象通常归根结底是&lt;strong>外部资源&lt;/strong>，比如网络、文件、用户输入等。这些资源的读写速度远远慢于 CPU 的计算速度，因此我们的程序在等待这些资源的时候，实际上是在&lt;strong>浪费&lt;/strong> CPU 的时间。如果我们不停切换任务，那么当一个任务等待 I/O 时，我们可以切换到其他任务，让它们继续执行，这样就可以充分利用 CPU 的时间，提高程序的&lt;strong>响应性&lt;/strong>。&lt;/p>
&lt;p>在这个过程中，我们的任务被称为 Comsumer 任务，因为它们需要外设产生的数据；而外设产生数据的任务被称为 Producer 任务，因为它们给 Comsumer 任务提供数据。&lt;/p>
&lt;p>对于 Comsumer-Producer 的协作关系，解决 IO 阻塞是相对简单的。更重要的是，我们需要一种编程模型，简化 Comsumer-Producer 之间的协作，让我们能够更加方便地编写这种类型的程序。而协程就是这样一种编程模型。&lt;/p>
&lt;p>让我们考虑以下一种情况，其中一个 Produecer 一直不停地产生数据 1, 2, 3, 4, 5, &amp;hellip;，而一个 Comsumer 一直不停地消费这些数，然后打印出来。你大概率 100% 会写出以下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是相当糟糕的代码，因为生产者与消费者高度耦合在一起，无法分离。我们希望的是，生产者与消费者能够分离，互不干扰，这样我们可以更加方便地编写这种类型的程序。就像下面一样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue&lt;/span>: &lt;span class="nc">VecDeque&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">VecDeque&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 把产生的数据放到队列中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">consumer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_front&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 从队列中取出数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 如果队列为空，等待一段时间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，生产者与消费者之间就可以分离，互不干扰，我们可以更加方便地编写这种类型的程序。但是这样的代码还是有问题，因为我们的程序是单线程的，如果生产者一直在产生数据，那么消费者就无法执行，反之亦然。我们需要一种编程模型，让我们能够更加方便地编写这种类型的程序，这就是协程。&lt;/p>
&lt;p>让我们考虑这个过程中的问题，即&lt;em>生产者一直在产生数据，那么消费者就无法执行&lt;/em>。因此解决问题的方法就是，让其中一方，在执行到一定程度后，&lt;strong>暂停执行&lt;/strong>，然后切换到另一方执行（调度方处理），这样就可以保证两者都能得到执行。这就是协程的作用。&lt;/p>
&lt;h1 id="implement-a-coroutine">Implement a Coroutine
&lt;/h1>&lt;p>我们知道，要让一个任务能够在中途挂起，然后再恢复，我们需要保存这个任务的&lt;strong>上下文&lt;/strong>，然后再恢复这个任务的上下文。这就是协程的基本原理。&lt;/p>
&lt;h2 id="stackful-coroutine">Stackful Coroutine
&lt;/h2>&lt;p>最基本的实现是 Stackful Coroutine，即我们需要在挂起一个任务时，保存这个任务的&lt;strong>栈&lt;/strong>和完整的&lt;strong>寄存器&lt;/strong>状态。&lt;/p>
&lt;p>为什么要保存栈呢？因为栈保存了函数的局部变量、参数、返回地址等信息，是函数能够&lt;strong>嵌套&lt;/strong>调用的基础。如果我们不保存栈，那么函数退出后，无法返回到调用方，甚至，我们无法保存函数的局部变量等信息，因为这些信息都保存在栈帧中（上两节课的内容）。那为什么要保存寄存器呢？因为寄存器保存了函数的&lt;strong>全局&lt;/strong>状态，比如函数的指令指针、栈指针等信息，是函数能够&lt;strong>恢复&lt;/strong>执行的基础。如果我们不保存寄存器，那么函数退出后，无法恢复到函数的执行状态，因为这些信息都保存在寄存器中。&lt;/p>
&lt;p>但是我们是否有必要保存整个栈呢？答案是当然的，因为我们需要保存函数的&lt;strong>完整&lt;/strong>状态，包括局部变量、参数、返回地址等信息。因为所有嵌套调用的函数都保存在栈中，所以我们需要保存整个栈的状态。&lt;/p>
&lt;p>但是我们是否有必要保存整个寄存器呢？答案是不一定的。&lt;/p>
&lt;p>其实按道理说，我们需要保证在恢复任务后，任务的执行状态和挂起时一样，这就需要保存整个寄存器。但是实际上，我们可以从挂起任务的过程中做一些简化。Stackful Coroutine 挂起一个任务看起来就像调用一个函数一样，我们需要在这个函数中，将任务的状态保存到一个&lt;strong>上下文&lt;/strong>中，然后再恢复任务的时候，将任务的状态从上下文中恢复。这个上下文保存了任务的&lt;strong>完整&lt;/strong>状态，包括栈和寄存器等信息。写成代码就是这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 把产生的数据放到队列中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kr">yield&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 挂起任务，任务从此处暂停，下次也将从此处恢复
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 &lt;code>yield()&lt;/code> 函数就是将任务的状态保存到一个上下文中，然后再恢复任务的时候，将任务的状态从上下文中恢复。这个上下文保存了任务的&lt;strong>完整&lt;/strong>状态，包括栈和寄存器等信息。如果你比较好奇这样的函数长什么样子，可以看看&lt;a class="link" href="https://github.com/caiyih/bakaos/blob/b28d8421f6c030476ca0ae9050098983ac31e58c/kernel/src/trap/user.rs#L126-L142" target="_blank" rel="noopener"
>我的操作系统里的实现&lt;/a>，我选中的这几行是保存操作系统内核协程上下文的代码，其他的则是保存/恢复用户程序上下文的的代码，基本上就是把一些寄存器和调用栈栈顶保存到一个结构体中，然后切换调用栈，然后再恢复的时候，将这些寄存器从结构体中恢复。注意这段代码必须使用汇编代码实现，一是我们需要手动操作指定寄存器，二是编译器生成的函数包含 Prologue 和 Epilogue，会修改我们的调用栈（同样是上两节课的内容）。&lt;/p>
&lt;p>而我们&lt;em>偷懒&lt;/em>的做法就以来于，这是一个函数调用。既然是函数调用，就必须要遵循&lt;strong>Calling Conventions&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>Calling Conventions&lt;/strong>要求将寄存器的保存职责分为两部分：Caller-Save 和 Callee-Save。Caller-Save 负责保存调用者需要保存的寄存器，Callee-Save 负责保存被调用者需要保存的寄存器。&lt;/p>
&lt;p>Caller-saved 要求，Caller在调用一个函数前保存这些寄存器，子过程可能使用这些寄存器的任意或全部，结束后，恢复也是 Caller 的责任。&lt;/p>
&lt;p>而 Callee-saved 要求，Callee 在调用一个函数前保存这些寄存器，子过程可能使用这些寄存器的任意或全部，在回到 Caller 时，Callee 必须保证这些寄存器的值与 Caller 调用自己前一样。&lt;/p>
&lt;p>因此，我们在这个过程中，只需要保存 Caller-saved 寄存器，而不需要保存 Callee-saved 寄存器。这样就可以简化我们的实现，只需要保存 Caller-saved 寄存器，而不需要保存 Callee-saved 寄存器。&lt;/p>
&lt;h2 id="stackless-coroutine">Stackless Coroutine
&lt;/h2>&lt;p>你一定觉得，什么和调用栈切换，保存寄存器，还要用汇编指令进行操作太麻烦了，而且开销还一定特别大。因为我们需要保存整个栈，这个栈可能非常大，而且我们还需要保存整个寄存器，这个寄存器可能非常多。这样的开销是非常大的，而且实现起来也非常复杂。&lt;/p>
&lt;p>你的感觉没错！通常来说，一个栈的大小在，0.5 MB 到 4 MB 之间，而一个寄存器的数量在 16 到 32 个之间。这样的开销是非常大的，而且实现起来也非常复杂。&lt;/p>
&lt;p>考虑一下一个简单的生产者消费者模型，我们的生产者只产生 3 个数据，然后消费者消费这 3 个数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">yield&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">yield&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kr">yield&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以联想到，由于我们的代码是确定的，因此协程被挂起的&lt;em>时机&lt;/em>或者说&lt;em>地点&lt;/em>也是确定的！因此我们其实可以把这个过程视为一个 State Machine，即我们的协程有一个状态，然后根据这个状态，我们执行不同的代码。这样我们就可以实现 Stackless Coroutine。下面的函数是对上面代码所抽象的协程的实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_DATA&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 1，然后返回调用者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_DATA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">数据&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 2，然后返回调用者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_DATA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">数据&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 产生数据 3，然后返回调用者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_DATA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">数据&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>::&lt;span class="no">MAX&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 标识协程过程的结束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 任务结束，没有什么要做的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，我们做一层包装，使得我们的协程看起来更加像一个函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="no">PRODUCER_STATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>::&lt;span class="no">MAX&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">PRODUCER_DATA&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们调用一次 &lt;code>get_data()&lt;/code> 函数，我们的协程就会执行一次，然后返回一个数据。这样我们就实现了 Stackless Coroutine。&lt;/p>
&lt;p>不过我们这个 Stackless Coroutine 仍然非常 basic。倒不是说状态比较少。因为我们的状态是确定的，所以我们可以很容易地将状态转换为代码。事实上，像 .NET 这样的语言就会在编译期就将 Coroutine 方法转换为状态机函数，我们在编写代码时可以直接编写下面的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Fib&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我想说的问题在于，我们的状态仍然是全局的，不与调用上下文关联，导致我们在不同地方想多次调用这个协程时，会出现问题。因此我们需要将状态与调用上下文关联，这就是下面要讲的 Generator。最显而易见的问题是，表示状态机状态的字段以及返回值的字段都是全局的，这样就无法在多个地方调用这个协程，因为这个协程的状态是全局的，不与调用上下文关联。因此我们定义一个 Struct。现在让我们尝试实现上面的 Fibonacci 协程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">State&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Uninitialized&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Finished&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Corrupted&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">FibonacciCoroutine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Fibonacci&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="nc">State&lt;/span>::&lt;span class="n">Uninitialized&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们调用协程时，协程函数事实上需要与协程上下文关联，因此看起来像这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Fibonacci&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">Uninitialized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ???
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">Finished&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样我们就实现了一个与调用上下文关联的协程。现在我们的无栈协程能够处理前两种状态了，也就是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Fib&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是后面的状态就麻烦了。当我们处于 State2 时，我们需要计算下一个数，然后返回。我们需要知道 prev 和 next 的值，但是这两个值是在上一个状态中计算的，我们无法在这个状态中访问这两个值。因此我们需要将这两个值保存到协程上下文中。让我们改造一下我们的状态机，将函数的所有&lt;strong>局部变量&lt;/strong>都保存到协程上下文中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">FibonacciCoroutine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">prev&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们的协程函数就变成了这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FibonacciCoroutine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">Uninitialized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">State3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Watch this!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>::&lt;span class="n">Finished&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者用更加 Type-safe 的方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">FibonacciCoroutine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Uninitialized&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">State3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">prev&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Finished&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FibonacciCoroutine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">Uninitialized&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">Uninitialized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prev&lt;/span>: &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>: &lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">State3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>::&lt;span class="n">Finished&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，我们通过将局部变量保存到协程上下文中，解决了这个问题。这就是无栈协程的基本原理。你可以思考一下，这个过程和有栈协程保存栈和寄存器的过程有什么不同，它们为什么明明看起来这么不同，但是实际上却是一样的。&lt;/p>
&lt;h1 id="iterator">Iterator
&lt;/h1>&lt;p>Iterator 事实上就是一种无栈协程，只是是手动编写的。也并不总是一个显式状态机，但是它的实现原理和无栈协程是一样的。&lt;/p>
&lt;p>这里我给出一个遍历数组和前序遍历二叉树的例子：&lt;/p>
&lt;h2 id="enumerating-an-array">Enumerating an array
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">ArrayIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="preorder-traversal-of-a-binary-tree">Preorder traversal of a binary tree
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">BinaryTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Leaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BinaryTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">BinaryTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">BinaryTreeIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stack&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BinaryTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BinaryTreeIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span> &lt;span class="nc">BinaryTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tree&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BinaryTreeIterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="na">&amp;#39;a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BinaryTree&lt;/span>::&lt;span class="n">Leaf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leaf&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">leaf&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BinaryTree&lt;/span>::&lt;span class="n">Node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="asynchronous-programming">Asynchronous Programming
&lt;/h1>&lt;p>C# 最早引入了异步编程模型和&lt;code>async/await&lt;/code>编程模式，也是将异步应用得最成功的语言。通过 &lt;code>async&lt;/code> 和 &lt;code>await&lt;/code> 关键字，使得异步编程变得非常简单。Rust 也引入了异步编程模型，通过 &lt;code>async&lt;/code> 和 &lt;code>await&lt;/code> 关键字，使得异步编程变得非常简单。&lt;/p>
&lt;p>这里引用 Microsoft .NET team 员工 Stephen Toub 的文章，你可以在这里找到原文：&lt;a class="link" href="https://devblogs.microsoft.com/dotnet/how-async-await-really-works/#async/await-under-the-covers" target="_blank" rel="noopener"
>Stephen Toub - How Async/Await Really Works in C#&lt;/a>。直接从我给的地方开始阅读即可。&lt;/p>
&lt;p>Async/Await 编程模型最大的好处在于，你只需要做很小的修改，就可以将同步代码转换为异步代码。这样就可以非常方便地编写异步代码，而不需要关心异步编程的细节。很小的修改在于：&lt;/p>
&lt;ol>
&lt;li>为方法添加 &lt;code>async&lt;/code> 关键字，表示这个函数是一个异步函数&lt;/li>
&lt;li>将方法中调用的方法全部替换为异步方法，并添加 &lt;code>await&lt;/code> 关键字来等待异步方法的返回值&lt;/li>
&lt;/ol>
&lt;p>然后就结束了！考虑以下两段代码，一眼看上去几乎没有什么区别：&lt;/p>
&lt;p>Synchronous Version:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">CopyStreamToStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stream&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Stream&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">var&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0x1000&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">numRead&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">numRead&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Length&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">destination&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRead&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Asynchronous Version:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">async&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">CopyStreamToStreamAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stream&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Stream&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">var&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0x1000&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">numRead&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">numRead&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReadAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Length&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">!=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numRead&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个过程与无栈协程非常相似，只是我们的状态是确定的，因此我们可以将状态转换为代码。首先我们可以构建以下状态机对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">CopyStreamToStreamAsyncStateMachine&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IAsyncStateMachine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Stream&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Stream&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们编写的方法被替换成一个状态机初始化器，并返回一个状态机对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="n">Task&lt;/span> &lt;span class="n">CopyStreamToStreamAsync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stream&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Stream&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">var&lt;/span> &lt;span class="n">stateMachine&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CopyStreamToStreamAsyncStateMachine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">source&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">destination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">destination&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buffer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0x1000&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">stateMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们调用这个方法时，实际上并不会执行这个方法，而是返回一个状态机对象（C# 有些不同，具有 Fire and forget 的特性，但是这里我们不讨论这个问题）。然后们要调用这个方法时，实际上需要使用 await 关键字。&lt;/p>
&lt;p>这个关键字的作用是，将当前的方法挂起，然后将控制权交给状态机对象，然后状态机对象根据当前的状态，执行相应的代码。这个过程就是异步编程的基本原理。&lt;/p>
&lt;p>也就是说，对于下面的语句&lt;code>await CopyStreamToStreamAsync(src, dst);&lt;/code>，实际上会被转换为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C#" data-lang="C#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stateMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MoveNext&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// 轮询一次状态机，如果有工作，就去工作，如果没有，返回 false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 这里的 yield，就是跟上面的 yield 一样，将当前任务挂起，然后返回调用者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在实际的代码中，就是 return.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stateMachine&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 获取状态机的返回值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就是异步编程的基本原理。你可以看到，异步编程的本质就是无栈协程，只是我们的状态是确定的，因此我们可以将状态转换为代码。这就是异步编程的基本原理。&lt;/p></description></item><item><title>Debug方法概论</title><link>https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/</guid><description>&lt;blockquote>
&lt;p>本文摘自龙芯杯团队赛发布包中的仿真调试说明及《CPU设计实战》&lt;/p>
&lt;/blockquote>
&lt;h2 id="仿真调试">仿真调试
&lt;/h2>&lt;h3 id="仿真调试概述">仿真调试概述
&lt;/h3>&lt;h4 id="写在前面">写在前面
&lt;/h4>&lt;p>&lt;strong>首先的首先! 充分了解你的设计! 了解你的设计! 了解你的设计! 重要的事情说三遍!&lt;/strong>
千万不要在不了解设计功能的情况下进行调试，这样会浪费大量的时间。&lt;/p>
&lt;h4 id="一些小技巧">一些小技巧
&lt;/h4>&lt;h5 id="记录所有信号的波形">记录所有信号的波形
&lt;/h5>&lt;p>在默认设置下, 只有被添加进波形窗口的信号才会被记录, 但是有时候我们需要记录所有信号的波形, 这时候就会发现新加入的波形并没有信号, 不得不重新运行一次仿真才能获得波形, 这样会浪费大量时间, 所以我们希望可以一次性记录所有信号的波形, 这样就可以避免重复运行仿真。
在Vivado工程视图下, 点击左侧&amp;quot;Project Manager&amp;quot; -&amp;gt; &amp;ldquo;Settings&amp;rdquo;, 在弹出的设置界面中选择&amp;quot;Project Settings&amp;quot; -&amp;gt; &amp;ldquo;Simulation&amp;rdquo;, 在右侧的&amp;quot;Simulation&amp;quot;选项卡中, 将&amp;quot;xsim.simulate.log_all_signals&amp;quot;复选框勾选, 这样就可以一次性记录所有信号的波形了。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals.png"
width="1084"
height="967"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals_hu8f1ec6e610cb9adc5904d790d29351e7_72590_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/log_all_signals_hu8f1ec6e610cb9adc5904d790d29351e7_72590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="logAllSignals"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;h5 id="给重要时刻做标记">给重要时刻做标记
&lt;/h5>&lt;p>善用波形窗口的标记功能, 可以&lt;strong>避免回溯哪里出问题的时候浪费大量时间&lt;/strong>。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker.png"
width="726"
height="80"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker_hu5352d61b75d96fd8dd7dc101828d6718_6712_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/marker_hu5352d61b75d96fd8dd7dc101828d6718_6712_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mark"
class="gallery-image"
data-flex-grow="907"
data-flex-basis="2178px"
>&lt;/p>
&lt;h5 id="信号分组">信号分组
&lt;/h5>&lt;p>当你的调试信号非常多的时候, 上下翻看信号十分容易出现混乱, 这时&lt;strong>建议可以将信号分组&lt;/strong>, 比如把同一个模块或者同一个流水级的信号放在同一个group中, 这样可以试调试需求收起或展开。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group.png"
width="604"
height="1309"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group_hu8d98e37f2402e54f84c320183314a5ae_92200_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/new_group_hu8d98e37f2402e54f84c320183314a5ae_92200_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="group"
class="gallery-image"
data-flex-grow="46"
data-flex-basis="110px"
>&lt;/p>
&lt;h5 id="信号搜索">信号搜索
&lt;/h5>&lt;p>如果你需要从某一时刻向前或向后找一个多位宽信号等于某个值的时刻, 除非你十分确定它就在附近, 否则&lt;strong>强烈建议使用值查找方法&lt;/strong>, 而不是手动翻找。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value.png"
width="1495"
height="927"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value_hu5595be86e1f9c57aab119a329a5e47b9_91300_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/find_value_hu5595be86e1f9c57aab119a329a5e47b9_91300_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="search"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/p>
&lt;h4 id="调试思路概述">调试思路概述
&lt;/h4>&lt;p>调试是指在我们设计的一个系统在执行功能出现了错误时，定位出错误的原因。比如我们设计了一个CPU，在运行一个测试程序时发现结果不对，这时就需要进行调试，以便后续进行纠正。可以看到全局上的调试原理是从结果推原因，&lt;em>难点就是定位错误的源头&lt;/em>。
本文档编写时采用的的调试思路是: &lt;strong>时间上先定错，空间上再定错&lt;/strong>。一个设计在执行功能出现错误时，往往是在一个大片的时间段内该设计的电路的执行都不符合预期。“时间上先定错，空间上再定错”具体解释如下:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>时间上先定错&lt;/strong>: 在出错的大片时间段里，定位出源头部分，源头部分是一个较小的时间段。&lt;/li>
&lt;li>&lt;strong>空间上再定错&lt;/strong>: 在源头时间段里，查看设计电路的控制部分和数据通路，定位是哪个信号带来的错误，或者是哪几个信号的组合带来的错误，或者是设计上哪里有疏忽带来的错误。&lt;/li>
&lt;/ol>
&lt;p>比如一个设计的 CPU 在执行测试程序出错了，这个程序是分很多指令的，这些指令是在时间上顺序执行的，我们首先需要找出第一个错误的的指令（也就是时间上定位错误），随后在 CPU 的数据通路和控制信号里定位该指令错误的原因（也就是空间上定位错误）。&lt;br>
相对于空间上的定错，时间上的定错更加困难。特别是对CPU调试而言，更是如此，往往80%的精力都用于时间上定错了。
时间上定错和空间上定错，是一种针对设计的整体调试的指导思想。但当我们仿真发现一个错误时，往往需要先去辨别错误时什么类型，并按照一定的方法追踪错误原因。&lt;/p>
&lt;br/>
&lt;br/>
&lt;p>仿真出错情况按照波形直接观察结果可分为两类:&lt;/p>
&lt;ol>
&lt;li>波形出错: 从波形图里直接观察，而不需要分析电路设计的功能，就能判断的错，比如波形中信号为
“X”。&lt;/li>
&lt;li>逻辑出错: 波形直接观察很正常，但其电路执行结果不符合预期，属于逻辑出错，比如加法器运行结果不
对。
“波形出错”为浅层次的出错，都是很容易查找到原因的。
&lt;strong>“逻辑出错”则是深层次的出错，是真正调试难点，其具体内容也是包罗万象。&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="波形出错">波形出错
&lt;/h3>&lt;p>波形出错，细分又可归为以下几类:&lt;/p>
&lt;ol>
&lt;li>发现信号为“Z”&lt;/li>
&lt;li>发现信号为“X”&lt;/li>
&lt;li>波形停止: 某一时刻开始仿真波形不再输出新内容, 而仿真仍在进行&lt;/li>
&lt;li>越沿采样: 上升沿采样到被采样数据在上升沿后的值&lt;/li>
&lt;li>其他，波形怪异: 仿真波形图显示怪异，与设计的电路功能无关的错误&lt;/li>
&lt;/ol>
&lt;h4 id="信号为z">信号为“Z”
&lt;/h4>&lt;p>“Z”表示高阻，比如电路断路了就是显示为高阻，往往是模块调用的信号未连接导致的信号悬空，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z.png"
width="966"
height="360"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z_hu0302a8bb021e83fa85f5832ed369d40f_95816_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/Z_hu0302a8bb021e83fa85f5832ed369d40f_95816_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="signalZ"
class="gallery-image"
data-flex-grow="268"
data-flex-basis="644px"
>
上图示例中有一下几点比较重要：&lt;/p>
&lt;ol>
&lt;li>信号值为“Z”，为模块调用是信号未连接，未连接包括两种：&lt;strong>显式的未连接&lt;/strong>，如图 1-1(a)中的.c()；&lt;strong>隐式的未连接&lt;/strong>，如图 1-1(a)中模块adder调用时，a端口即未连接。“显式的未连接”一般是人为故意设置的，只针对 output 类接口；“隐式的未连接”则是疏忽，属于代码不规范，往往也是导致信号值为“Z”的主要原因。&lt;/li>
&lt;li>adder 模块里，a 端口未连接，导致 a 为“Z”，但 c 端口也未连接，c 却是固定值。这是因而 a 端口是input，c 端口是 output。output 类接口未连接是母模块里不使用该信号，可能是人为故意设置的。所有的input 类接口被调用时不允许悬空。&lt;/li>
&lt;li>adder 模块里 a信号从 0时刻开始就是“Z”，而 a_r 信号确实在 100ns 左右才变成“Z”的。这是因而 a信号为端口，被调用时就未链接，故从0刻就为“Z”，但a_r信号是内部寄存器，从100ns时刻才使用a信号参与赋值，所以也变成了“Z”。&lt;/li>
&lt;/ol>
&lt;p>针对以上以上几点，我们有一下几点建议：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>RTL编写时注意代码规范，特别是模块调用时，按接口顺序一一对应。&lt;/li>
&lt;li>所有input类接口被调用时不允许悬空。&lt;/li>
&lt;li>一旦发现一个信号为“Z”，向前追踪产生该信号的因子信号，看是哪个为“Z”，一直追踪下去直到追踪到该模块里的input接口，随后进行修正。&lt;/li>
&lt;li>有可能“Z”只出现在向量信号里的某几位上，也是一样的追踪，有可能调用时某个接口存在宽度不匹配也会带来该接口上某些位为“Z”。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="信号为x">信号为“X”
&lt;/h4>&lt;p>“X”表示未赋值，比如寄存器未初始化，多驱动等，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X.png"
width="975"
height="385"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X_hu820c3342f700fa1f4327fccdcefe151c_86807_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/X_hu820c3342f700fa1f4327fccdcefe151c_86807_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="signalX"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="607px"
>
在上图中，由于b_r信号声明后始终未赋值，导致其值为“X”，后续 c信号由于使用了b_r信号，导致其值也为“X”。&lt;/p>
&lt;p>另外，Vivado对于多驱动（2个及2个以上电路单元驱动同一信号），仿真时也会产生“X”信号，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven.png"
width="908"
height="264"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven_hu9e91ad4d2cafe175e1061151f32a8b77_41611_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_driven_hu9e91ad4d2cafe175e1061151f32a8b77_41611_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="multiDrive"
class="gallery-image"
data-flex-grow="343"
data-flex-basis="825px"
>&lt;/p>
&lt;p>这种情况下追寻信号为“X”的原因可能不太好追，可以尝试先进行综合，观察下Critial warning，此时会报出多驱
动的警告, 如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning.png"
width="898"
height="286"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning_hu796207cb53c48ac70860a34b4e3ba662_73328_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/multi_drive_warning_hu796207cb53c48ac70860a34b4e3ba662_73328_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="multiDriveWarning"
class="gallery-image"
data-flex-grow="313"
data-flex-basis="753px"
>&lt;/p>
&lt;p>针对信号为“X”情况，我们有以下几点建议:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>一旦发现仿真错误来自某个信号为“X”，则向前追踪产生该信号的因子信号，看是哪个为“X”，一直追踪下去直到追踪到某个信号未赋值，随后修正。&lt;/li>
&lt;li>如果因子信号都没有为X的，则很可能是多驱动导致的，则综合排查Error和Critical warning。&lt;/li>
&lt;li>寄存器型信号如果没有复位值，在复位阶段其值可能也为“X”，但可能这并不会带来错误。&lt;/li>
&lt;li>“X”和1进行或运算结果为1，“X”和0进行或运行结果为0。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="波形停止">波形停止
&lt;/h4>&lt;p>波形停止是指仿真停止某一时刻，再也无法前进分毫，而仿真却显示不停地在运行，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop.png"
width="933"
height="330"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop_hue96692f6371d58854ce1504d8fa90522_69085_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/wave_stop_hue96692f6371d58854ce1504d8fa90522_69085_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="waveStop"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>另外一种波形停止的情况是tcl报错“FATAL_ERROR: Iteration limit 10000 is reached.”
&lt;br/>&lt;/p>
&lt;p>波形停止基本都是由于“组合环路”导致的，所谓组合环路就是信号A的组合逻辑表达式中某个产生因子为B，而B的组合逻辑表达式中又用到了信号A，如上图源码c_t用到了c，而c又用到c_t。仿真器是在每个周期内计算该周期的所有表达式，组合逻辑循环嵌套，带来的是仿真器的循环计算，导致其无法退出该计算，带来了波形停止的现象。
由于波形停止出现时，并不好排查哪里写出了组合环路，我们建议按以下处理：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>一旦发现波形停止，则先对设计进行综合。&lt;/li>
&lt;li>查看综合产生的Error和Critical warning，并尝试修正。比如上图示例中的组合环路，经过Vivado的综合
后变成了一个多驱动的关键警告，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning.png"
width="944"
height="379"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning_hua7cd5af7436fc2ebcee1517281d00968_118938_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/comb_loop_warning_hua7cd5af7436fc2ebcee1517281d00968_118938_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="combLoopWarning"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="597px"
>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>另外，Vivado工程中有 TCL命令 report_timing_summary，会检查组合环路，并报出检查结果。但很遗憾，对于我们上图的示例，该命令并没有检查出组合环路，很有可能和综合时变成了多驱动有关。&lt;/p>
&lt;h4 id="越沿采样">越沿采样
&lt;/h4>&lt;p>越沿采样在波形出错中是一个隐藏较深的出错，往往可能会和逻辑出错混在一起。初看起来，其波形也是很正常的，而且在发生越沿采样后，往往会再执行很长时间才会出错。因而需要大家先按照逻辑出错去调试，最后如果发现数据采样有些异常，就需要甄别下是否是越沿采样的错误了。
越沿采样是指一个被采样的信号在上升沿采样到了其在上升沿后的值，一般情况下，认为这是一个错误，如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample.png"
width="873"
height="333"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample_hu13c5a16259a195943300ac7d916e7818_65192_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/over_sample_hu13c5a16259a195943300ac7d916e7818_65192_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="overSample"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/p>
&lt;p>上图示例中在105ns时刻，clk上升沿到来，a_r和a_r_r同时变为了 1（也就是a的值）。a_r在105时刻前是0，在 105时刻后是 1。从源码来看，a_r_r是在上升沿采样a_r的值，结果其在 105时刻采样到 a_r为1的值，也就是采样到了a_r在同一上升沿后的值。这就属于越沿采样。
造成这一现象更深层的原因是Verilog里阻塞赋值“=”和非阻塞赋值“&amp;lt;=” 混用。上图源码中a_r采用阻塞赋值，而a_r_r采用非阻塞赋值。
每一次赋值，分为两步：为计算等式左侧的表达式和赋值给右侧的信号，简记为计算和赋值。在一个上升沿到来时，所有由上升沿驱动的信号按以下顺序进行处理：&lt;/p>
&lt;ol>
&lt;li>先处理阻塞赋值，先完成计算和赋值，同一信号完成计算后立马完成赋值。同一 always 块里的阻塞赋值从上到下按顺序串行执行，不同 always 块里的阻塞赋值依赖工具实现确定顺序串行执行，一一完成计算和赋值。&lt;/li>
&lt;li>再进行非阻塞赋值的计算。所有非阻塞赋值其等式左侧的值都同时计算好。&lt;/li>
&lt;li>上升沿结束时，所有非阻塞赋值同时完成最终的赋值动作。
从以上描述可以看到，非阻塞赋值是在上升沿的最后一个时间步里完成处理的，晚于阻塞赋值的处理。所以上图示例中，a_r_r的赋值晚于a_r的赋值，造成了越沿采样的情况。
&lt;br/>&lt;/li>
&lt;/ol>
&lt;p>越沿采样，除非特意设计，一般我们认为是一个设计错误，针对越沿采样，我们有一下几点建议：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>RTL编写时注意代码规范，&lt;strong>所有always写的时序逻辑只允许采用非阻塞赋值&lt;/strong>。&lt;/li>
&lt;li>一旦发现越沿采样的情况，追踪被采样信号，直到追踪到某一个阻塞赋值的信号，随后进行修正。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="波形怪异">波形怪异
&lt;/h4>&lt;p>目前未能想到的波形出错的类型都归为波形怪异。
当出现波形怪异类的错时，需要区分其是仿真工具出错还是RTL代码出错：&lt;/p>
&lt;ol>
&lt;li>观察出错的信号，看其生成因子，如果自我判断 RTL 应该没有，且波形显示确实太怪异（比如始终为
32’hxx?x0x?），则很有可能仿真工具出错。重启电脑甚至重建工程试试。&lt;/li>
&lt;li>实在无法从波形里区分出是什么错。可以尝试先运行综合，看出综合后的 Error、Critical warning 和
warning。其中&lt;strong>Error是必须要修正的&lt;/strong>，Critical warning是强烈建议要修正的，warning是建议能修则修的。&lt;/li>
&lt;li>经常有些不符合规范的代码，Vivado也不会报出 Warning，需要大家仔细复核自己的代码。常见的隐蔽错
误有：对input信号进行了赋值，模块调用信号连接错误，reset信号接成了clock信号，等等。&lt;/li>
&lt;/ol>
&lt;h3 id="逻辑出错">逻辑出错
&lt;/h3>&lt;p>逻辑出错则是包罗万象，错误类型是设计的电路功能有错，此时波形界面看起来是很正常的，我们需要利用波形观察各信号的变化，结合预定的电路功能进行定错。
以数据和控制分开来看，逻辑出错可分为两类：&lt;strong>数据通路出错&lt;/strong>和&lt;strong>控制信号出错&lt;/strong>。其中数据通路通常属于较简单的错，比如加法器算两个加数的和，结果不对；而控制信号出错则往往比较难调，往往是设计时的边角问题考虑不周导致的，比如 CPU 的访存系统出错。这些都是逻辑上出错了，但是很不幸的是，在我们未能定位出该错误的源头时，我们往往不能判断出其是数据通路出错，还是控制信号出错。电路设计者在设计之初应当对整个电路
有较全面的认识和考虑，尽量减少控制信号出错的情况。
逻辑出错时，不同的电路设计有其特定的调试手段，难以总结出统一的调试手段，&lt;strong>但他们的指导思想是一致的：时间上先定错，空间上再定错。&lt;/strong>&lt;/p>
&lt;p>以下我们将针对CPU的逻辑出错调试作简单的说明，主要以流水线CPU为例进行说明。&lt;/p>
&lt;h4 id="定位出错时间源头">定位出错时间源头
&lt;/h4>&lt;p>首先需要各流水级信号分组抓出，比如抓出每级流水里的 PC 值、指令编码和执行结果。
流水级间的进入和退出的控制信号也尤其重要，必须抓出，CPU 初期调试往往都是流水线控制出错了。
&lt;br/>&lt;/p>
&lt;p>具体调试时，可以采用一下方案：&lt;/p>
&lt;ol>
&lt;li>在波形最后出错处，确认取回的指令和 PC 值是对应正确的，也就是确认取指正确，这时就需要对照反汇编程序test.s。&lt;/li>
&lt;li>如果取指不正确，则往前追溯，直到第一个取指正确的地方。追溯的方法也有讲究，有时不能简单一条条指令追溯，因为第一个取指正确的地方可能在很早之前，必要的时候，应跨越一大段指令段，去确认取指是否正确。追溯过程就是程序段不停的压缩，直到找到第一个取指正确的地方，此时往往要用到仿真工具中加标签的方法。&lt;/li>
&lt;li>找到第一条指令正确的地方后，可以先确认该指令执行结果是否正确。随后我们的调试目标是确认时间上第一个出错的地方是在该指令前还是在该指令后。确认方法就需要结合测试程序，比如判断该指令位于的函数，确认该函数是否应该执行，其进入条件是否正确。这里有很多种调试方法，需要根据具体情况具体分析，无法很好的总结分类，需要大家在实践中进行总结。总而言之，需要将测试程序代码和 CPU 结合起来联调。&lt;/li>
&lt;/ol>
&lt;p>以上方法是由后往前追，如果追溯过程中发现无法再追了，则可以考虑由前往后追。这里的“前”就需要大家好好定位了，甚至可能存在运气的成分，一定要确保这个“前”之前的程序执行时对，这样往后追才能追到正确的第一个错误的店，否则，只会将自己引向错误的方法。
时间上的定错，要求大家对func测试程序有一定的了解和掌握。&lt;/p>
&lt;h4 id="定位出错空间源头">定位出错空间源头
&lt;/h4>&lt;p>在完成时间上的定错后，也就是找到一个执行出错的指令后，需要进行空间定错了。&lt;/p>
&lt;p>空间定错时需要大家对CPU微结构有更深入的理解。建议大家以空间划分的视角去理解CPU，特别是流水线CPU，每一流水级都是有对应的部件的，应当理解清楚各流水级的划分。
空间定位时，有两种方法：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>从CPU流水前端向流水后端排查，确认指令在哪个流水级开始出错。首先要排查的就是取指是否正确。&lt;/li>
&lt;li>从 CPU 流水后端向流水前端排查，确认指令是从哪个流水级出错的。首先要排查的就是写回结果是否正确。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="上板调试">上板调试
&lt;/h2>&lt;p>当出现上板和仿真的行为不一致的时候, 调试起来就会变得&lt;strong>非常困难&lt;/strong>, 请按照以下步骤进行调试:&lt;/p>
&lt;h3 id="复核生成下载的bit文件是否正确">复核生成、下载的bit文件是否正确
&lt;/h3>&lt;p>&lt;strong>请再次确认烧录的bit文件是否是最新正确的bit文件。&lt;/strong>
bit文件默认在 \project\loongson.runs\impl_1\ 目录下的 soc_lite_top.bit 文件。&lt;/p>
&lt;h3 id="复核仿真结果是否正确">复核仿真结果是否正确
&lt;/h3>&lt;p>顶层不能出现“X”或“Z”, &lt;strong>特别是控制信号。&lt;/strong>&lt;/p>
&lt;h3 id="检查时序报告">检查时序报告
&lt;/h3>&lt;p>Vivado 界面左侧“IMPLEMENTATION” -&amp;gt; “Open Implemented Design” -&amp;gt; “Report Timing Summary”, 确保所有时序都是正的。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report_hu5eababdfbb666973f739110226b88054_220319_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_report_hu5eababdfbb666973f739110226b88054_220319_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="timingReport"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>如果有负值, 可以点击数值查看具体路径(称为关键路径), 右键点击原理图查看具体路径, 根据路径分割关键路径使得时序满足。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path_hu85a1ef3de81ceb9c6f4aa382d9096c6e_239420_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/timing_path_hu85a1ef3de81ceb9c6f4aa382d9096c6e_239420_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="timingPath"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>一般我们用以下几个方法解决建立时间不满足问题:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>简化逻辑&lt;/li>
&lt;li>插入触发器&lt;/li>
&lt;li>降低时钟频率&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>时序报告阅读教程可&lt;a class="link" href="https/blog.csdn.net/Bunny9__/article/details/119982706" target="_blank" rel="noopener"
>参考&lt;/a>或者自行百度。&lt;/p>
&lt;h3 id="修正warning">修正warning
&lt;/h3>&lt;p>认真排查综合和实现时的Warning，特别是Critical Warning，&lt;em>尽量修正&lt;/em>。
可以使用Vivado界面左侧&amp;quot;RTL ANALYSIS&amp;quot; -&amp;gt; &amp;ldquo;Run Linter&amp;quot;查看Linter Warning。
&lt;img src="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning.png"
width="2560"
height="1380"
srcset="https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning_huc6b68afd4e5a229faa568f5c009a3446_238019_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/debug%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/assets/linter_warning_huc6b68afd4e5a229faa568f5c009a3446_238019_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="lintWarning"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h3 id="检查rtl代码">检查RTL代码
&lt;/h3>&lt;p>认真排查RTL代码规范，避免多驱动、阻塞赋值乱用、模块端口乱接、时钟复位信号接错&amp;hellip;&amp;hellip;&lt;/p>
&lt;h3 id="调整随机种子复现上板错误">调整随机种子复现上板错误
&lt;/h3>&lt;p>如果上板时发现在某一些随机种子下测试通过，在另一些随机种子情况下出错，请确认出错的随机种子，修改 rtCONFREG/confreg.v 里的 RANDOM_SEED 的定义，改为出错时的随机种子，随后进行仿真：如果有错，则调试；如果发现仿真没错，则在上板时找寻下一个出错的随机种子，同样设定好RANDOM_SEED后进行仿真，如果还是没错则转下一步。
最后的功能测试通过的要求是：上板后，&lt;em>随意切换&lt;/em>拨码开关，均不会出错。&lt;/p>
&lt;h3 id="使用逻辑分析仪进行在线调试">使用逻辑分析仪进行在线调试
&lt;/h3>&lt;p>&lt;strong>请先重点排查其他问题，最后再使用在线调试的方法&lt;/strong>
&lt;del>这个真的超级超级麻烦&lt;/del>
请&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-chipscope-debug" target="_blank" rel="noopener"
>参考&lt;/a>
&lt;br/>&lt;/p>
&lt;p>如果还是解决不了直接转下一步&lt;/p>
&lt;h3 id="反思">反思
&lt;/h3>&lt;p>&lt;strong>真的，现在除了反思还能干什么？&lt;/strong>&lt;/p></description></item><item><title>功能测试</title><link>https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</guid><description>&lt;h2 id="基于trace比对的调试框架">基于trace比对的调试框架
&lt;/h2>&lt;p>在调试C程序的时候应该都使用过单步调试这种调试手段。在“慢动作”运行程序的每一行代码的情况下，能够及时看到每一行代码的运行行为是否符合预期，从而能够及时定位到出错点。在实验开发环境中提供的这套基于trace比对的调试辅助手段，借鉴的就是这种“单步调试”的策略。&lt;/p>
&lt;p>其具体实现方式是：我们先用一个已知的功能上是正确的CPU运行一遍测试指令序列，将每条指令的PC和写寄存器的信息记录下，记为golden_trace；然后在验证myCPU的时候运行相同的指令序列，在myCPU每条指令写寄存器的时候，将myCPU中的PC和写寄存器的信息同之前的golden_trace进行比对，如果不一样，那么立刻报错并停止仿真。&lt;/p>
&lt;p>简单的来说, golden_trace就是参考答案, 通过比对myCPU的运行结果和golden_trace的运行结果, 来判断myCPU功能的正确性。&lt;/p>
&lt;h2 id="功能测试环境使用方法">功能测试环境使用方法
&lt;/h2>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local/tree/ee7dd7e5f1d12a9f94788a279f096b25407d9d0b" target="_blank" rel="noopener"
>基于NSCSCC2024 团体赛功能测试&lt;/a>
它是&lt;a class="link" href="https://gitee.com/loongson-edu/cdp_ede_local" target="_blank" rel="noopener"
>CPU设计实战&amp;ndash;Loongarch版&lt;/a>的实验环境的exp16&lt;/p>
&lt;/blockquote>
&lt;h3 id="开发环境组织结构介绍">开发环境组织结构介绍
&lt;/h3>&lt;p>整个实验开发环境的基本目录结构及各部分功能简介如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">功能验证测试程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">编译生成的二进制测试程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">coe&lt;/span> &lt;span class="n">测试程序对应上板用的二进制纯数据文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mif&lt;/span> &lt;span class="n">测试程序对应功能仿真用的二进制纯数据文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">inst_ram&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">测试程序汇编代码说明&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">gettrace&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">trace文件生成工程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">gettrace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">xpr&lt;/span> &lt;span class="n">生成golden_trace的Vivado工程文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">golden_trace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="n">生成的golden_trace文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">myCPU&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">待验证的CPU设计代码目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span>&lt;span class="n">soc_verify&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">soc_axi&lt;/span> &lt;span class="n">所现的CPU的SoC验证环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">rtl&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">验证用SoC设计代码目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">soc_lite_top&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">SoC的顶层文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">CONFREG&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">confreg模块&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">用于访问实验板上的LED灯&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">拨码开关等外设&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">xilinx_ip&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">定制的Xilinx&lt;/span> &lt;span class="n">IP&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">包含clk_pll&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">inst_ram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">testbench&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">功能仿真验证平台&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span>&lt;span class="n">mycpu_tb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">功能仿真顶层&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">该模块会抓取debug信息与golden_trace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt进行比对&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">run_vivado&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">Vivado工程的运行目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">constraints&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">Vivado工程设计的约束&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|--&lt;/span>&lt;span class="n">create_project&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tcl&lt;/span> &lt;span class="n">创建Vivado工程的tcl脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="soc_lite片上系统结构介绍">SoC_Lite片上系统结构介绍
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure.png"
width="578"
height="361"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure_hu1184322f6376438a13ca0fde4155d650_15429_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/soc_lite_structure_hu1184322f6376438a13ca0fde4155d650_15429_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="soc_lite"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;center>用于验证myCPU的片上系统&lt;/center>
&lt;ul>
&lt;li>PLL: 锁相环，用于产生时钟信号&lt;/li>
&lt;li>iram: 指令内存，用于存放测试程序&lt;/li>
&lt;li>dram: 数据内存，用于存放数据&lt;/li>
&lt;li>confreg: 外设控制器，用于控制LED灯、拨码开关等外设&lt;/li>
&lt;li>mycpu: 待验证的CPU设计&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>因为在LoongArch指令系统架构下，所有I/O设备的寄存器都是采用memory mapped方式访问的。我们这里实现的confreg也不例外。Memory mapped的访问方式意味I/O设备中的寄存器各自都有一个唯一内存编址，所以CPU可以通过load、store指令对其进行访问。&lt;/p>
&lt;/blockquote>
&lt;h3 id="生成golden_trace">生成golden_trace
&lt;/h3>&lt;h4 id="func功能测试程序">func功能测试程序
&lt;/h4>&lt;p>&lt;strong>以下涉及Linux编译的部分不要求大家初期掌握, 包里已经提供了编译好的最终文件&lt;/strong>&lt;/p>
&lt;h5 id="func测试程序说明">func测试程序说明
&lt;/h5>&lt;p>func程序分为func/start.S和func/inst/*.S，都是LoongArch32汇编程序:&lt;/p>
&lt;ol>
&lt;li>func/start.S ：主函数，执行必要的启动初始化后调用func/inst/下的各汇编程序。&lt;/li>
&lt;li>func/inst/*.S ：针对每条指令或功能点有一个汇编测试程序。&lt;/li>
&lt;li>func/include/*.h ：测试程序的配置信息和宏定义。&lt;/li>
&lt;/ol>
&lt;p>主函数func/start.S中主体部分代码如下，分为三大部分，具体查看注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是设置程序开始的LED灯和数码管显示，单色LED全灭，双色LED灯一红一绿。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a0, LED_RG1_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a1, LED_RG0_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a2, LED_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (s1, NUM_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t1, 0x0002)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t2, 0x0001)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t3, 0x0000ffff)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lu12i.w s3, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a0, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t2, a1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t3, a2, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w s3, s1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是运行各功能点测试，每个测试完执行idle_1s等待一段时间，且数码管显示加1。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inst_test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl n1_lu12i_w_test #lu12i.w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl idle_1s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl n2_add_w_test #add.w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bl idle_1s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #以下是显示测试结果，PASS则双色LED灯亮两个绿色，单色LED不亮；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #Fail则双色LED灯亮两个红色，单色LED灯全亮。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test_end:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (s0, TEST_NUM)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> beq s0, s3, 1f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a0, LED_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a1, LED_RG1_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (a2, LED_RG0_ADDR)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LI (t1, 0x0002)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w zero, a0, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a1, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t1, a2, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>inst/ 目录下每个功能点的测试代码程序名为n#_*_test.S，其中“#”为编号，如有15个功能点测试，则从n1编号到n15。每个功能点的测试，其测试代码大致如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> LEAF(n1_lu12i_w_test)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s0, s0 ,1 #加载功能点编号s0++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s2, zero, 0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lu12i.w t2, 0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###test inst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t1, zero, 0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TEST_LU12I_W(0x00000, 0x00000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...... #测试程序，省略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TEST_LU12I_W(0xff0af, 0xff0a0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###detect exception
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne s2, zero, inst_error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###score ++ #s3存放功能测试计分，每通过一个功能点测试，则+1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w s3, s3, 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ###output (s0&amp;lt;&amp;lt;24)|s3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inst_error:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t1, s0, 24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> or t0, t1, s3 #s0高8位为功能点编号，s3低8位为通过功能点数，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #相或结果显示到数码管上。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> st.w t0, s1, 0 #s1存放数码管地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jirl zero, ra, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> END(n1_lu12i_w_test)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上可以看到，测试程序的行为是：当通过第一个功能测试后，数码管会显示0x0100_0001，随后执行idle_1s；执行第二个功能点测试，再次通过数码管会显示0x0200_0002，执行idle_1s……依次类推。显示，每个功能点测试通过，应当数码管高8位和低8位永远一样。如果中途数码管显示从0x0500_0005变成了0x0600_0005，则说明运行第六个功能点测试出错。&lt;/p>
&lt;p>最后来看 &lt;code>start.S&lt;/code> 文件中 &lt;code>idle_1s&lt;/code> 函数的代码，其使用一个循环来暂停测试程序执行的。其主体部分代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> idle_1s:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #initial t3 //读取confreg模块里的switch_interleave的值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ld.w t2, t0, 0 #switch_interleave: {switch[7],1&amp;#39;b0, switch[6],1&amp;#39;b0...switch[0],1&amp;#39;b0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor t2, t2, t1 //拨码开关拨上为0，故要xor来取反
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t3, t2, 9 #t3 = switch interleave &amp;lt;&amp;lt; 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sub1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t3, t3, -1 //t3累减1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #select min{t3, switch_interleave} //获取t3和当前switch_interleave的最小值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ld.w t2, t0, 0 #switch_interleave:{switch[7],1&amp;#39;b0,switch[6],1&amp;#39;b0...switch[0],1&amp;#39;b0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xor t2, t2, t1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slli.w t2, t2, 9 #switch interleave &amp;lt;&amp;lt; 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4 //以上ld.w-xor-slli.w三条指令再次获取switch_interleave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sltu t4, t3, t2 //无符号比大小，如果t3比switch_interleave 小则置t4=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne t4, zero, 1f //t4!=0,意味着t3比switch_interleave大，则跳1f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addi.w t3, t2, 0 //否则，将t3赋值为更小的switch_interleave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOP4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bne t3,zero, sub1 //如果t3没有减到0，则返回循环开头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jirl zero, ra, 0 //结束idle_1s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从以上代码可以看到，idle_1s 会依据拨码开关的状态设定循环次数。在仿真环境下，我们会模拟拨码开关为全拨下的状态，以使 idle_1s 循环次数最小。之所以这样设置，是因为 FPGA 运行远远快于仿真的速度，假设CPU运行一个程序需要106个CPU周期，再假设CPU在FPGA上运行频率为10MHz，那其在FPGA上运行完一个程序只需要0.1s；同样，我们仿真运行这个程序，假设我们仿真设置的CPU运行频率也是10MHz，那我们仿真运行完这个程序也是只需要0.1s吗？显然这是不可能的，仿真是软件模拟CPU运行情况的，也就是它要模拟每个周期CPU内部的变化，运行完这一个程序，需要模拟106个CPU周期。我们在一台2016年产的主流X86台式机上进行实测发现，Vivado自带的Xsim仿真器运行SoC_Lite的仿真，每模拟一个周期大约需要600us，这意味着Xsim上模拟106个周期所花费的实际时间约10分钟。&lt;/p>
&lt;p>同一程序，运行仿真测试大约需要10分钟，而在FPGA上运行只需要0.1秒（甚至更短，比如CPU运行在50MHz主频则运行完程序只需要0.02s）。所以我们如果不控制好仿真运行时的 idle_1s 函数，则我们可能会陷入到idle_1s长时间等待中；类似的，如果我们上板时设定 idle_1s 函数很短（比如拨码开关全拨下），则 idle_1s 时间太短导致我们无法看到数码管累加的效果&lt;/p>
&lt;p>&lt;strong>如果大家在自实现CPU上板运行过程中，发现数码管累加跳动太慢，请调小拨码开关代表的数值；如果发现数码管累加跳动太快，请调大拨码开关代表的数值。&lt;/strong>&lt;/p>
&lt;h5 id="loongarch-gcc交叉编译工具的安装">LoongArch-GCC交叉编译工具的安装
&lt;/h5>&lt;p>自行编译func程序需要使用LoongArch32R的GCC交叉编译工具。该工具链的安装可以从 &lt;a class="link" href="https://gitee.com/loongson-edu/la32r-toolchains" target="_blank" rel="noopener"
>https://gitee.com/loongson-edu/la32r-toolchains&lt;/a> 下载源码自行编译、安装，也可以直接从 &lt;a class="link" href="https://gitee.com/loongson-edu/la32r-toolchains/releases" target="_blank" rel="noopener"
>https://gitee.com/loongson-edu/la32r-toolchains/releases&lt;/a> 下安装包。我们这里主要介绍后一种方式的安装步骤。&lt;/p>
&lt;p>下载安装包时请根据所用机器是X86还是LoongArch选择对应的版本。下载压缩包 loongarch32r-linux-gnusf-*.tar.gz 至Linux操作系统自身的文件系统中。需要特别提醒的是，目前X86版本LoongArch32R的GCC交叉编译工具只支持64位系统（在系统下运行uname -a命令显示架构为x86_64的）。接下来：&lt;/p>
&lt;p>（1）打开一个terminal，进入压缩包所在目录，进行解压：&lt;/p>
&lt;pre>&lt;code>$ sudo tar zxvf loongarch32r-linux-gnusf-*.tar.gz -C /opt/
&lt;/code>&lt;/pre>
&lt;p>（2）确保目录/opt/loongarch32r-linux-gnusf-*/bin/存在，随后执行：&lt;/p>
&lt;pre>&lt;code>$ echo “export PATH=/opt/loongarch32r-linux-gnusf-*/bin/:$PATH” &amp;gt;&amp;gt; ~/.bashrc
&lt;/code>&lt;/pre>
&lt;p>（3）重新打开一个terminal，输入loongarch32然后敲击tab键，如果能够-linux-gnusf-之类的补全，就说明工具链已经安装成功。此时可以编写一个hello.c 然后用工具链进行编译看其是否可以工作。&lt;/p>
&lt;pre>&lt;code>$ loongarch32r-linux-gnusf-gcc hello.c
&lt;/code>&lt;/pre>
&lt;h5 id="func测试程序编译说明">func测试程序编译说明
&lt;/h5>&lt;h6 id="编译脚本">编译脚本
&lt;/h6>&lt;p>func测试程序的编译脚本为验证平台目录下的func/Makefile，对Makefile了解的可以去看下该脚本。该脚本支持以下命令：&lt;/p>
&lt;ul>
&lt;li>make help ：查看帮助信息&lt;/li>
&lt;li>make ：编译得到仿真下使用的结果&lt;/li>
&lt;li>make clean ：删除*.o，*.a和./obj/目录&lt;/li>
&lt;/ul>
&lt;h6 id="编译结果">编译结果
&lt;/h6>&lt;p>func测试程序编译结果位于func/obj/下, 主要会用到的文件及作用如下:&lt;/p>
&lt;ul>
&lt;li>inst_ram.coe ：定制inst_ram所需的数据文件&lt;/li>
&lt;li>inst_ram.mif ：仿真时inst_ram读取的数据文件&lt;/li>
&lt;li>test.s : 对main.elf反汇编得到的文件&lt;/li>
&lt;/ul>
&lt;h5 id="golden_trace生成">golden_trace生成
&lt;/h5>&lt;p>进入 gettrace/ 目录，打开gettrace.xpr工程文件，运行仿真，自动生成参考结果golden_trace.txt。
重点关注此时inst_ram加载的确实是前一个步骤编译出的结果。
要等仿真运行完成，golden_trace.txt才有完整的内容。&lt;/p>
&lt;h3 id="验证自己的cpu">验证自己的CPU
&lt;/h3>&lt;h4 id="cpu对外总线接口">CPU对外总线接口
&lt;/h4>&lt;p>一般来说我们根据由易到难挨个实现SRAM接口, 带握手的SRAM接口, AXI总线接口, 这里我们以SRAM接口为例:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">名称&lt;/th>
&lt;th style="text-align:center">位宽&lt;/th>
&lt;th style="text-align:center">方向&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">clk&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">时钟信号, 来自clk_pll的时钟输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">resetn&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">复位信号, 低电平同步复位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">int&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">中断信号, 8个硬件中断信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_en&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_wen&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存字节写使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_addr&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存地址, 字节寻址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">指令内存写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">inst_sram_rdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">指令内存读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_en&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_wen&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存字节写使能信号, 高电平有效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_addr&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存地址, 字节寻址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">数据内存写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">data_sram_rdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">input&lt;/td>
&lt;td style="text-align:left">数据内存读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_pc&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级（多周期最后一级）的PC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_we&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的写使能，为字节写使能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_wnum&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的目的寄存器号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">debug_wb_rf_wdata&lt;/td>
&lt;td style="text-align:center">32&lt;/td>
&lt;td style="text-align:center">output&lt;/td>
&lt;td style="text-align:left">写回级写寄存器堆(regfiles)的写数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="打开vivado工程">打开Vivado工程
&lt;/h4>&lt;p>测试平台采用tcl脚本来创建工程, 方法如下:&lt;/p>
&lt;ol>
&lt;li>启动Vivado&lt;/li>
&lt;li>点击最下方的&amp;quot;Tcl Console&amp;quot;标签&lt;/li>
&lt;li>cd到 /soc_verify/soc_axi/run_vivado/ 目录下&lt;/li>
&lt;li>输入 source create_project.tcl 创建Vivado工程&lt;/li>
&lt;li>如果你的CPU设计代码在 /myCPU/ 目录下, 则会自动导入到工程中, 请检查是否导入成功, 如未成功请手动导入&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>更具体可&lt;a class="link" href="https://bookdown.org/loongson/_book3/appendix-vivado-advanced-usage.html#sec-vivado-tcl-create-project" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="func测试验证结果判断">func测试验证结果判断
&lt;/h4>&lt;h5 id="仿真结果正确判断">仿真结果正确判断
&lt;/h5>&lt;p>仿真结果正确判断有两种方法。&lt;/p>
&lt;p>第一种方法，也是最简单的，就是看Vivado控制台打印&lt;em>Error&lt;/em>还是&lt;em>PASS&lt;/em>。正确的控制台打印信息如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info.png"
width="729"
height="381"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info_hu18ab18c0ae90476d981631443431c0df_145626_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/simulation_pass_console_info_hu18ab18c0ae90476d981631443431c0df_145626_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="funcPass"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="459px"
>&lt;/p>
&lt;p>第二种方法，是通过波形窗口观察程序执行结果func正确的执行行为，抓取confreg模块的信号led_data、led_rg0_data、led_rg1_data、num_data：&lt;/p>
&lt;ol>
&lt;li>开始，单色LED写全1表示全灭，双色LED写0x1和0x2表示一红一绿，数码写全0；&lt;/li>
&lt;li>执行过程中，单色LED全灭，双色LED灯一红一绿，数码管高8位和低8位同步累加；&lt;/li>
&lt;li>结束时，单色LED写全1表示全灭，双色LED均写0x1表示亮两绿，数码管高8位和低8位数值（十六进制）相同，对应测试功能点数目。
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave.png"
width="664"
height="940"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave_huce95865f682a9f873e47f2370baa81b8_274222_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_simulation_wave_huce95865f682a9f873e47f2370baa81b8_274222_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="funcWave"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/li>
&lt;/ol>
&lt;h5 id="上板验证结果正确判断">上板验证结果正确判断
&lt;/h5>&lt;p>func正确的执行行为是：&lt;/p>
&lt;ol>
&lt;li>开始，单色LED全灭，双色LED灯一红一绿，数码管显示全0；&lt;/li>
&lt;li>执行过程中，单色LED全灭，双色LED灯一红一绿，数码管高8位和低8位同步累加；&lt;/li>
&lt;li>结束时，单色LED全灭，双色LED灯亮两绿，数码管高8位和低8位数值相同，对应测试功能点数目。&lt;/li>
&lt;/ol>
&lt;p>如果func执行过程中出错了，则数码管高8位和低8位第一次不同处即为测试出错的功能点编号(&lt;strong>只要不同步变化即有错误&lt;/strong>)，且最后的结果是单色LED全亮，双色LED灯亮两红，数码管高8位和低8位数值不同。&lt;/p>
&lt;p>最后FPGA验证通过的效果如下图:
&lt;img src="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result.png"
width="946"
height="753"
srcset="https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result_hu0dd7af1b6647ce7e7124b01ff91881eb_1489086_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/assets/right_fpga_result_hu0dd7af1b6647ce7e7124b01ff91881eb_1489086_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="fpgaPass"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>
&lt;br/>&lt;/p>
&lt;h6 id="拨码开关的作用">拨码开关的作用
&lt;/h6>&lt;p>1.复位后，拨码开关控制wait_1s的循环次数，也就是控制数码管累加的速度。每两个功能点之间会穿插一个wait_1s函数，wait_1s通过一段循环完成计时的功能：在上板时，wait_1s 循环次数由拨码开关控制，可设置循环次数为 （0~0xaaaa）*$2^9$ 。请在复位后，通过拨码开关选择合理的wait_1s延时。
&lt;br/>&lt;/p>
&lt;p>2.复位期间，拨码开关控制随机种子（只对 soc_axi_func 环境有用），也就是axi_ram访问随机延迟的初始种子。
上板时，按下复位键，会自动采样8个拨码开关的值，传为初始随机种子，且会显示初始随机种子低16位到单色 LED 灯上。
上板时随机种子与拨码开关对应关系如下表，需要注意的时延迟类型依据拨码开关的值分为三大类：长延迟、短延迟和无延迟类型。在上板运行时都应当覆盖到这三类延迟类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">拨码开关状态&lt;/th>
&lt;th style="text-align:center">LED显示&lt;/th>
&lt;th style="text-align:center">初始种子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">拨上为1&lt;/td>
&lt;td style="text-align:center">每个拨码开关对应两个led&lt;/td>
&lt;td style="text-align:center">长延迟:[7:0]!=8&amp;rsquo;hff, 短延迟:[7:0]=8&amp;rsquo;hff, 无延迟:[15:0]==16&amp;rsquo;h00ff&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h00&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h0000&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h0000}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h01&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h0003&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h0003}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h02&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h000c&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h000c}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;h03&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;h000f&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;h000f}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;td style="text-align:center">&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">8&amp;rsquo;hff&lt;/td>
&lt;td style="text-align:center">16&amp;rsquo;hffff&lt;/td>
&lt;td style="text-align:center">{7&amp;rsquo;b1010101, 16&amp;rsquo;hffff}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="进阶-chiplab的difftest测试平台">进阶: chiplab的difftest测试平台
&lt;/h2>&lt;p>difftest相比于trace比对的调试平台更加强大, 它将相同的指令分别给设计核核参考核执行, 之后比对所有的通用寄存器和csr寄存器的值，如果完全相同则认为设计核执行正确。&lt;/p>
&lt;p>在trace比对中, 有些转移指令和store指令不写寄存器, 此时如果发生错误并不会立即停止仿真，而是等到下一条写寄存器的指令才会发现错误。
而在difftest中则不会有这个问题，一旦store指令中的物理地址和存储数据与参考核不同，也会立即暂停仿真，以此来尽早定位错误。&lt;/p>
&lt;blockquote>
&lt;p>具体使用可&lt;a class="link" href="https://chiplab.readthedocs.io/zh/latest/Simulation/difftest.html" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>[OS Week6] 内存管理 2 &amp; Rust 所有权</title><link>https://loongson-neuq.pages.dev/p/os-week6-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-2-rust-%E6%89%80%E6%9C%89%E6%9D%83/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week6-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-2-rust-%E6%89%80%E6%9C%89%E6%9D%83/</guid><description>&lt;h1 id="关于课程计划">关于课程计划
&lt;/h1>&lt;p>由于临近期末（一月初考试），同时我们（助教）最近在编写操作系统（可以看到我又换回了 Arch Linux 进行工作）上占用大量时间，所以我们决定尽快结束课程。预计下一周是最后一周课程。计划下周讲解协程及 Async/Await 等内容。原计划第 13 周讲解的 Dynamic Dispatch 被取消。因为大家对 OOP 的理解不够深入，而且 Rust 的 OOP 与传统 OOP 有很大不同，所以我们决定取消这一部分内容。&lt;/p>
&lt;p>同时，Dynamic Dispatch 也不是原计划的内容，原计划的内容仍然会在下周讲解完毕。&lt;/p>
&lt;h2 id="关于作业">关于作业
&lt;/h2>&lt;p>从本周开始，不再布置作业。仅有最后一份期末作业，涉及到本学期所有的内容以及编写操作系统所需要的所有基本知识。Rustlings 和期末作业的参考答案我已经完成，下周一并发布。期末作业大家自行完成即可，不需要提交。有疑问还是请及时联系助教。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Loongson-neuq/2024-neuq-os-2024-neuq-final-assignment-1" target="_blank" rel="noopener"
>https://github.com/Loongson-neuq/2024-neuq-os-2024-neuq-final-assignment-1&lt;/a>&lt;/p>
&lt;p>目前这份作业中涉及的内容只有以下部分还没有讲解：&lt;/p>
&lt;ul>
&lt;li>系统调用&lt;/li>
&lt;li>锁/原子操作&lt;/li>
&lt;li>协程&lt;/li>
&lt;li>Async/Await&lt;/li>
&lt;/ul>
&lt;p>前三个部分会在这节课讲解完毕，协程和 Async/Await 会在下周讲解。&lt;/p>
&lt;h3 id="后面的路怎么走">后面的路怎么走？
&lt;/h3>&lt;p>有很多同学很迷茫，总是问我学完了能会什么，或者学完了就能编写操作系统了吗？&lt;/p>
&lt;p>我可以负责任地告诉大家，大部分同学仍然离操作系统编写很远。但是知识是日积月累而不是一蹴而就的。你要清楚一个事实，操作系统是一个非常庞大的系统，涉及到的知识非常多，而且很多知识都是非常深入的。你花的几个月的间断的学习，凭什么能超过别人数年甚至数十年的积累？更别说别人经验比你丰富，基础比你扎实，会的知识面比你广泛。&lt;/p>
&lt;p>再问自己一些问题：&lt;/p>
&lt;ul>
&lt;li>你有丰富的软件工程经验吗？ 你能写出高质量的代码吗？高质量意味者代码可读性好，可维护性好，性能好，安全性好。你能写出这样的代码吗？&lt;/li>
&lt;li>你有大型项目的经验吗？你最多的一个项目写过几万行代码？你有没有一个人参与过一个项目的设计，开发，测试，部署，维护的全过程？&lt;/li>
&lt;li>你有多少编程语言的经验？你有多少编程范式的经验？你有多少编程工具的经验？&lt;/li>
&lt;/ul>
&lt;p>这些只是编程的基础，编写操作系统，要求你的编程基础非常扎实，更需要的是对操作系统原理的深入理解，对硬件的深入理解，对软硬件协同的深入理解。操作系统是软件与硬件高度耦合的产物。你既要对软件有深入理解，又要对硬件有深入理解。你要知道你的代码是如何在硬件上运行的，你的代码是如何与硬件交互的。&lt;/p>
&lt;p>对软件的深入理解意味着你要对编程语言有深入理解，你看着高级语言的代码，就能知道它是如何在底层运行的。会执行哪些指令，会访问哪些内存，会调用哪些系统调用。&lt;/p>
&lt;p>对硬件的深入理解意味着你要对计算机组成原理有深入理解，你要知道计算机是如何工作的，CPU 是如何工作的，内存是如何工作的，外设是如何工作的。对软硬件协同的深入理解意味着你要知道操作系统是如何管理硬件的，是如何与硬件交互的，是如何保证软硬件的正确协同工作的。&lt;/p>
&lt;p>那是不是就搞不出来了呢？当然不是。你需要慢慢积累，慢慢学习。并且我同样可以负责任地告诉你，学习操作系统是提升底层编程能力的最快途径。只是需要一定知识基础的。&lt;/p>
&lt;p>**关于 rcore 实验，如果你已经明显感觉到自己难以理解某些操作系统的概念，我的建议是立即停止。以提升软件工程能力为主，等你有了一定的软件工程能力，再回过头来学习操作系统，会事半功倍。**否则目前的学习只会让你感到困惑，所谓的学习也只是抄代码，能学到的东西非常有限。&lt;/p>
&lt;p>最早的计划是要包含对软件工程的训练的，要求大家独立完成一个大型项目，同时包含设计模式的训练和课程，考虑到大家还是比较急于学习操作系统，所以这部分内容被取消了，只保留了编写操作系统需要的主线知识。&lt;/p>
&lt;h2 id="上次作业">上次作业
&lt;/h2>&lt;p>上次的作业的完成的情况我就不多说了，大家自己清楚，也没有人来问问题。我只能认为大家可能还有些困难，那这节课我来带着大家完成，顺便讲解一下如何手动使用系统调用。&lt;/p>
&lt;h3 id="简答题">简答题
&lt;/h3>&lt;p>关于简答题，大部分都是上次课件里的内容，直接参考课件即可。这里我只讲解一下一些补充内容。&lt;/p>
&lt;h4 id="手动使用-brk-系统调用">手动使用 brk 系统调用
&lt;/h4>&lt;p>题目：&amp;ldquo;尝试使用 brk 或 sbrk 分配 1024 字节，并尝试访问第 1024 ~ 4095 字节的内存，说明为什么可以访问这些内存？&amp;rdquo;&lt;/p>
&lt;p>这里以 brk 系统调用为例，讲解一下系统调用是什么，如何使用系统调用。&lt;/p>
&lt;h5 id="系统调用">系统调用
&lt;/h5>&lt;p>系统调用是操作系统提供给用户程序的接口，用户程序通过系统调用可以请求操作系统提供服务。系统调用是用户态程序与内核态程序之间的桥梁。用户态程序通过系统调用请求内核态程序执行某些操作，比如读写文件，分配内存等。&lt;/p>
&lt;p>看着比较抽象？实际上，就跟你调用外部库的一个函数一样。只不过这个函数是操作系统提供的，你需要通过一些&lt;em>特殊&lt;/em>的方式调用。&lt;/p>
&lt;p>下面我们从另一个角度，来看看系统调用到底是怎么&lt;em>特殊&lt;/em>的。&lt;/p>
&lt;p>系统调用是操作系统的一种&lt;strong>异常&lt;/strong>。而&lt;strong>异常&lt;/strong>和&lt;strong>中断&lt;/strong>在操作系统中都属于&lt;strong>Trap&lt;/strong>。Trap 是一种异步事件，它会打断 CPU 的正常执行流程，转而执行操作系统内核中的一段代码。这段代码就是系统调用的实现。&lt;/p>
&lt;p>本质上来说，当&lt;strong>Trap&lt;/strong>发生的一瞬间，会发生一下改变：&lt;/p>
&lt;ul>
&lt;li>CPU特权级被提升，从用户态提升到内核态 x86 中是从 ring3 提升到 ring0。RISC-V 中是从 U 模式提升到 S 模式。&lt;/li>
&lt;li>PC 指针被修改，指向内核态的代码。PC 指针是 CPU 核心当前/或下一条执行指令的地址，操作它就是操作 CPU 的执行流程。&lt;/li>
&lt;/ul>
&lt;p>这两者是同时且瞬间发生的，从发生异常的指令到内核态代码执行，这个过程是没有空隙的，是瞬间完成的。&lt;/p>
&lt;p>当&lt;strong>Trap&lt;/strong>发生后，也就是 PC 来到了操作系统的代码，操作系统会首先保存用户态的寄存器状态，然后根据 Trap 的类型，执行相应的操作。&lt;/p>
&lt;p>如果是系统调用，操作系统会根据用户传递的参数，执行&lt;strong>相应的操作&lt;/strong>，然后将结果返回给用户程序。这个过程是一个&lt;strong>系统调用&lt;/strong>的过程。例如 brk 就是给用户程序分配内存的系统调用，exit 是退出程序的系统调用。&lt;/p>
&lt;p>系统调用由特殊汇编指令触发，在 x86 中是 syscall 指令，在 RISC-V 中是 ecall 指令。在进入操作系统 Trap 后，操作系统可以读取 CPU 特权寄存器，判断 Trap 到底是 Exception 还是 Interrupt。Exception 是 Syscall，还是其他异常。根据这些信息，操作系统可以执行相应的操作。&lt;/p>
&lt;p>如果是其他不可恢复的异常，比如除零异常，操作系统会直接终止用户程序的执行（由于信号机制的出现，操作系统现在通常不会直接杀死进程），然后将控制权交给其他程序。操作系统也会利用异常来实现一些功能，比如页错误异常，就是操作系统用来实现虚拟内存和COW的一种方式。&lt;/p>
&lt;p>而&lt;strong>中断&lt;/strong>是一种异步事件，分为硬中断和软中断。外部中断是由硬件设备发出的，比如键盘中断（仅针对PS接口，USB接口是轮询机制），网卡中断等，目的是让 CPU 处理硬件设备的事件。时钟中断是由CPU时钟发出的，目的是让 操作系统从用户程序中夺回控制权，进行调度。如果没有时钟中断，CPU 就会一直执行用户程序，操作系统就无法进行调度。假如我在这里写一个死循环，那么其他进程就无法被执行，因为同一时刻一个CPU的PC只能指向一个地址。同时操作系统的代码也永远无法执行，也就意味着操作系统无法杀死这个进程。&lt;/p>
&lt;p>因此，异常是操作系统与用户程序交互的方式，中断是操作系统夺回 CPU 控制权的方式。&lt;/p>
&lt;p>下面来看看我们如何触发一个系统调用。&lt;/p>
&lt;p>在 x86 中，我们可以使用 syscall 指令来触发系统调用。使用系统调用，我们需要做以下几件事：&lt;/p>
&lt;ul>
&lt;li>在指定寄存器中存放系统调用号，这个号码是操作系统用来查找系统调用的实现。因为所有系统调用都是通过syscall指令触发的，所以操作系统需要根据这个号码来查找对应的系统调用实现。&lt;/li>
&lt;li>在指定寄存器中存放系统调用的参数，这些参数是用户程序传递给操作系统的，操作系统根据这些参数来执行相应的操作。&lt;/li>
&lt;/ul>
&lt;p>参数必须是寄存器宽度的，因为我们只能通过寄存器传递参数。在 x86 中，系统调用的参数是通过 rax, rdi, rsi, rdx, r10, r8, r9 这几个寄存器传递的。rax 寄存器存放系统调用号，rdi, rsi, rdx, r10, r8, r9 分别存放系统调用的参数。在 RISC-V 中，系统调用的参数是通过 a0, a1, a2, a3, a4, a5 这几个寄存器传递的。
a7 寄存器存放系统调用号。上面的期末作业中给出了一些系统调用的号码，这些号码是操作系统用来查找系统调用实现的。&lt;/p>
&lt;p>这里给出一个 x86_64 的 syscall 表，包含系统调用的寄存器使用约定: &lt;a class="link" href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener"
>https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/&lt;/a>&lt;/p>
&lt;p>可以看到，系统调用的返回值是存放在 rax 寄存器中的。系统调用 id 也被放在 rax 寄存器中。然后我们还需要在 rdi 中放置第一个参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Rust" data-lang="Rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#![no_std]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#![no_main]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">core&lt;/span>::&lt;span class="n">arch&lt;/span>::&lt;span class="n">asm&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">core&lt;/span>::&lt;span class="n">panic&lt;/span>::&lt;span class="n">PanicInfo&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[allow(unused)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[allow(unused_mut)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[allow(unreachable_code)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[no_mangle]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">extern&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_start&lt;/span>: &lt;span class="kt">usize&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// brk 是指向用户堆的指针。我们使用brk是扩大堆的大小，也就是分配内存。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 但是我们需要知道堆的起始位置，所以我们需要先获取当前的brk值。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">asm!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;mov rax, 12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// sys_brk system call number on x86_64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;mov rdi, 0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// brk(0) to get the current brk value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rax&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nostack&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_brk&lt;/span>: &lt;span class="kt">usize&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 分配 1024 字节内存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_ret&lt;/span>: &lt;span class="kt">isize&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 系统调用返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 调用 brk 系统调用进行内存分配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">asm!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;mov rax, 12&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// sys_brk system call number on x86_64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rdi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">new_brk&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rax&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_ret&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nostack&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_ret&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">new_brk&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_start&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 分配失败，恢复原来的 brk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">panic!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;brk failed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">brk_start&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write_volatile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 访问 brk 的第一个字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;brk success&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">4099&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">write_volatile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 访问超出分配的内存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 你应该一定会看到4096行的write success。一行不多，一行不少。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;write success&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[no_mangle]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">extern&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">__libc_start_main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="o">!&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;main returned&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_ptr&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">asm!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rax&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// sys_write system call number on x86_64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rdi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// file descriptor 1 is stdout
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rsi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// pointer to the buffer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rdx&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// buffer size
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="o">!&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 退出程序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">asm!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;syscall&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rax&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// sys_exit system call number on x86_64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;rdi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// exit code;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">noreturn&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nostack&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[panic_handler]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_info&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">PanicInfo&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="o">!&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;panicked!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以在&lt;a class="link" href="https://github.com/Loongson-neuq/blog/tree/main/content/post/week060/brk_demo" target="_blank" rel="noopener"
>这里&lt;/a>找到这个代码的完整版本。&lt;/p>
&lt;p>使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cargo +nightly run -Z build-std&lt;span class="o">=&lt;/span>core --target x86_64-unknown-linux-gnu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>来编译运行&lt;/p>
&lt;p>你可以看到，刚好在第 4096 行的时候，程序会被操作系统杀死。这是因为我们访问了超出分配的内存，操作系统检测到了这个错误，就会杀死程序。&lt;/p>
&lt;p>但是我们明明只要了 1024 个字节，为什么我们可以访问 4096 字节呢？这是因为操作系统会按照页的大小来分配内存。在 x86_64 上，页的大小是 4096 字节。所以我们分配 1024 字节的时候，实际上操作系统会分配 4096 字节的内存。这个内存是连续的，所以我们可以访问 1024 ~ 4095 字节的内存。按页分配内存是为了提高内存的使用效率，因为内存是按页来管理的，所以我们只能按页来分配内存。分页机制同时也是虚拟内存和内存权限控制的基础。&lt;/p>
&lt;p>上面你可以看到我使用汇编调用&lt;code>exit&lt;/code>, &lt;code>write&lt;/code>系统调用的实现，这是因为我们在 &lt;code>no_std&lt;/code> 环境下，没有标准库，所以我们需要自己实现这些功能。这里我使用了汇编来调用系统调用。&lt;/p>
&lt;h4 id="探索调用栈---手动栈展开">探索调用栈 - 手动栈展开
&lt;/h4>&lt;p>接下来看下一道题：https://github.com/Loongson-neuq/mem-management-01/tree/main/explore-call-stack&lt;/p>
&lt;p>题目要求我们通过修改栈，来实现修改控制流。&lt;/p>
&lt;p>让我们先来看看这个题的简化版本，也是一个经典的返回地址攻击：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 在这里修改栈，使得代码不回到 main，而是回到 bar
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Some dangerous code that can be exploited
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这需要如何实现呢？我们首先需要知道函数是什么。&lt;/p>
&lt;p>函数也叫子过程，是一段代码的集合，从汇编或者说内存的角度说，就是一片内存区域，这片内存区域储存了指令。函数实际上就只是这片内存区域的地址，或者说这些指令集合的第一条指令的地址。而其他的参数，返回值都是编译器设计的约定，实际上就是一些寄存器或者内存的操作。如果我们自己编写汇编代码，则需要自己实现以及遵守这些约定。&lt;/p>
&lt;p>函数的特性包括以下几点:&lt;/p>
&lt;ol>
&lt;li>传递参数给子过程&lt;/li>
&lt;li>转移控制权给子过程&lt;/li>
&lt;li>子过程返回返回值&lt;/li>
&lt;li>子过程返回控制权给父过程&lt;/li>
&lt;/ol>
&lt;p>我们今天不关注 1 和 3，有兴趣的同学请自己搜索 &lt;code>Calling Conventions&lt;/code>。&lt;/p>
&lt;p>2 和 4 都涉及控制权的转移，通过上面的内容，你应该知道，实际上就是修改 PC 指针。&lt;/p>
&lt;p>对于 2，通常由一条 &amp;ldquo;call&amp;rdquo; 指令实现，call 指令是一条比较复杂的伪指令，实际上是多条指令的组合。&lt;/p>
&lt;p>让我先介绍一个简单跳转指令 &lt;code>jmp&lt;/code>。它的作用就只是修改PC到目标地址，没有任何其他操作。&lt;/p>
&lt;p>接下来再说说 &lt;code>call&lt;/code> 指令。&lt;code>call&lt;/code> 指令的作用是将当前的指令的下一条指令的地址压入栈，然后跳转到目标地址。&lt;/p>
&lt;p>也就是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">push&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">ADDRESS_OF_NEXT_INSTRUCTION&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">需要注意的是&amp;lt;&lt;/span>&lt;span class="no">ADDRESS_OF_NEXT_INSTRUCTION&lt;/span>&lt;span class="err">&amp;gt;由编译器硬编码嵌入到指令中，所以我们无法直接获取到这个地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jmp&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">TARGET_ADDRESS&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就实现了函数调用。&lt;/p>
&lt;p>那返回时呢？返回时我们需要从栈中弹出地址，然后跳转到这个地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">pop&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">将&amp;lt;&lt;/span>&lt;span class="no">ADDRESS_OF_NEXT_INSTRUCTION&lt;/span>&lt;span class="err">&amp;gt;弹出到&lt;/span>&lt;span class="no">t0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">jmp&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">跳转到&lt;/span>&lt;span class="no">t0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就是 &lt;code>ret&lt;/code> 指令。ADDRESS_OF_NEXT_INSTRUCTION 被称为 Return Address。某些架构例如 RISCV 使用专用寄存器保存 Return Address，但是对于嵌套函数，仍然需要将 Return Address 压入栈中。&lt;/p>
&lt;p>在 &lt;code>ret&lt;/code> 前，需要清空当前栈帧，这样pop弹出的才是正确的地址。而不是局部变量。&lt;/p>
&lt;p>这就是函数调用的原理。&lt;/p>
&lt;p>接下来再让我们从高处看看栈的结构，以上面的代码为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+-------------------+ --+ &amp;lt;- rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | +--- main 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ --+ &amp;lt;- rsp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是 main 的栈帧，在进入 main 时，就确定了大小和位置。在调用 foo 前，栈的结构是这样的。&lt;/p>
&lt;p>接下来我们执行 &lt;code>call foo&lt;/code> 指令的第一件事，压入 Return Address，栈的结构变成这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+-------------------+ --+ &amp;lt;- rbp, BASE POINTER，也就是序幕代码中的 rsp 或者 riscv 中的 sp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | +--- main 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ --+ &amp;lt;- rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| RETURN ADDRESS |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来我们执行 &lt;code>jmp foo&lt;/code> 指令，控制权转移到 foo 函数。但是还没有执行 foo 函数的代码，所以 foo 的栈帧还没有建立，栈的结构保持不变。&lt;/p>
&lt;p>我们知道，函数具有 prelude 代码，包含以下两条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">push&lt;/span> &lt;span class="no">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mov&lt;/span> &lt;span class="no">rbp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是为了建立当前函数的栈帧。其中，push 将 rsp 指令 +8，然后将 rbp 的值压入栈中。然后将 rsp 的值赋给 rbp。这样就建立了当前函数的栈帧。现在栈的结构变成这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+-------------------+ --+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | +--- main 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ --+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| RETURN ADDRESS |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| SAVED RBP |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ &amp;lt;- 新的 rbp, 这里我们不关注 rsp，因为 rsp 是动态的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | &amp;lt;--- foo 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以看到，foo 的栈帧建立完成。现在我们可以执行 foo 的代码了。&lt;/p>
&lt;p>现在回来考虑返回地址攻击，其实非常简单，只要修改 Return Address 就可以了。我们可以通过修改 Return Address 来控制程序的控制流。那如何知道 Return Address 的地址呢？事实上，对于本函数的 Return Address，我们是很容易知道的，它就位于 SAVED RBP 的正上方。而 SAVED RBP 的地址是 rbp 的值。&lt;/p>
&lt;p>也就是说，RETURN ADDRESS 的地址就是 rbp + 8。&lt;/p>
&lt;p>我们使用&lt;code>((size_t*)(rbp + 8)) = bar&lt;/code>，就能够修改 Return Address 为 bar 的地址。&lt;/p>
&lt;p>这下，在 foo 返回时，pop 出来的地址就是 bar 的地址，程序就会跳转到 bar 函数。&lt;/p>
&lt;p>这就是返回地址攻击的原理。&lt;/p>
&lt;p>现在让我们回来看我们的题目。我们的题目稍微复杂了一些，因为我们不再是修改自己的返回地址了，而是修改自己上方某个函数的返回地址。这就需要我们知道上方函数的栈帧的大小，以及 Return Address 的地址。那我们如何知道上方函数的栈帧的大小呢？我们可以遍历基指针实现。&lt;/p>
&lt;p>还是考虑这个例子，我们知道，main 也是被别人调用的，也有 RETURN ADDRESS 和 SAVED RBP。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+-------------------+ --+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | +--- main 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ --+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| RETURN ADDRESS |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| SAVED RBP |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">+-------------------+ &amp;lt;- 新的 rbp, 这里我们不关注 rsp，因为 rsp 是动态的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | &amp;lt;--- foo 的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rbp 寄存器指向的是当前函数的栈帧的底部，也就是 SAVED RBP 的地址。那我们对 rbp 进行解引用，就可以得到上一个函数的 rbp 的地址。再次解引用，就可以得到上上一个函数的 RBP。如此循环下去，直到某一个 SAVED RBP 为 0，就说明到了栈的底部。这就是栈的展开的原理。&lt;/p>
&lt;p>这就是我们的题目的原理。我们需要遍历栈，找到我们要修改的函数的栈帧，然后修改 Return Address。&lt;/p>
&lt;p>需要补充的一点是，现代编译器并不总是会保存 RBP，因此这种遍历栈的方法并不总是有效。他们使用 fda 来保存栈帧的大小，这样就不需要 RBP 了。这样就能够多出一个通用寄存器。在 RISCV 中，基指针 fp 有两个名字，在保存基指针时，叫做 fp，如果不保存基指针，叫做 s0，即 saved register 0。多一个通用寄存器的好处是显著的，因为通用寄存器是非常宝贵的资源。但是进行栈展开就变得困难了，因为解析 fda 是非常困难的。但是你可以对指示链接器强制保存基指针。&lt;/p>
&lt;h3 id="汇编视角的栈内存">汇编视角的栈内存
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;span class="lnt">98
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">foo:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 函数序幕
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">BP&lt;/span> &lt;span class="c1">; 保存基指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">BP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">SP&lt;/span> &lt;span class="c1">; 初始化基指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; int a = 42;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">t0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">42&lt;/span> &lt;span class="c1">; 将值 42 存入 t0 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="c1">; 将 t0 的值压入栈，栈顶即为变量 a 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; int* ptrA = &amp;amp;a;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">LEA&lt;/span> &lt;span class="no">t1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">BP-8&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">; 获取变量 a 的地址，存入 t1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t1&lt;/span> &lt;span class="c1">; 将 t1 的值压入栈，栈顶即为变量 ptrA 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; Object* obj = new Object();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">HEAP_ALLOC&lt;/span> &lt;span class="no">t3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span> &lt;span class="c1">; 分配 32 字节的堆空间，存入 t3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">Program.exe&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Object&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">GetHashCode&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">; 初始化 vtable 的第一个函数地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">Program.exe&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Object&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">ToString&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">; 初始化 vtable 的第二个函数地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">Program.exe&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">Object&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="no">Equals&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">; 初始化 vtable 的第三个函数地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t3&lt;/span> &lt;span class="c1">; 将堆地址压入栈，栈顶即为变量 obj 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; char* str = &amp;#34;Hello&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV_STR&lt;/span> &lt;span class="no">t0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">Program.exe&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">offset_of_Hello&lt;/span>&lt;span class="err">&amp;gt;&lt;/span> &lt;span class="c1">; 假设字符串 &amp;#34;Hello&amp;#34; 的偏移地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="c1">; 将 t0 的值压入栈，栈顶即为变量 str 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; StructType value = StructType {1, 2, 3};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">t0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c1">; 将值 1 存入 t0 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="c1">; 将 t0 的值压入栈，初始化 field1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">t0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">; 将值 2 存入 t0 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="c1">; 将 t0 的值压入栈，初始化 field2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">t0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 将值 3 存入 t0 寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t0&lt;/span> &lt;span class="c1">; 将 t0 的值压入栈，初始化 field3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 你也可以使用静态SP的方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; SUB SP, 12 ; 为结构体 value 分配 12 字节的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; MOV [SP-4], 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; MOV [SP-8], 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; MOV [SP-12], 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; StructType* pValue = (StructType*)malloc(sizeof(StructType));
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">HEAP_ALLOC&lt;/span> &lt;span class="no">t3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span> &lt;span class="c1">; 分配 12 字节的堆空间，存入 t3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c1">; 初始化堆上的 field1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">; 初始化堆上的 field2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 初始化堆上的 field3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t3&lt;/span> &lt;span class="c1">; 将堆地址压入栈，栈顶即为变量 pValue 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; std::vector&amp;lt;int&amp;gt; vec = {1, 2, 3};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 将 3 压入栈，初始化 vector 的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 将 3 压入栈，初始化 vector 的容量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">HEAP_ALLOC&lt;/span> &lt;span class="no">t3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span> &lt;span class="c1">; 分配 12 字节的堆空间，存入 t3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c1">; 初始化堆上的第一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">; 初始化堆上的第二个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 初始化堆上的第三个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t3&lt;/span> &lt;span class="c1">; 将堆地址压入栈，栈顶即为变量 vec 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; std::vector&amp;lt;int&amp;gt;* pVec = new std::vector&amp;lt;int&amp;gt;({1, 2, 3});
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">HEAP_ALLOC&lt;/span> &lt;span class="no">t3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span> &lt;span class="c1">; 分配 12 字节的堆空间，存入 t3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="c1">; 初始化堆上的第一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">; 初始化堆上的第二个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t3&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 初始化堆上的第三个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">HEAP_ALLOC&lt;/span> &lt;span class="no">t4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">24&lt;/span> &lt;span class="c1">; 分配 24 字节的堆空间，存入 t4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 初始化堆上的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="c1">; 初始化堆上的容量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">t4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">t3&lt;/span> &lt;span class="c1">; 初始化堆上的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">PUSH&lt;/span> &lt;span class="no">t4&lt;/span> &lt;span class="c1">; 将堆地址压入栈，栈顶即为变量 pVec 的地址
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; int array[512];
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">SUB&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2048&lt;/span> &lt;span class="c1">; 为数组 array 分配 512 * 4 字节的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">LEA&lt;/span> &lt;span class="no">t2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">BP-2056&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">; 获取数组 array 的基址，存入 t2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 我决定将这个数组放在最后，因为这样其他局部变量的偏移就会比较小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 清理局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2048&lt;/span> &lt;span class="c1">; 清理数组 array 的栈空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">POP&lt;/span> &lt;span class="c1">; 清理 pVec
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span> &lt;span class="c1">; 清理 vec
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c1">; 清理 pValue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span> &lt;span class="c1">; 清理 value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c1">; 清理 str
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c1">; 清理 obj
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="c1">; 清理 ptrA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">ADD&lt;/span> &lt;span class="no">SP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="c1">; 清理 a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 恢复临时寄存器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">POP&lt;/span> &lt;span class="no">t4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">POP&lt;/span> &lt;span class="no">t3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">POP&lt;/span> &lt;span class="no">t2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">POP&lt;/span> &lt;span class="no">t1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">POP&lt;/span> &lt;span class="no">t0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; 函数尾声
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">POP&lt;/span> &lt;span class="no">BP&lt;/span> &lt;span class="c1">; 恢复基指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">RET&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我使用的是动态 sp，某些编译器不会使用动态 sp，而是使用 rbp + 固定偏移，也就是课件中代码的形式。
使用哪种方式完全取决于编译器的实现，这里只是为了说明栈内存的分配。并且现代编译器也是多种方式混合使用，例如保存 rbp 的时候都是使用的 push/pop，但是局部变量的偏移是使用 rbp + 固定偏移的方式。&lt;/p>
&lt;h3 id="补充寻址模式">补充：寻址模式
&lt;/h3>&lt;p>我们进行内存访问，总是需要一个根，然后再加上一个偏移量。这个根叫做基址，这种寻址方式叫做基址寻址。基址寻址是一种非常常见的寻址方式，但是并不是唯一的寻址方式。&lt;/p>
&lt;p>我们还有一种寻址方式叫做立即数寻址，这种寻址方式是直接使用一个立即数作为地址。这种寻址方式通常用于访问全局变量，因为全局变量的地址是固定的。&lt;/p>
&lt;p>这里稍微说一下基址寻址。除了全局符号外，所有的寻址都是基址寻址。对于堆内存，它的根总是栈上的某个局部变量，这也是 Gargage Collection 的基础，对于引用托管堆对象的局部变量被视为 GC 根，通过遍历 GC 根，可以确定所有可达的托管对象。然后其他被判定为不可达的对象就可以被回收。&lt;/p>
&lt;p>而对于栈内存，它的根是栈顶指针，也就是 rsp 或者 rbp。因此，不管是堆内存还是栈内存，通过寄存器来访问内存，无非是一次跳转和多次跳转的区别。&lt;/p>
&lt;h2 id="继续-rust-所有权原理的内容">继续 Rust 所有权原理的内容
&lt;/h2>&lt;p>回到上次的课件&lt;/p></description></item><item><title>[OS Week2] Get started with Rust</title><link>https://loongson-neuq.pages.dev/p/os-week2-get-started-with-rust/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week2-get-started-with-rust/</guid><description>&lt;p>本次课程的部分内容摘抄自 &lt;a class="link" href="https://learn.microsoft.com/learn" target="_blank" rel="noopener"
>Microsoft Learn&lt;/a> 上的 &lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/dev-environment/rust/" target="_blank" rel="noopener"
>Get started with Rust&lt;/a> 课程。&lt;/p>
&lt;h2 id="overview">Overview
&lt;/h2>&lt;p>Rust 是一种系统编程语言，因此可用于编写系统（如操作系统）。 但它也可用于编写性能和可信度很重要的应用程序。 Rust 语言语法可以与 C++ 语法相媲美，提供了与新式 C++ 相当的性能；&lt;/p>
&lt;blockquote>
&lt;p>❕INFO&lt;/p>
&lt;p>  C++是什么垃圾也配&lt;/p>
&lt;/blockquote>
&lt;p>对于许多有经验的开发人员来说，Rust 在编译和运行时模型、类型系统和确定性终止化方面都是正确的。&lt;/p>
&lt;blockquote>
&lt;p>❕INFO&lt;/p>
&lt;p>  在系统编程中，控制流可能被扰乱，某些优化并不完全正确，需要开发者具有丰富的经验对生成的汇编代码进行审查。不能完全依赖编译器。&lt;/p>
&lt;/blockquote>
&lt;p>此外，Rust 的设计保证了内存安全，而不需要进行垃圾回收。&lt;/p>
&lt;p>那么，我们为什么要选择 Rust 作为 Windows 的最新语言投影呢？ 其中一个因素是，Stack Overflow 的年度开发人员调查显示，Rust 是目前为止年复一年最受欢迎的编程语言。 虽然你可能会发现此语言有陡峭的学习曲线，但一旦你越过了这个峰，就很难不爱上它了。&lt;/p>
&lt;h2 id="rust-development-toolsetecosystem">Rust development toolset/ecosystem
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>crate&lt;/code> 是 Rust &lt;strong>编译&lt;/strong>和&lt;strong>链接&lt;/strong>单元。 crate 可以源代码形式存在，然后能够被处理成以二进制可执行文件（简称二进制文件）或二进制库（简称库）形式存在的 crate 。通常一个 crate 就是一个 &lt;strong>project&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rust 项目称为&lt;code>包&lt;/code>。 一个包可以包含一个或多个 crate，以及描述如何生成这些 crate 的 &lt;code>Cargo.toml&lt;/code> 文件。更准确的说法是 &lt;strong>solution&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rustup&lt;/code> 是 Rust 工具链的安装程序和更新程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Cargo&lt;/code> 是 Rust 包管理工具的名称。也用于构建、测试和发布 Rust 项目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rustc&lt;/code> 是 Rust 编译器。 大多数情况下，你不会直接调用 rustc，而是通过 Cargo 间接调用它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>crates.io&lt;/code> (&lt;a class="link" href="https://crates.io/" target="_blank" rel="noopener"
>https://crates.io/&lt;/a>) 是 Rust 社区的 crate 注册表。crates.io 托管大量的 crate，可以通过 Cargo 下载，并自动解决依赖关系。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="programming-language-concepts">Programming language Concepts
&lt;/h2>&lt;h3 id="type-syetem">Type syetem
&lt;/h3>&lt;h4 id="strong-typing-weak-typing">Strong typing? Weak typing?
&lt;/h4>&lt;p>在编程语言的类型系统中，强类型（strong typing）和弱类型（weak typing）是两个核心概念，用于描述编程语言对数据类型的约束程度。&lt;/p>
&lt;h3 id="强类型strong-typing">强类型（Strong Typing）
&lt;/h3>&lt;p>强类型语言要求变量的数据类型在使用时要严格遵守，通常不允许不同类型之间的隐式转换。例如，Rust、.NET都属于强类型语言。以下是强类型的特征：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>严格的类型检查&lt;/strong>：强类型语言在&lt;strong>编译期&lt;/strong>或运行期都会进行严格的类型检查，如果类型不匹配，代码就会报错。例如，在Rust中将整数赋值给一个字符串类型的变量会直接报错，而不会自动转换类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性&lt;/strong>：强类型语言通常可以防止许多潜在的错误，因为它们在操作不兼容类型时会立即报错，帮助程序员更早地发现错误。例如在Rust中，试图将整型变量作为浮点型来处理，编译器会立即提醒，这避免了许多运行时错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>类型转换需要显式&lt;/strong>：在强类型语言中，类型转换一般需要显式声明，编译器不会进行隐式转换。例如在Rust中，&lt;code>let x: i32 = 10; let y: f64 = x as f64;&lt;/code>。&lt;code>as&lt;/code>关键字显式地将&lt;code>i32&lt;/code>类型转换成了&lt;code>f64&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>⚠️ NOTE&lt;/p>
&lt;p>  Rust 仅在安全的情况下允许隐式转换，例如&lt;code>let x: i32 = 10; let y: f64 = x;&lt;/code>是合法的，因为&lt;code>i32&lt;/code>可以隐式转换成&lt;code>f64&lt;/code>。并且 Rust 还有&lt;strong>自动解引用&lt;/strong>机制，实现了一定程度的隐式转换。&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>&lt;strong>内存安全&lt;/strong>：强类型语言更容易实现内存安全，因为严格的类型系统有助于防止无效的内存访问。例如，Rust的所有权系统和借用检查在类型系统中嵌入了内存管理的概念，确保了线程安全和内存安全。&lt;/li>
&lt;/ol>
&lt;h3 id="弱类型weak-typing">弱类型（Weak Typing）
&lt;/h3>&lt;p>弱类型语言对类型的限制较少，通常允许不同类型之间的隐式转换，例如JavaScript具有弱类型的特性。以下是弱类型的特征：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>更宽松的类型转换&lt;/strong>：弱类型语言在不同类型之间可以自由转换。例如在JavaScript中，&lt;code>&amp;quot;5&amp;quot; + 10&lt;/code> 会自动将数字&lt;code>10&lt;/code>转换成字符串，然后得到字符串&lt;code>&amp;quot;510&amp;quot;&lt;/code>。这种隐式转换提供了便利，但也可能导致难以发现的错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更高的灵活性&lt;/strong>：弱类型允许开发者快速编写代码，减少了类型检查的约束，代码在运行时的适应性更高。例如，JavaScript中的函数可以接受任何类型的参数，不必进行严格的类型定义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>容易出错&lt;/strong>：由于类型不严格，弱类型语言更容易引发错误，尤其是在无意中发生隐式类型转换时。比如在C语言中，整数和指针之间可以自由转换，这会导致很多内存和安全问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="rust-的强类型优势">Rust 的强类型优势
&lt;/h3>&lt;p>Rust 是一种强类型系统的语言，其设计注重内存安全和性能，通过严格的类型检查和所有权模型来保证代码的可靠性。Rust 的强类型特性让开发者在编译时可以捕捉到许多潜在的错误，减少了运行时的崩溃风险，同时通过显式转换机制避免了隐式转换带来的隐患。&lt;/p>
&lt;p>最后，类型是仅对于高级语言抽象层的概念，在底层的硬件层，一切都是二进制的。所有的类型实例不过是一段 memory block，在汇编中我们使用同样的指令来操作所有的类型。因此，在 C 这种仅对汇编进行薄封装的语言中，类型的概念并不是很重要。&lt;/p>
&lt;h3 id="systems-programming-language">Systems programming language
&lt;/h3>&lt;p>“系统编程语言”通常指的是适合底层开发、硬件交互和性能优化的语言，与更高层抽象的应用编程语言相比，它们有一些独特的特点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>直接硬件访问和内存控制&lt;/strong>(Most important to us)：
系统编程语言通常支持对硬件和内存进行低层次的访问，例如手动管理内存（Rust、C/C++的&lt;code>malloc/free&lt;/code>或&lt;code>new/delete&lt;/code>）。这让开发者能精确控制程序的内存分配和释放，提高性能和资源利用率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>高效的执行性能&lt;/strong>：
系统编程语言（如Rust、C、C++）通常会编译成原生机器码（针对特定架构及操作系统的汇编指令），以确保代码在执行时的效率和速度。这在操作系统、嵌入式系统等需要实时响应和高效性能的场景中尤为重要。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>⚠️ NOTE&lt;/p>
&lt;p>  不完全正确，事实上，JIT 和 GC 的组合更能够在保证极端性能的完全释放和最大延迟。只是 JIT 依赖运行时，并且 GC 不能保证确定性时延。这些缺陷在系统编程中是不可接受的。因为运行时依赖操作系统。而 GC 导致的不确定性时延会导致系统的不可预测性。&lt;/p>
&lt;/blockquote>
&lt;ol start="3">
&lt;li>
&lt;p>&lt;strong>细粒度的并发控制&lt;/strong>：
系统编程语言支持低级并发控制（如Rust中的无锁数据结构、C++的线程库和原子操作）。Rust特别强调安全的并发，通过借用检查器和所有权系统来避免数据竞争，帮助在保持并发性能的同时防止线程安全问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存安全&lt;/strong>：
像Rust这样的现代系统编程语言注重内存安全，避免空指针和悬空指针等问题。Rust的所有权系统在编译期防止了数据竞争、悬挂引用和双重释放等内存问题，大幅降低了由于内存管理引发的漏洞风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>零成本抽象&lt;/strong>：
系统编程语言（特别是Rust和C++）支持高效的抽象机制，允许编写高性能、模块化的代码。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>系统编程语言的这些特点使它们适合于操作系统、驱动程序、嵌入式系统、数据库引擎和游戏引擎等对性能和硬件直接交互有严格要求的场景。相比之下，高层次的编程语言（如Python、JavaScript）更适合于快速开发和构建应用程序接口（API）、数据处理或前端交互，因为它们提供了更丰富的标准库、内置内存管理和更高的抽象能力，但牺牲了一部分性能和对系统的直接控制。&lt;/p>
&lt;h2 id="why-rust">Why Rust?
&lt;/h2>&lt;p>我们要编写的是操作系统内核，不是一般的用户程序！&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>内存安全性&lt;/strong>：Rust独特的所有权系统和借用检查机制在编译阶段保证了内存安全，避免了常见的内存错误，如空指针引用、悬空指针和数据竞争问题。这对于编写操作系统内核尤为重要，因为内核中的错误通常会导致系统崩溃。Rust的安全检查帮助新手在不依赖垃圾回收的情况下实现更高的内存安全性，从而在早期阶段减少调试和崩溃问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>现代化语法，开发者友好&lt;/strong>：Rust的语法较为现代化且接近高级语言，易于理解。相比传统的系统编程语言（如C/C++），Rust能让新手更快上手，写出结构化、可读性高的代码，从而减少理解操作系统开发的语言门槛，使其更专注于系统逻辑和底层实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>高效的错误信息和强类型系统&lt;/strong>：Rust的编译器提供详细的错误提示，帮助开发者快速定位和解决问题。Rust的强类型系统在编译时检查代码中的潜在错误，特别是在内核开发中，这种类型检查可以大大减少运行时的错误和潜在的安全漏洞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>低层次控制和高性能&lt;/strong>：Rust与C一样可以访问底层硬件和控制内存布局，但同时还能提供更高的性能和资源控制能力。这使得新手能够更灵活地操作RISC-V平台的硬件资源，同时获得接近C的性能，这是编写高效操作系统内核的重要特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>丰富的生态和社区支持&lt;/strong>：Rust社区对操作系统开发的支持日渐丰富，包括&lt;code>riscv&lt;/code> crate等对RISC-V架构的支持库、&lt;code>core&lt;/code>和&lt;code>alloc&lt;/code>等标准库，以及&lt;code>x86_64&lt;/code>和&lt;code>riscv&lt;/code>等架构支持工具。社区中有许多成熟的项目和开源代码可供参考，新手可以借鉴这些资源加速学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>无运行时、轻量编译选项&lt;/strong>：Rust允许在&lt;code>no_std&lt;/code>环境中开发，即不依赖标准库，从而更适合裸机（bare metal）开发。对于RISC-V平台操作系统内核，Rust可以使用&lt;code>#![no_std]&lt;/code>配置，这样就能完全剥离标准库，直接进行裸机编程，符合操作系统开发的需求。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="我最看重什么">我最看重什么？
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>大量第三方库&lt;/strong>：Rust 社区的生态系统非常丰富，有大量的第三方库可供使用，可以大大提高开发效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>项目质量&lt;/strong>: 不规范换行？不规范缩进？不规范命名？clippy 全部给你报错！代码全部塞一个类一个函数里？测试过不了你就老实了！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rust-is-good-enough">Rust is good enough?
&lt;/h2>&lt;p>我不认为 Rust 够好，事实上它除了内存安全的一点保证之外远远能让我满意。上述的优点 Rust 也并没有做到最好。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SUCK virtual dispatch: Rust 的多态性主要基于泛型，倾向于静态分派，在编译期生成专用代码来替代泛型参数，因此很少使用动态分派（dyn Trait），这提高了性能，但也限制了动态多态的灵活性。相比之下，.NET 提供了灵活的接口和虚函数机制，适合需要基于对象或接口进行频繁动态分派的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SUCK async programming: 许多人认为 async/await 是 Rust 的一大优势，但实际上，Rust 的异步编程模型相对简陋。Rust 的异步编程主要基于&lt;code>Future&lt;/code>和&lt;code>async/await&lt;/code>语法，但缺乏像.NET Core中的&lt;code>Task&lt;/code>和&lt;code>async/await&lt;/code>那样完善的异步编程框架和库。Rust的异步编程需要依赖第三方库（如&lt;code>tokio&lt;/code>、&lt;code>async-std&lt;/code>）来实现，而且在使用过程中需要处理更多的错误和异常情况，不如.NET Core的异步编程模型简洁和易用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Macro? Garbage!: 我最讨厌的东西！宏分为两种，一种是声明式宏，一种是过程式宏。声明式宏类似 C 里面的宏，通常只用于简单的文本替换，只是添加了一些语法约束。过程宏是用于编译期代码生成的工具，但是 Rust 的过程宏相当简陋，仅支持 syntax analysis，.NET 的增量代码生成器则强大得多，不需要宏就能实现更强大的代码生成功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Rust 还有许多缺点，但是我认为不太重要，因此不再叙述。例如饱受诟病的编译速度慢，命名空间管理毫无逻辑等等。当然，Rust 太难不是 Rust 的问题。&lt;/p>
&lt;p>但是在我们的场景下，Rust 是最适合的语言。&lt;/p>
&lt;h2 id="setup-your-own-rust-development-environment">Setup your own Rust development environment
&lt;/h2>&lt;h3 id="prerequisites">Prerequisites
&lt;/h3>&lt;h4 id="windows">Windows
&lt;/h4>&lt;p>由于 Rust 依赖 C 编译套件用于编译的最终阶段，因此在 Windows 上安装 Rust 时，需要安装 C 编译套件。 Windows 上的 C 运行时主要是 MSVS，因此你需要安装 Microsoft Visual C++。你可以下载 &lt;a class="link" href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_blank" rel="noopener"
>Microsoft C++ Build Tools&lt;/a>，也可以（推荐）首选直接安装 &lt;a class="link" href="https://visualstudio.microsoft.com/downloads/" target="_blank" rel="noopener"
>Microsoft Visual Studio&lt;/a>。安装 Community 版本的 Visual Studio 即可。安装时仅勾选 &lt;strong>Desktop development with C++&lt;/strong> 选项即可。&lt;/p>
&lt;p>&lt;a class="link" href="https://rust-lang.github.io/rustup/installation/windows-msvc.html" target="_blank" rel="noopener"
>Detailed instructions&lt;/a>&lt;/p>
&lt;h4 id="linux">Linux
&lt;/h4>&lt;p>安装对应平台和与宿主主机相同的架构的 GCC 即可。&lt;/p>
&lt;h3 id="development-environment">Development environment
&lt;/h3>&lt;h4 id="rustrover">RustRover?
&lt;/h4>&lt;p>RustRover 是 JetBrains 开发的 Rust 语言的 IDE，它是一个基于 IntelliJ 平台的 IDE，提供了 Rust 语言的代码编辑、调试、自动补全、代码重构等功能。RustRover 也支持 Cargo 包管理工具，可以帮助你更方便地管理 Rust 项目。类似于 Idea, PyCharm, Clion 等。并且 RustRover 社区版是免费的。&lt;/p>
&lt;p>但是！&lt;/p>
&lt;p>不要用！由于我们的最终目的是系统编程，RustRover 是面向用户级应用的 IDE，它的调试器和代码提示等功能对于系统编程并不友好。&lt;/p>
&lt;p>因此我要求大家使用 Cargo 命令行　+　你自己喜欢的文本编辑器（VSCode, Vim, Emacs, Sublime Text, Notepad++）进行开发。&lt;/p>
&lt;h4 id="install-rust">Install Rust
&lt;/h4>&lt;p>不管你用的什么操作系统，打开 &lt;a class="link" href="https://rustup.rs" target="_blank" rel="noopener"
>&lt;code>https://rustup.rs&lt;/code>&lt;/a>。&lt;/p>
&lt;p>如果你是 Windows 用户，点击最上面的&lt;code>rustup-init.exe&lt;/code>下载并运行。
如果你是 Linux 用户，复制网址下面的命令到终端运行。&lt;/p>
&lt;p>然后根据提示，一路回车即可。&lt;/p>
&lt;blockquote>
&lt;p>某些发行版可能会将 &lt;code>rustup&lt;/code> 添加至软件源，当然上述方式也可以&lt;/p>
&lt;/blockquote>
&lt;h4 id="verify-installation">Verify installation
&lt;/h4>&lt;p>打开终端，输入&lt;code>cargo --version&lt;/code>，如果输出了版本号，说明安装成功。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">PS &lt;/span>&lt;span class="n">C:&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="p">\&lt;/span>&lt;span class="n">Caiyi&lt;/span> &lt;span class="n">Hsu&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">cargo&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cargo&lt;/span> &lt;span class="mf">1.80&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="py">0&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mf">376290515&lt;/span> &lt;span class="mf">2024&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="mf">07&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="mf">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="rust-with-visual-studio-code">Rust with Visual Studio Code
&lt;/h3>&lt;p>确保你已经安装了 Visual Studio Code 和 Cargo。打开 Visual Studio Code，安装 &lt;code>rust-analyzer&lt;/code> 插件。&lt;/p>
&lt;p>More usages:&lt;/p>
&lt;p>&lt;a class="link" href="https://code.visualstudio.com/docs/languages/rust" target="_blank" rel="noopener"
>Rust with Visual Studio Code&lt;/a>&lt;/p>
&lt;h3 id="rust-basic-syntax">Rust basic syntax
&lt;/h3>&lt;!-- TODO 该干啥了？ -->
&lt;p>&lt;del>&lt;a class="link" href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noopener"
>The Rust Programming Language&lt;/a>&lt;/del>&lt;/p>
&lt;p>&lt;del>&lt;a class="link" href="https://kaisery.github.io/trpl-zh-cn/" target="_blank" rel="noopener"
>Unofficial Chinese Translation&lt;/a>&lt;/del>&lt;/p>
&lt;p>&lt;strong>强烈建议使用 Brown University 的实验性交互版本&lt;/strong>，尤其是对所有权和借用感到困惑的同学。&lt;/p>
&lt;p>&lt;strong>&lt;a class="link" href="https://rust-book.cs.brown.edu/" target="_blank" rel="noopener"
>rust-book.cs.brown.edu&lt;/a>&lt;/strong>&lt;/p>
&lt;p>如果感觉鸟语看着难受可以对照中文翻译看，但一定要以这个这个版本为主要材料。&lt;/p>
&lt;h3 id="下集预告">下集预告
&lt;/h3>&lt;p>有重量级内容，敬请期待！&lt;/p>
&lt;p>&lt;a class="link" href="https://loongson-neuq.pages.dev/p/advanced-rust/" target="_blank" rel="noopener"
>Understanding Rust via Memory management&lt;/a>&lt;/p>
&lt;p>做了 Rustlings 的同学可以提前看一下。&lt;/p></description></item><item><title>Advanced Rust</title><link>https://loongson-neuq.pages.dev/p/advanced-rust/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/advanced-rust/</guid><description>&lt;h2 id="prerequisite">Prerequisite
&lt;/h2>&lt;h3 id="memory-management">Memory Management
&lt;/h3>&lt;h4 id="stack">Stack
&lt;/h4>&lt;p>Remember:&lt;/p>
&lt;p>All variables you &lt;em>defined&lt;/em> in a function/method is allocated on the &lt;em>STACK&lt;/em>, even non-fixed size types and reference types.&lt;/p>
&lt;p>But the thing you can &lt;em>access&lt;/em> directly or actually stored on the stack must be fixed size types.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Cpp" data-lang="Cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello, world&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StructType&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StructType&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All variable you can use directly is allocated on the stack (frame).&lt;/p>
&lt;h5 id="this-is-not-what-i-heard-from-othersthe-internet">This is not what I heard from others/the Internet!
&lt;/h5>&lt;ul>
&lt;li>Reference types&lt;/li>
&lt;li>String&lt;/li>
&lt;li>Vector&lt;T>&lt;/li>
&lt;li>Dynamic allocation (eg. malloc)&lt;/li>
&lt;/ul>
&lt;p>People all told me that these types are allocated on the HEAP!&lt;/p>
&lt;p>I would say, that&amp;rsquo;s the root of your confusion. Why don&amp;rsquo;t we talk about the Heap first then?&lt;/p>
&lt;p>And I used two different term: &lt;code>define&lt;/code> and &lt;code>access&lt;/code>&lt;/p>
&lt;h4 id="heap">Heap
&lt;/h4>&lt;p>Heap is a large contigous memory managed by both the &lt;strong>Operating System&lt;/strong> and &lt;strong>the language runtime&lt;/strong>.&lt;/p>
&lt;p>Runtime may be the &lt;strong>Standard library&lt;/strong>, eg. the libC
or &lt;em>GC&lt;/em>, eg. Go, .NET &amp;hellip;&lt;/p>
&lt;p>We don&amp;rsquo;t have to care about what&amp;rsquo;s happening in the background, at least for now.&lt;/p>
&lt;p>We only care about two functions:&lt;/p>
&lt;ol>
&lt;li>One for alloacting memory&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">alloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="n">size_of_bytes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which is &lt;code>malloc&lt;/code>, &lt;code>new&lt;/code>, &lt;code>new[]&lt;/code> &amp;hellip;&lt;/p>
&lt;ol start="2">
&lt;li>Another for returning allocated memory&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which is &lt;code>free&lt;/code>, &lt;code>delete&lt;/code>, &lt;code>delete[]&lt;/code> &amp;hellip;&lt;/p>
&lt;p>One interesting thing you should have noticed is, when we returning a piece of memory, we only need to pass the pointer to the function, but not the size of the memory.&lt;/p>
&lt;p>Why? Because &lt;em>Someone&lt;/em> must have recorded the size of the memory when it was allocated.&lt;/p>
&lt;p>The guy is the &lt;strong>Memory Allocator&lt;/strong>, a part of the runtime.&lt;/p>
&lt;p>When you call alloc method, the allocator simply find a piece of memory that is large enough to hold the data you want to store, and then record the size of the memory.&lt;/p>
&lt;p>But where is the large piece of meory(the allocator uses) from?&lt;/p>
&lt;p>The answer is the &lt;strong>Operating System&lt;/strong>.&lt;/p>
&lt;p>The OS provides a system call to allocate a piece of memory, and the allocator will use this system call to get the memory.&lt;/p>
&lt;h5 id="unix-like-system">Unix-like system
&lt;/h5>&lt;p>The unix-like system provides a system call &lt;code>brk&lt;/code> or &lt;code>sbrk&lt;/code> to allocate memory.&lt;/p>
&lt;p>The system call is like the function below, but is NOT a real function.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">brk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">sbrk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">intptr_t&lt;/span> &lt;span class="n">increment&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additional info: &lt;a class="link" href="https://www.man7.org/linux/man-pages/man2/brk.2.html" target="_blank" rel="noopener"
>brk syscall&lt;/a>&lt;/p>
&lt;p>A note from the page:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Avoid&lt;/span> &lt;span class="nx">using&lt;/span> &lt;span class="nf">brk&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nf">sbrk&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">memory&lt;/span> &lt;span class="nx">allocation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">package&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">portable&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">comfortable&lt;/span> &lt;span class="nx">way&lt;/span> &lt;span class="nx">of&lt;/span> &lt;span class="nx">allocating&lt;/span> &lt;span class="nx">memory&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When you call the brk, the OS will allocate memories Right After the end of the previous memory block. So when you constently call the brk, the memory block will grow larger and larger, but the memory block is always contiguous.&lt;/p>
&lt;p>The &lt;code>malloc&lt;/code> function will use the &lt;code>brk&lt;/code> system call to allocate memory, and uses the memory block for the allocation and recording the size of the memory.&lt;/p>
&lt;p>How do the OS gurantee the memory block is contiguous or the end of the memory block always have enough space for the next allocation?&lt;/p>
&lt;p>The answer is, the OS atually doesn&amp;rsquo;t gurantee that. Actually, memory pieces that a user program feels contiguous may &lt;em>NOT&lt;/em> be contiguous in the physical memory. The OS uses a technique called &lt;strong>Virtual Memory&lt;/strong> and &lt;strong>Page Table&lt;/strong> to make the memory block contiguous in the user program&amp;rsquo;s view.&lt;/p>
&lt;p>The OS simply maps the virtual memory to the physical memory. This technique is done with the help of hardwares like MMU, a part of the CPU.&lt;/p>
&lt;h5 id="windows">Windows
&lt;/h5>&lt;p>Windows does basically the same thing, but with a different system call, and the system call is wrapped by the &lt;code>VirtualAlloc&lt;/code> function form the &lt;code>Kernel32.dll&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Cpp" data-lang="Cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">LPVOID&lt;/span> &lt;span class="nf">VirtualAlloc&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optional&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">LPVOID&lt;/span> &lt;span class="n">lpAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">SIZE_T&lt;/span> &lt;span class="n">dwSize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">flAllocationType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">flProtect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additional info: &lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc" target="_blank" rel="noopener"
>VirtualAlloc&lt;/a>&lt;/p>
&lt;p>Basically same as the &lt;code>brk&lt;/code> system call from the Unix-like system, but with more options.&lt;/p>
&lt;h4 id="continue-to-talk-about-the-heap">Continue to talk about the Heap
&lt;/h4>&lt;p>Think about all code you write about the heap, all allocated object you want to access, you must have a pointer to the object.&lt;/p>
&lt;p>That&amp;rsquo;s exactly the problem.&lt;/p>
&lt;p>Take a look at the words again:&lt;/p>
&lt;p>All variables you &lt;em>defined&lt;/em> in a function/method is allocated on the &lt;em>STACK&lt;/em>, even non-fixed size types and reference types.&lt;/p>
&lt;p>What you can access directly is Only the pointer, not the object itself. You MUST uses the pointer to access the object. And the pointer is allocated on the stack.&lt;/p>
&lt;p>Note that reference type is basically safe pointer, the reference is allocated on the stack, and the object is allocated on the heap.&lt;/p>
&lt;p>There&amp;rsquo;s still one thing we have to talk about:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Cpp" data-lang="Cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">vec1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">vec2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What&amp;rsquo;s the difference between the two?&lt;/p>
&lt;p>I want to talk about the implementation and underlying of the &lt;code>vector&lt;/code> first.&lt;/p>
&lt;p>When we talk about the dynamic array, we always have a pointer to the actually array, and the size of the array. So the vector is like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Note that I declared it as a struct, I&amp;#39;ll explain it later
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The first line of the code above actually allocated the three fields on the stack, Pointer to the data, size of the data, and the capacity of the data.&lt;/p>
&lt;p>The second line of the code above actually allocated the three fields on the heap, Pointer to the data, size of the data, and the capacity of the data. And we uses a pointer to access the object.&lt;/p>
&lt;p>Values Allocated in Rust without Smart Pointer were all like the first line of the code above. Which is, All fields allocated on the stack.&lt;/p>
&lt;p>Smart pointer is like the Vector above(actually vector is a smart pointer), it allocates the fields on the stack, including a pointer to the actual object.&lt;/p>
&lt;h4 id="fixed-size">Fixed size?
&lt;/h4>&lt;p>Actually, a class defination determined that class is also fixed size, just like the struct.&lt;/p>
&lt;p>But class has a special feature: &lt;strong>Polymorphism&lt;/strong>.&lt;/p>
&lt;p>That&amp;rsquo;s is, when you reference an class object, it may not be the exactly the type, but a derived type. And derived type may have more fields than the base type. Which means the size of the object is not fixed.&lt;/p>
&lt;h4 id="struct-and-class">Struct and Class
&lt;/h4>&lt;p>Struct instance were allocated on the stack by default, and class instance were allocated on the heap by default.&lt;/p>
&lt;p>Since the struct is allocated on the stack, we Call it &lt;strong>Value Type&lt;/strong>. Value means we are not accessing it by a pointer, reference or something like that. But directly, we can touch it.&lt;/p>
&lt;h5 id="why-i-declared-the-vector-as-a-struct">Why I declared the &lt;code>Vector&lt;/code> as a struct?
&lt;/h5>&lt;p>Simply because C++ allows you allocate a class instance on the stack. And I don&amp;rsquo;t want to make things confusing for people uses other languages.&lt;/p>
&lt;p>although this loses the most important feature of the class: polymorphism, which makes a class like a struct.&lt;/p>
&lt;h4 id="why-all-instances-allocated-on-the-stack-must-be-fixed-size">Why All instances allocated on the stack MUST be fixed size?
&lt;/h4>&lt;p>Allocation calls for Value Types were generated at the the compile time, and the size of the object must be known at the compile time.&lt;/p>
&lt;p>Also, the allocations calls hardcoded the size of the object, which means the size of the object must be fixed.&lt;/p>
&lt;p>Since the class has a special feature: Polymorphism, the size of the object is not fixed, so we can&amp;rsquo;t allocate it on the stack. But without Polymorphism, we can allocate a class instance on the stack, just like C++ does.&lt;/p>
&lt;h5 id="micro-views-of-the-stack">Micro views of the stack
&lt;/h5>&lt;p>I&amp;rsquo;ve talked about where is the heap, but not the stack. Stack is also a contiguous memory block. For simplicity, I&amp;rsquo;ll say that stack were managed by the OS, although it&amp;rsquo;s not true in some cases.&lt;/p>
&lt;p>Stack of a program is Program Stack or Call Stack or Execution Stack. It&amp;rsquo;s used to store the local variables, function parameters, and the return address of the function.&lt;/p>
&lt;p>When a process starts, the OS will allocate a memory block for the process. And make a certain register point to the end of the memory block(High address). This register is called the &lt;strong>Stack Pointer&lt;/strong>, which is &lt;code>rsp&lt;/code> in x86_64 and &lt;code>sp&lt;/code> in RISC-V.&lt;/p>
&lt;p>When you try allocate an instance on the stack, like, a int, we simply minus the stack pointer.&lt;/p>
&lt;p>You might know stack is FILO or LIFO, but that doesn&amp;rsquo;t mean we have to pop the stack if we want to access the inner object. The FILO or LIFO is only for the stack frame, which keeps everything essential to allow function calling/returning.&lt;/p>
&lt;p>Since all instance on the stack is fixed size, all of their position is fixed, we know where the object is at the compile time. We know that all local variables can be accessed by frame pointer plus a fixed offset.&lt;/p>
&lt;p>Actually, we have to uses &lt;strong>address&lt;/strong> to access all memory blocks, including those allocated on the stack. But we seems never uses a pointer. That&amp;rsquo;s because when we have to uses a pointer, the address can NOT be known at the compile time, we have to fetch the address at runtime. But for those allocated on the stack, the known local variables, we know where they are, we can access them directly with &lt;code>sp + offset&lt;/code>, where offset is a constant. So the address(&lt;code>sp + offset&lt;/code>) is &lt;strong>embedded&lt;/strong> in the instruction.&lt;/p>
&lt;p>The stack is array-like, but not a real array. It&amp;rsquo;s a memory block, a memory block means that you can access whatever you want with the memory block. Stack is just a convention which constraints the way we access the memory block - FILO or LIFO.&lt;/p>
&lt;p>An example is that, in Rust, we don&amp;rsquo;t have a specific data structure for Stack. In C++, in python, in .NET you would have a Type like &lt;code>Stack&amp;lt;T&amp;gt;&lt;/code>, but in Rust, we don&amp;rsquo;t have that. We just use &lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>(&lt;code>vector&amp;lt;T&amp;gt;&lt;/code> in Cpp). As long as you only call push and pop method.&lt;/p>
&lt;h6 id="why-the-stack-is-faster-than-the-heap">Why the stack is faster than the heap?
&lt;/h6>&lt;p>When we access the object on the stack, we know where the object is, we access it with a single instruction which contains the frame pointer and the offset.&lt;/p>
&lt;p>But when we access the object on the heap, we have to read the pointer to a register, and then access the object with the pointer. That&amp;rsquo;s two instructions.&lt;/p>
&lt;p>Also, accessing instance on the heap may cause cache miss, which is the REAL reason that heap is slower than the stack.&lt;/p>
&lt;h5 id="micro-views-of-the-stack-allocation">Micro views of the stack allocation
&lt;/h5>&lt;p>Having talked about the stack so much, you might wonder when do we push and pop.&lt;/p>
&lt;p>The name of call stack implied that the stack has strong connection with &lt;em>Fuction Call&lt;/em>.&lt;/p>
&lt;p>You must have seen stack trace when the runtime throw an exception. The stack trace is actually the call stack.&lt;/p>
&lt;p>Stack trace when a exception is thrown in .NET:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Unhandled exception. System.Exception: Exception from Buz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Buz() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Bar() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 17
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Foo() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Main(String[] args) in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Remove some of the information, we get:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> at Program.Buz() in Program.cs:line 24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Bar() in Program.cs:line 17
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Foo() in Program.cs:line 11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Program.Main(String[] args) in Program.cs:line 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Code can be obtained from &lt;a class="link" href="https://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/StackTraceDemo" target="_blank" rel="noopener"
>https://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/StackTraceDemo&lt;/a>&lt;/p>
&lt;p>Why do we have so many functions from the Stack trace? Because the functions are called nestedly.&lt;/p>
&lt;p>The top function is where the exception was actually thrown, and the lower function is where the top function was called. Since the main thread of our program begins with &lt;code>Main()&lt;/code> function, the bottom function is always &lt;code>Main()&lt;/code>.&lt;/p>
&lt;p>When a function is called, the runtime will push a new frame to the stack, and when the function returns, the runtime will pop the frame from the stack.&lt;/p>
&lt;p>&lt;strong>A frame stores everyting essential to restore the envrionment before the function was the frame call another function.&lt;/strong>&lt;/p>
&lt;p>We know that CPU must read datas to its own &lt;em>register&lt;/em> to do the calculation, and the register is limited. So we have to store the local variables and other things in somewhere else. That&amp;rsquo;s the stack frame. A frame only stores datas of the function, and the frame is popped when the function returns.&lt;/p>
&lt;h6 id="lets-look-at-some-assembly-code">Let&amp;rsquo;s look at some assembly code
&lt;/h6>&lt;p>Having talked about how the stack so much, you might think it&amp;rsquo;s rather complicated to push and pop the stack. But it&amp;rsquo;s not. As I said before, we only have to minus the stack pointer and the minused size of memory is yours! To return the memory, we only have to add the size to the stack pointer.&lt;/p>
&lt;p>&lt;strong>NO NEED TO CLEAR THE MEMORY when we push/pop the stack. CAN YOU THINK ABOUT WHY?&lt;/strong>&lt;/p>
&lt;p>The same code as the one at the beginning of the article:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Cpp" data-lang="Cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">StructType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello, world&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StructType&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StructType&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The assembly code of the function &lt;code>foo&lt;/code> is like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">section .data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">str db &amp;#34;Hello, world&amp;#34;, 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">section .text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">global foo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">foo:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; 函数开始，保存栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push rbp ; 保存原始栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov rbp, rsp ; 设置新的栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; int i = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov dword ptr [rbp-4], 0 ; 将变量 i 初始化为 0，并保存在栈中偏移 -4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; int* p = &amp;amp;i;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lea rax, [rbp-4] ; 取得变量 i 的地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov qword ptr [rbp-8], rax ; 将 p 指向 i 的地址并保存偏移 -8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; Object* obj = new Object();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov edi, 4 ; Object 的大小为 4 字节
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call _Znwm ; 调用 operator new
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov qword ptr [rbp-16], rax ; 保存返回的对象地址到 obj 中（偏移 -16）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; std::string str = &amp;#34;Hello, world&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lea rdi, [rel str] ; 将字符串地址加载到 rdi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lea rsi, [rbp-32] ; 准备 str 变量的栈位置（偏移 -32）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call _ZNSsC1EPKc ; 调用 std::string 构造函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; StructType value = StructType {1, 2, 3};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov dword ptr [rbp-48], 1 ; 将 1 存储到 value.value1（偏移 -48）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov dword ptr [rbp-44], 2 ; 将 2 存储到 value.value2（偏移 -44）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov dword ptr [rbp-40], 3 ; 将 3 存储到 value.value3（偏移 -40）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ; 函数结束，恢复栈帧并返回
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov rsp, rbp ; 恢复原始栈指针
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop rbp ; 弹出原始栈帧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret ; 返回
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We even do have to actually DO a allocation operation. We just know that where every variable should be and read/wirte the place directly. See instructions like &lt;code>mov dword ptr [rbp...], ...&lt;/code>&lt;/p>
&lt;p>Additinally, &lt;code>push&lt;/code> and &lt;code>pop&lt;/code> instructions are also used to store/access the stack, but they are just pseduo instructions. The real instructions are &lt;code>mov&lt;/code> and &lt;code>add&lt;/code>.&lt;/p>
&lt;p>From the assembly code, we can see that how much we push/pop the stack is determined at the compile time, hard coded in the assembly instructions. You should know why all value types must be fixed size now.&lt;/p>
&lt;p>Since we only care about current frame, which is at the top of the stack, we don&amp;rsquo;t need to have store the size of every frame, the base of the whole stack, or the end of the stack. We only need to store the stack pointer, which is the top of the stack, or the base of the current frame.&lt;/p>
&lt;p>Then I&amp;rsquo;ll talk about why do we never clean the stack.&lt;/p>
&lt;p>When we pop a frame, the depth of stack just got smaller, and there will be no chance of reading uninitialized data or overwriting the data.&lt;/p>
&lt;p>When we push a frame, we always write the data before we can access it. Remember that the Compiler always say &lt;code>Uninitialized variable&lt;/code> when you try to access a variable before you write it. The compiler gurantee that you will never read uninitialized data at the compile time, so we don&amp;rsquo;t have to clear the memory, which makes function call faster.&lt;/p>
&lt;h3 id="data-inconsistency-issue-in-multi-threaded-scenarios">Data inconsistency issue in Multi-threaded scenarios
&lt;/h3>&lt;p>Watch a demo&lt;/p>
&lt;p>or Download and run yourself&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/MuitlThreadDemo" target="_blank" rel="noopener"
>https://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/MuitlThreadDemo&lt;/a>&lt;/p>
&lt;p>Note: You need to have a .NET 8 runtime installed to run the demo. Install it from
&lt;a class="link" href="https://dot.net/download" target="_blank" rel="noopener"
>dot.net&lt;/a>&lt;/p>
&lt;h4 id="lock">Lock
&lt;/h4>&lt;h4 id="read-write-lock">Read-write Lock
&lt;/h4>&lt;p>We don&amp;rsquo;t really have to lock the whole object always. In fact, the lock is to resolve the data inconsistency issue, and the data inconsistency issue is caused by the write operation.&lt;/p>
&lt;p>If all threads is just &lt;em>reading&lt;/em> the data, the data never changes, it&amp;rsquo;s just there. So we can allow multiple threads to read the data at the same time as long as there&amp;rsquo;s no thread is writing the data.&lt;/p>
&lt;p>So the key is:&lt;/p>
&lt;ul>
&lt;li>Only allow one thread to write the data&lt;/li>
&lt;li>Allow multiple threads to read the data&lt;/li>
&lt;li>Can&amp;rsquo;t have read lock and write lock at the same time&lt;/li>
&lt;/ul>
&lt;p>The lock that can resolve the issue is called &lt;strong>Read-Write Lock&lt;/strong>.&lt;/p>
&lt;p>Think about Rust&amp;rsquo;s borrow rule? Did you find the similarity?&lt;/p>
&lt;h2 id="rust">Rust
&lt;/h2>&lt;p>&lt;strong>WARN: the follow content were generated by ChatGPT&lt;/strong>&lt;/p>
&lt;!-- TODO: Rewrite it -->
&lt;h3 id="understanding-rusts-ownership-and-borrowing-rules-through-the-lens-of-read-write-locks-and-stack-memory-management">Understanding Rust&amp;rsquo;s Ownership and Borrowing Rules through the Lens of Read-Write Locks and Stack Memory Management
&lt;/h3>&lt;p>Rust’s &lt;strong>Single Owner Rule&lt;/strong> and &lt;strong>Single Mutable Reference Rule&lt;/strong> can be better understood when examined through the principles behind &lt;strong>read-write locks&lt;/strong> and &lt;strong>stack-based memory management&lt;/strong>.&lt;/p>
&lt;h4 id="rusts-ownership-and-borrowing-rules-as-a-read-write-lock-analogy">Rust’s Ownership and Borrowing Rules as a Read-Write Lock Analogy
&lt;/h4>&lt;p>In multi-threaded environments, a &lt;strong>read-write lock&lt;/strong> is a synchronization mechanism allowing multiple readers to access a resource simultaneously or granting exclusive access to a single writer. Rust’s ownership and borrowing rules mirror this access control strategy, enforcing exclusive or shared access to data at compile time:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Single Owner Rule&lt;/strong>: Rust’s concept of a single owner aligns with the idea of an &lt;strong>exclusive lock&lt;/strong> on a resource. Only one variable or function can own a piece of data at any point, ensuring exclusive access and avoiding any conflicts in memory access.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Single Mutable Reference Rule&lt;/strong>: This rule is conceptually similar to read-write locks and provides two access states:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shared, Immutable Access&lt;/strong>: Multiple immutable references (using &lt;code>&amp;amp;T&lt;/code>) to a resource are allowed, resembling the behavior of a read lock.&lt;/li>
&lt;li>&lt;strong>Exclusive, Mutable Access&lt;/strong>: Only one mutable reference (using &lt;code>&amp;amp;mut T&lt;/code>) can exist at any time, akin to a write lock, preventing simultaneous modifications by others and ensuring safe mutation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>By enforcing these rules, Rust’s compiler performs a static analysis to eliminate race conditions and memory conflicts at compile time, achieving thread safety without the runtime overhead of locks.&lt;/p>
&lt;h4 id="safe-memory-management-with-stack-allocation">Safe Memory Management with Stack Allocation
&lt;/h4>&lt;p>Rust’s ownership rules apply to both &lt;strong>stack&lt;/strong> and &lt;strong>heap memory&lt;/strong> management, maintaining safety and efficiency across both types of allocations:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Stack Memory Management&lt;/strong>: In Rust, variables allocated on the stack are assigned a clear, finite lifecycle determined at compile time, corresponding to the stack’s Last-In-First-Out (LIFO) principle. The ownership system prevents issues like double frees, as the ownership rules guarantee that only the active owner has control over memory deallocation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Heap Memory Management&lt;/strong>: When data is allocated on the heap, Rust’s ownership rules still apply, managing the memory lifecycle through single ownership. Heap memory is controlled by the owning variable, and once the variable goes out of scope, the data is automatically deallocated, freeing developers from the need for manual memory management.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Borrowing rules further ensure that data on the heap avoids race conditions. By allowing multiple immutable references (akin to a read lock) but only one mutable reference (like a write lock), Rust’s system dynamically enforces safety similar to a runtime read-write lock.&lt;/p>
&lt;h4 id="case-study-ownership-and-borrowing-in-action-with-concurrency">Case Study: Ownership and Borrowing in Action with Concurrency
&lt;/h4>&lt;p>To illustrate Rust’s ownership and borrowing in action, let’s consider a simple multithreaded example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">thread&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">vec!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Transfer ownership of `data` to the spawned thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>::&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Mutating `data`, ownership is now exclusively with the new thread.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">handle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Any attempt to access `data` in the main thread would result in a compilation error,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// as ownership has been transferred.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In this example, ownership of &lt;code>data&lt;/code> is transferred to the new thread using &lt;code>move&lt;/code>, meaning the main thread no longer has access to it. This model functions similarly to an exclusive lock but relies on ownership transfer rather than explicit locks. Rust’s ownership system enforces access control here without locks, allowing memory allocation to remain efficient while eliminating data races at compile time.&lt;/p>
&lt;h4 id="rusts-advantage-compile-time-lock-like-guarantees">Rust’s Advantage: Compile-Time Lock-Like Guarantees
&lt;/h4>&lt;p>Compared to traditional lock-based synchronization, Rust’s ownership and borrowing rules rely on compile-time checks to ensure memory safety, removing the need for runtime locks. The Rust compiler statically analyzes a variable’s lifecycle and reference status, ensuring memory access safety without runtime overhead, which both boosts memory efficiency and minimizes errors.&lt;/p>
&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>Rust’s ownership and borrowing model integrates the benefits of read-write locks with stack-based memory management principles. By statically enforcing exclusive or shared access, Rust guarantees thread safety and efficient memory management without the performance costs of locks. This unique approach ensures that concurrent programming in Rust is both efficient and safe by design.&lt;/p></description></item><item><title>[OS Week1] 作业常见问题</title><link>https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="用-github-网页端编辑文件">用 GitHub 网页端编辑文件
&lt;/h2>&lt;p>不要在 GitHub 网页端编辑文件！！！否则你会收到下面的警告:&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_comment.png"
width="1380"
height="888"
srcset="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_comment_hucbdea63992ab51ac3eebe1740afbda02_75580_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_comment_hucbdea63992ab51ac3eebe1740afbda02_75580_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="comment"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>以及一封邮件：&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_email.png"
width="545"
height="248"
srcset="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_email_hud014e096562ecf4f8957494a934ac7d5_88278_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/warn_email_hud014e096562ecf4f8957494a934ac7d5_88278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="email"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;p>&lt;del>我们在将来可能会强制删除你的提交如果你继续在网页端编辑文件。&lt;/del>&lt;/p>
&lt;p>10.25 更新：目前已经实装，使用网页进行操作的任何文件会被强制破坏:&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/reverted.png"
width="1366"
height="709"
srcset="https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/reverted_hu420bbfb13cf387e82bc723630a341993_55973_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/assets/reverted_hu420bbfb13cf387e82bc723630a341993_55973_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="reverted"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;h2 id="ls--d-">ls -d ../*/
&lt;/h2>&lt;p>题目要求“列出父文件夹的文件夹项”。可能是翻译问题，Directory entry被我直接翻译成文件夹项可能导致大家（当然还有大家的好帮手 chatGPT）产生了误解，应当翻译为目录项更为准确。&lt;/p>
&lt;p>Directory entry　是指一个文件夹内包含的如&lt;em>文件夹&lt;/em>，&lt;em>文件&lt;/em>，&lt;em>链接&lt;/em>等项，因此只需要&lt;code>ls ..&lt;/code>就可以列出父文件夹的目录项。&lt;/p>
&lt;h3 id="补充信息">补充信息
&lt;/h3>&lt;p>ls 通过&lt;code>getdents&lt;/code>系统调用获取目录项。&lt;code>getdents&lt;/code>就是 get directory entries 的缩写。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.man7.org/linux/man-pages/man2/getdents.2.html" target="_blank" rel="noopener"
>getdents syscall&lt;/a>&lt;/p>
&lt;h2 id="环境变量">环境变量？
&lt;/h2>&lt;ul>
&lt;li>误区 - Where is Environment Variables?&lt;/li>
&lt;/ul>
&lt;p>我看到有同学说在 “&lt;code>.bashrc&lt;/code> 里修改环境变量”，这种说法是不准确的。&lt;/p>
&lt;p>环境变量是操作系统的一部分，不是某个文件里的内容。&lt;code>.bashrc&lt;/code> 是一个 shell 脚本，用于配置 shell 的行为，它会在　Shell 启动时执行。因此你事实上是在 &lt;code>.bashrc&lt;/code> 里添加了&lt;strong>修改&lt;/strong>环境变量的命令。&lt;/p>
&lt;h3 id="那到底环境变量是储存在哪儿的呢">那到底环境变量是储存在哪儿的呢？
&lt;/h3>&lt;p>环境变量是一个与&lt;strong>进程&lt;/strong>绑定的概念。在进程被创建时，操作系统会将环境变量传递给进程。&lt;/p>
&lt;h4 id="操作系统传递环境">操作系统传递环境
&lt;/h4>&lt;p>在 &lt;code>fork&lt;/code>，&lt;code>exec&lt;/code> 等系统调用中，操作系统会在进程的地址空间中创建一个环境变量表，然后将&lt;strong>父进程&lt;/strong>的环境变量表&lt;strong>复制&lt;/strong>到&lt;strong>子进程&lt;/strong>的环境变量表中。并在子进程的sp指针后面的某一个位置存放一个指向环境变量表的指针。&lt;/p>
&lt;h4 id="进程接收环境变量">进程接收环境变量
&lt;/h4>&lt;p>子进程刚开始运行时（在你们熟知的main函数前），会通过 sp 指针构造参数 &lt;code>int argc&lt;/code>, &lt;code>char *argv[]&lt;/code>, &lt;code>char *envp[]&lt;/code>。&lt;code>envp&lt;/code> 就是指向环境变量表的指针。这三个参数也是 C 语言的标准 main 函数签名的参数。&lt;/p>
&lt;p>某些跨平台语言会对环境变量的接收方式进行封装，因为不同的操作系统可能有不同的实现。不过你仍然可以通过标准库的函数获取环境变量，例如　C# 的 &lt;code>System.Environment.GetEnvironmentVariable()&lt;/code> 和 Python 的 &lt;code>os.environ&lt;/code>。&lt;/p>
&lt;h2 id="root-用户的命令提示符">root 用户的命令提示符
&lt;/h2>&lt;p>普通用户的 shell 提示符通常是 &lt;code>$&lt;/code> 或 &lt;code>&amp;gt;&lt;/code>，而 root 用户的 shell 提示符通常是 &lt;code>#&lt;/code>。&lt;/p>
&lt;h2 id="连续创建嵌套文件夹">连续创建嵌套文件夹
&lt;/h2>&lt;p>记得添加 &lt;code>-p&lt;/code> 选项。如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p top/middle/bottom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="重命名-test-文件夹为-test1">重命名 &lt;code>test&lt;/code> 文件夹为 &lt;code>test1&lt;/code>？
&lt;/h2>&lt;p>可能错误的做法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mv test/ test1/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正确的做法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mv &lt;span class="nb">test&lt;/span> test1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>问题？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /tmp &amp;gt; &lt;span class="nb">cd&lt;/span> &lt;span class="k">$(&lt;/span>mktemp -d&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; mkdir &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; mv test/ test1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; &lt;span class="c1"># test 被重命名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; mkdir &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; mv test/ test1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; ls test1/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy&amp;gt; &lt;span class="c1"># test 被移动&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fork-仓库再提交">Fork 仓库再提交？
&lt;/h2>&lt;p>课上说&lt;/p>
&lt;h2 id="工作目录问题">工作目录问题
&lt;/h2>&lt;p>课上说&lt;/p>
&lt;h2 id="linux-命令执行成功">Linux 命令执行成功？
&lt;/h2>&lt;p>没有报错就是成功了，一般都不会有输出。&lt;/p>
&lt;h2 id="ls-命令没有输出">ls 命令没有输出
&lt;/h2>&lt;p>那是因为文件夹就是空的。&lt;/p>
&lt;h2 id="最后">最后
&lt;/h2>&lt;p>提醒大家不要过度相信 AI，AI 可能会给出错误的答案。即使 AI 给出了正确答案，你也要自己去理解才能更好地掌握知识。&lt;/p>
&lt;p>有的同学的答案太离谱了，完全就是 AI 生成的答案。题目明明是一张图片，但是直接把 markdown 原文复制给 AI，AI 又看不到图片，就只能回答“这是一张图片”。&lt;/p>
&lt;p>但是并不是反对大家使用 AI，只是要保存怀疑和求证的态度，以及自己的思考能力和学习能力。&lt;/p></description></item><item><title>[OS Week2] 作业常见问题</title><link>https://loongson-neuq.pages.dev/p/os-week2-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week2-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="编码规范">编码规范
&lt;/h2>&lt;p>上次课上提醒了，Rust 有 &lt;code>clippy&lt;/code> 和 &lt;code>fmt --check&lt;/code> 工具来严格检查代码风格，这次作业中有同学的代码风格不够规范，希望大家能够注意一下。&lt;/p>
&lt;p>总的来说，无非就是&lt;/p>
&lt;ul>
&lt;li>
&lt;p>该有空格的地方别省，不该有的地方别多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不该 mutable 的变量别加 &lt;code>mut&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>定义变量时就要应该想明白这个变量需不需要是 mutable 的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="空格">空格
&lt;/h3>&lt;h4 id="1-逗号后面要有空格">1. 逗号后面要有空格
&lt;/h4>&lt;p>这也是英语语法的规范，逗号后面要有空格，前面没有。&lt;/p>
&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="2-operator-前后要有空格">2. Operator 前后要有空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="3-函数定义时参数列表的括号后要有空格前面不能有">3. 函数定义时，参数列表的括号后要有空格，前面不能有
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4-括号内不要有空格">4. 括号内不要有空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="5--标明类型时与类型间要有空格前面没有">5. &lt;code>:&lt;/code> 标明类型时，与类型间要有空格，前面没有
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>:&lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="6--与前面的元素间要有空格">6. &lt;code>{&lt;/code> 与前面的元素间要有空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="7-if-和逻辑表达式间要有空格">7. if 和逻辑表达式间要有空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;p>没有 bad，你根本编译不过&lt;/p>
&lt;h4 id="8-不要连续搞多个空行">8. 不要连续搞多个空行
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x is true&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x is true&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="9---前后要有空格">9. &lt;code>-&amp;gt;&lt;/code> 前后要有空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>-&amp;gt;&lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="10--不要单独起一行">10. &lt;code>{&lt;/code> 不要单独起一行
&lt;/h4>&lt;p>我不喜欢（因为我是 Microsoft 系的），但是写 Rust 就要符合 Rust 的规范&lt;/p>
&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="11-别瞎几把缩进">11. 别瞎几把缩进
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="12-没必要的地方别加空格">12. 没必要的地方别加空格
&lt;/h4>&lt;p>Good:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bad:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">·&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="err">···&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">····&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">····&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了明显用 &lt;code>·&lt;/code> 表示的空格&lt;/p>
&lt;p>该加空格的地方一般加一个就够了，别加一大堆&lt;/p>
&lt;p>例如，行尾注释的 &lt;code>//&lt;/code> 前后一个空格就够了&lt;/p>
&lt;h2 id="编码规范总结">编码规范总结
&lt;/h2>&lt;p>大概就这些规则最常用，希望大家能够注意一下，写代码的时候多注意一下，不要让自己的代码风格太差。&lt;/p>
&lt;p>记不得让 &lt;code>clippy&lt;/code> 和 &lt;code>fmt --check&lt;/code> 来检查一下&lt;/p>
&lt;h2 id="rustlings">Rustlings
&lt;/h2>&lt;h3 id="if1">if1
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// if1.rs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Execute `rustlings hint if1` or use the `hint` watch subcommand for a hint.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">bigger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Complete this function to return the bigger number!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Do not use:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// - another function call
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// - additional variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// HINT: in Rust, if you want to compare two values,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// cmp is PREFERRED over &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// eg.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// match a.cmp(&amp;amp;b) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// std::cmp::Ordering::Greater =&amp;gt; a,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// _ =&amp;gt; b,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// std::cmp 可以处理 parital （偏序）关系，
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 而运算符会无法处理偏序关系，因此可能出现a &amp;gt; b, a &amp;lt; b 和 a == b 同时为 false 的情况。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 搜索：自反性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 因此对于自定义类型，最好使用 cmp 方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 同时，使用 match 控制流还更容易处理多分支的情况。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="if2">if2
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// if2.rs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Step 1: Make me compile!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Step 2: Get the bar_for_fuzz and default_to_baz tests passing!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Execute `rustlings hint if2` or use the `hint` watch subcommand for a hint.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo_if_fizz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fizzish&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fizzish&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;fizz&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fizzish&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;fuzz&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// HINT: in such circumstances, pattern matching is more elegant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// match fizzish {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// &amp;#34;fizz&amp;#34; =&amp;gt; &amp;#34;foo&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// &amp;#34;fuzz&amp;#34; =&amp;gt; &amp;#34;bar&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// _ =&amp;gt; &amp;#34;baz&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="if3">if3
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// if3.rs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Execute `rustlings hint if3` or use the `hint` watch subcommand for a hint.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">animal_habitat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">animal&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span> &lt;span class="kt">str&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// HINT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// In real development situations,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// if you really need to convert an animal to an identifier and then to habitat,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// You should split this function into two functions.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Also, pattern matching is more elegant in this case.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">animal&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;crab&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">animal&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;gopher&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">animal&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;snake&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// DO NOT CHANGE THIS STATEMENT BELOW
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">habitat&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Beach&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Burrow&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">identifier&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Desert&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Unknown&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">habitat&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="quiz1">quiz1
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">calculate_price_of_apples&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qty&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">qty&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">qty&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">qty&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// HINT: You will like pattern matching
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// match qty {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 0..=40 =&amp;gt; qty * 2,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// _ =&amp;gt; qty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="alphabetic">alphabetic?
&lt;/h3>&lt;p>你可能不信，除了你认为的 ascii 英文字母，以下字符都是 alphabetic 的&lt;/p>
&lt;ul>
&lt;li>&lt;code>字&lt;/code> a Chinese character&lt;/li>
&lt;li>&lt;code>あ&lt;/code> and &lt;code>ア&lt;/code> Hiragana and Katakana&lt;/li>
&lt;li>&lt;code>ㅎ&lt;/code> Korean Hangul&lt;/li>
&lt;li>&lt;code>ａ&lt;/code> Fullwidth Letter(this is NOT &lt;code>a&lt;/code>)&lt;/li>
&lt;li>and characters from other languages!&lt;/li>
&lt;/ul>
&lt;p>in fact, all CJK characters are alphabetic. And letters from other languages like russian, greek, etc. are also alphabetic. But I can&amp;rsquo;t show you because I don&amp;rsquo;t know how to type them.&lt;/p>
&lt;p>这些是由 Unicode 规范定义的，所以 Rust 的 &lt;code>char::is_alphabetic&lt;/code> 方法也是按照 Unicode 规范来判断的。&lt;/p>
&lt;p>&lt;strong>因此，你可能会想使用&lt;code>is_ascii_alphabetic&lt;/code> 而不是 &lt;code>is_alphabetic&lt;/code>&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;字&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;あ&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ア&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ㅎ&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">assert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ａ&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// uncomment this line will cause panic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// assert!(&amp;#39;1&amp;#39;.is_alphabetic());
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;All tests passed!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;code=fn&amp;#43;main%28%29&amp;#43;%7B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;assert%21%28%27%E5%AD%97%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;assert%21%28%27%E3%81%82%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;assert%21%28%27%E3%82%A2%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;assert%21%28%27%E3%85%8E%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;assert%21%28%27%EF%BD%81%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;%2F%2F&amp;#43;uncomment&amp;#43;this&amp;#43;line&amp;#43;to&amp;#43;see&amp;#43;panic%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;%2F%2F&amp;#43;assert%21%28%271%27.is_alphabetic%28%29%29%3B%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;%0D%0A&amp;#43;&amp;#43;&amp;#43;&amp;#43;println%21%28%22All&amp;#43;tests&amp;#43;passed%21%22%29%3B%0D%0A%7D" target="_blank" rel="noopener"
>run this code!&lt;/a>&lt;/p>
&lt;p>Links:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.unicode.org/versions/latest/" target="_blank" rel="noopener"
>Unicode standard&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/rust-lang/rust/blob/9ccfedf186d1ee3ef7c17737167f2f90276f9ed0/library/core/src/char/methods.rs#L741-L749" target="_blank" rel="noopener"
>Rust char::is_alphabetic&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#[must_use]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[stable(feature = &lt;/span>&lt;span class="s">&amp;#34;rust1&amp;#34;&lt;/span>&lt;span class="cp">, since = &lt;/span>&lt;span class="s">&amp;#34;1.0.0&amp;#34;&lt;/span>&lt;span class="cp">)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">is_alphabetic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="sc">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="sc">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;\x7f&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unicode&lt;/span>::&lt;span class="n">Alphabetic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="extract-the-second-element-of-a-tuple">Extract the second element of a tuple
&lt;/h3>&lt;p>Common solution:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Also, you can use pattern matching to deconstruct the tuple:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tuple&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>if you need to the first 3 elements of a 10-element tuple, this is the way to go.&lt;/p>
&lt;h3 id="inclusive-range">Inclusive range
&lt;/h3>&lt;p>Rust just merged inclusive ranges in 1.80.0(quite recent)&lt;/p>
&lt;p>see &lt;a class="link" href="https://github.com/rust-lang/rust/issues/37854" target="_blank" rel="noopener"
>https://github.com/rust-lang/rust/issues/37854&lt;/a>&lt;/p>
&lt;p>so you can write:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">slice&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is basically equivalent to:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nice_slice&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="implicit-range">Implicit range
&lt;/h4>&lt;p>&lt;code>..&lt;/code> 不指定开始和结束端点，实际等价于&lt;code>TYPE::MIN..=TYPE::MAX&lt;/code>&lt;/p>
&lt;p>通常情况下为 i32，也就是 &lt;code>-2147483648..=2147483647&lt;/code>&lt;/p>
&lt;p>用作 indexer 时类型为 usize，也就是 &lt;code>0..=18446744073709551615&lt;/code>&lt;/p>
&lt;p>也可以仅指定一边的端点，例如 &lt;code>..5&lt;/code> 或 &lt;code>5..&lt;/code>&lt;/p>
&lt;h2 id="solutions">Solutions
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/Loongson-neuq/rustlings-Cai1Hsu/pull/7/files" target="_blank" rel="noopener"
>https://github.com/Loongson-neuq/rustlings-Cai1Hsu/pull/7/files&lt;/a>&lt;/p></description></item><item><title>[OS Week1] Git and Linux Basics</title><link>https://loongson-neuq.pages.dev/p/os-week1-git-and-linux-basics/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/os-week1-git-and-linux-basics/</guid><description>&lt;img src="https://loongson-neuq.pages.dev/p/os-week1-git-and-linux-basics/background.png" alt="Featured image of post [OS Week1] Git and Linux Basics" />&lt;h2 id="git">Git
&lt;/h2>&lt;h3 id="installations">Installations
&lt;/h3>&lt;h4 id="windows">Windows
&lt;/h4>&lt;p>Download installer from &lt;a class="link" href="https://git-scm.com/downloads/win" target="_blank" rel="noopener"
>Git For Windows&lt;/a>&lt;/p>
&lt;p>or use winget&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">winget install Git.Git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="linux">Linux
&lt;/h4>&lt;p>Install with your package manager&lt;/p>
&lt;h4 id="macos">MacOS
&lt;/h4>&lt;p>Install with Homebrew&lt;/p>
&lt;h3 id="configuration">Configuration
&lt;/h3>&lt;h4 id="global-configuration">Global Configuration
&lt;/h4>&lt;p>Detailed instructions: &lt;a class="link" href="https://manual.caiyi1.me/use-git/configure/" target="_blank" rel="noopener"
>manual.caiyi1.me&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global user.name &lt;span class="s2">&amp;#34;Your Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email &lt;span class="s2">&amp;#34;Your Email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="authentication">Authentication
&lt;/h4>&lt;p>For code hosting services like GitHub, GitLab, Gitee, etc, you have to proof the user pushing(or pull) the code HAS the permission to do so.&lt;/p>
&lt;p>Traditional way is to use SSH key, which is a pair of keys, one is public, one is private. Public key is stored on the server, and private key is stored on your local machine.&lt;/p>
&lt;p>国内平台如 Gitee 只能使用 SSH key 进行认证, 不能使用 credential helper。&lt;/p>
&lt;p>Still widely used, but is outdated. As Git allows custom credential helper, you can use a more secure way(and easier) to authenticate.&lt;/p>
&lt;h5 id="windows-1">Windows
&lt;/h5>&lt;p>Uses &lt;code>git credential-manager&lt;/code>, which is a part of Git for Windows.&lt;/p>
&lt;h6 id="auth-github">Auth Github
&lt;/h6>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git credential-manager github login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Follow the GUI instructions to login.&lt;/p>
&lt;h4 id="linux-1">Linux
&lt;/h4>&lt;h5 id="auth-github-1">Auth Github
&lt;/h5>&lt;p>uses GitHub CLI, which is provided by the distro&amp;rsquo;s package manager.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install gh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Login with&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gh auth login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Setup git info&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gh auth setup-git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Follow the instructions to login.&lt;/p>
&lt;h3 id="basic-usage">Basic Usage
&lt;/h3>&lt;p>Detailed instructions: &lt;a class="link" href="https://manual.caiyi1.me/use-git/try-git/" target="_blank" rel="noopener"
>manual.caiyi1.me&lt;/a>&lt;/p>
&lt;h4 id="init">Init
&lt;/h4>&lt;h4 id="clone">Clone
&lt;/h4>&lt;h4 id="commit">Commit
&lt;/h4>&lt;h4 id="push">Push
&lt;/h4>&lt;h4 id="pull">Pull
&lt;/h4>&lt;h4 id="fetch">Fetch
&lt;/h4>&lt;h2 id="linux-basics">Linux Basics
&lt;/h2>&lt;p>Linux 不只是一个工具，也可以是像 Windows 一样用于日常工作的操作系统。&lt;/p>
&lt;p>KDE 桌面环境提供与 Windows 类似的体验，几乎没有任何学习成本。&lt;/p>
&lt;h3 id="installations-1">Installations
&lt;/h3>&lt;h4 id="choose-a-way-to-install-linux">Choose a way to install Linux
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>Physical Machine&lt;/p>
&lt;ul>
&lt;li>Full performance&lt;/li>
&lt;li>Graphics interface&lt;/li>
&lt;li>Take up a lot of space&lt;/li>
&lt;li>May not be easy to install if you are not experienced&lt;/li>
&lt;li>Recommend for those who want immersive experience&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>WSL2&lt;/p>
&lt;ul>
&lt;li>Easy to install&lt;/li>
&lt;li>Extremely low performance cost&lt;/li>
&lt;li>Disk-friendly&lt;/li>
&lt;li>Battery-friendly&lt;/li>
&lt;li>Only Command Line Interface, but you still uses Windows&amp;rsquo; GUI&lt;/li>
&lt;li>Good integration with Host OS(Windows)&lt;/li>
&lt;li>Can run Linux GUI applications with X server (although not recommended for performance)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Virtual Machine - Really not recommended&lt;/p>
&lt;ul>
&lt;li>Really low performance&lt;/li>
&lt;li>Memory unfriendly&lt;/li>
&lt;li>Battery unfriendly&lt;/li>
&lt;li>Graphics interface&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="#additional-linux-installation-guide" >Installation Guide&lt;/a>&lt;/p>
&lt;h3 id="why-linux">Why Linux
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Excellent Command Line Interface&lt;/p>
&lt;ul>
&lt;li>Shell&lt;/li>
&lt;li>各种命令行工具&lt;/li>
&lt;li>丰富的管道命令&lt;/li>
&lt;li>丰富的脚本语言，易于自动化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Software Package Management&lt;/p>
&lt;ul>
&lt;li>无需手动下载安装&lt;/li>
&lt;li>依赖自动解决&lt;/li>
&lt;li>减少重复软件下载&lt;/li>
&lt;li>便于卸载，没有毒瘤软件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Developer-friendly&lt;/p>
&lt;ul>
&lt;li>Editor
&lt;ul>
&lt;li>Vim/Nvim&lt;/li>
&lt;li>VSCode&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Compiler
&lt;ul>
&lt;li>GCC&lt;/li>
&lt;li>Clang&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cross-platform development&lt;/p>
&lt;ul>
&lt;li>CMake/Make&lt;/li>
&lt;li>LLVM，GCC&lt;/li>
&lt;li>OS 内核需要 cross-compile&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Highly customizable&lt;/p>
&lt;ul>
&lt;li>Shell&lt;/li>
&lt;li>Window Manager&lt;/li>
&lt;li>Desktop Environment&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Open Source&lt;/p>
&lt;ul>
&lt;li>无需担心软件的安全性&lt;/li>
&lt;li>无需担心软件的可用性&lt;/li>
&lt;li>无需担心软件的可维护性&lt;/li>
&lt;li>无需担心软件的隐私问题 (大多数情况，取决于你的使用方式)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="shortcomings">Shortcomings
&lt;/h4>&lt;ul>
&lt;li>Sucks when you need to use Windows-only software&lt;/li>
&lt;li>Suck graphics driver support (Not for all hardware)&lt;/li>
&lt;li>Suck graphics backend support
&lt;ul>
&lt;li>X.org
&lt;ul>
&lt;li>Old, and has not been updated for a long time
&lt;ul>
&lt;li>May have some security issues&lt;/li>
&lt;li>May not support some new features&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>But still widely used&lt;/li>
&lt;li>Good support for software&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wayland
&lt;ul>
&lt;li>Lacks many features&lt;/li>
&lt;li>Bad support for some software&lt;/li>
&lt;li>Really HIGH rendering latency
&lt;ul>
&lt;li>You can feel it!&lt;/li>
&lt;li>Not suitable for latency-sensitive games, like rhythm games&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nvidia support sucks
&lt;ul>
&lt;li>Games may run with lower performance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Higher power consumption than X.org&lt;/li>
&lt;li>Modern, updated frequently
&lt;ul>
&lt;li>Trending&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>But I still recommend you to use Wayland as long as you don&amp;rsquo;t have any problems with it.&lt;/p>
&lt;h3 id="unboxing">Unboxing
&lt;/h3>&lt;p>以下内容以相对稳定且简单 Ubuntu 22 作为演示。&lt;/p>
&lt;h4 id="package-manager">Package Manager
&lt;/h4>&lt;h5 id="whats-package-manager">Whats Package Manager
&lt;/h5>&lt;p>包管理器用于管理 GNU/Linux 发行版的包（应用），不同于 Windows 的手动下载并安装，在 Linux 下安装 Git 只用输入一条命令。&lt;/p>
&lt;p>可以通过类比的方式理解包管理器和包：&lt;/p>
&lt;blockquote>
&lt;p>左右两项不等价&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Windows&lt;/th>
&lt;th style="text-align:center">Linux&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">应用商店&lt;/td>
&lt;td style="text-align:center">包管理器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">App&lt;/td>
&lt;td style="text-align:center">包&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>大多数 Linux 发行版都有自己的包管理器：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Debian&lt;/th>
&lt;th style="text-align:center">RPM&lt;/th>
&lt;th style="text-align:center">Pacman&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">apt, dpkg&lt;/td>
&lt;td style="text-align:center">yum, rpm&lt;/td>
&lt;td style="text-align:center">pacman&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ubuntu 的包管理器是 &lt;code>apt&lt;/code> 和 &lt;code>dpkg&lt;/code>，其中 apt 用于安装云端软件源的包，dpkg 则用于安装本地包。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># output: apt 2.4.12 (amd64)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="usage">Usage
&lt;/h5>&lt;p>如果遇到了网络问题，请跳转下方 Mirror。&lt;/p>
&lt;ol>
&lt;li>更新软件包列表&lt;/li>
&lt;/ol>
&lt;p>在安装包之前，一般会同步云端软件包信息，保证依赖关系的正确。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>更新所有软件包&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>安装软件源的包&lt;/li>
&lt;/ol>
&lt;p>将 &lt;code>&amp;lt;name&amp;gt;&lt;/code> 换成要安装的包名，多个则以空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>安装本地 deb 包&lt;/li>
&lt;/ol>
&lt;p>安装中可能会提示依赖缺失，应使用 apt 安装缺失的依赖。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo dpkg -i /path/to/xxx.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>卸载包&lt;/li>
&lt;/ol>
&lt;p>将 &lt;code>&amp;lt;name&amp;gt;&lt;/code> 换成要卸载的包名，多个则以空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt remove &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>查找包&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt search xxx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="mirror">Mirror
&lt;/h5>&lt;p>在使用 apt 时提示网络错误时，可以通过换源解决。&lt;/p>
&lt;p>修改系统重要文件前记得备份：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo vim /etc/apt/sources.list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>在 Ubuntu 24.04 之前，Ubuntu 的软件源配置文件使用传统的 One-Line-Style，路径为 /etc/apt/sources.list；从 Ubuntu 24.04 开始，Ubuntu 的软件源配置文件变更为 DEB822 格式，路径为 /etc/apt/sources.list.d/ubuntu.sources。
参考 &lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener"
>https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在文件的顶部加入以下行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后更新软件包列表&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="install-common-software">Install Common Software
&lt;/h4>&lt;h5 id="pakage-for-os-development">Pakage for OS Development
&lt;/h5>&lt;ul>
&lt;li>Git&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>VSCode&lt;/li>
&lt;/ul>
&lt;p>以下内容来自 &lt;a class="link" href="https://manual.caiyi1.me/get-started/vscode" target="_blank" rel="noopener"
>manual&lt;/a>&lt;/p>
&lt;p>实体机用户请在 Linux 下安装 VSCode：&lt;/p>
&lt;p>手动安装：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>从 &lt;a class="link" href="https://code.visualstudio.com" target="_blank" rel="noopener"
>VSCode 官网&lt;/a> 下载 deb 包。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 dpkg 安装。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo dpkg -i code_xxx.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>包管理器安装：&lt;/p>
&lt;ol>
&lt;li>添加源。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get install wget gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget -qO- https://packages.microsoft.com/keys/microsoft.asc &lt;span class="p">|&lt;/span> gpg --dearmor &amp;gt; packages.microsoft.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo install -D -o root -g root -m &lt;span class="m">644&lt;/span> packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span>sudo tee /etc/apt/sources.list.d/vscode.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -f packages.microsoft.gpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>安装。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install apt-transport-https
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install code &lt;span class="c1"># or code-insiders&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Rust&lt;/li>
&lt;/ul>
&lt;p>以下内容源自 &lt;a class="link" href="https://learningos.cn/rCore-Tutorial-Guide-2024S/0setup-devel-env.html" target="_blank" rel="noopener"
>rCore-Tutorial-Guide-2024S 文档&lt;/a>&lt;/p>
&lt;ol start="0">
&lt;li>如果遇到网络问题&lt;/li>
&lt;/ol>
&lt;p>配置环境变量：&lt;/p>
&lt;p>可以在当前终端执行（当前终端有效），或者写入 &lt;code>~/.bashrc&lt;/code>（永久，打开新的终端后）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">RUSTUP_DIST_SERVER&lt;/span>&lt;span class="o">=&lt;/span>https://mirrors.ustc.edu.cn/rust-static
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">RUSTUP_UPDATE_ROOT&lt;/span>&lt;span class="o">=&lt;/span>https://mirrors.ustc.edu.cn/rust-static/rustup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑 &lt;code>~/.cargo/config&lt;/code>：&lt;/p>
&lt;p>添加以下行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">crates-io&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">replace-with&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;ustc&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ustc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">registry&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;sparse+https://mirrors.ustc.edu.cn/crates.io-index/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>安装 rustup&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">curl --proto &lt;span class="s1">&amp;#39;=https&amp;#39;&lt;/span> --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>QEMU&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gawk build-essential bison flex texinfo gperf libtool patchutils bc &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> zlib1g-dev libexpat-dev pkg-config libglib2.0-dev libpixman-1-dev git tmux python3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 下载 QEMU 源码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://download.qemu.org/qemu-7.0.0.tar.xz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 解压&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar xvJf qemu-7.0.0.tar.xz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 进入子目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> qemu-7.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 编译安装并配置 RISC-V 支持&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure --target-list&lt;span class="o">=&lt;/span>riscv64-softmmu,riscv64-linux-user
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make -j&lt;span class="k">$(&lt;/span>nproc&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="awesome-tools">Awesome Tools
&lt;/h5>&lt;p>为了提高开发效率，推荐部分小工具。&lt;/p>
&lt;ol>
&lt;li>CLI tools&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>ranger: 文件管理器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bat: 文件查看器，更好的 &lt;code>less&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tmux: 终端复用器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>lazygit: &lt;code>git&lt;/code> TUI 管理工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>eza: 有色彩和图标的 &lt;code>ls&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="command-line">Command Line
&lt;/h3>&lt;h4 id="foreword">Foreword
&lt;/h4>&lt;p>Shell 是一个解释器，它接受用户输入的命令，然后&lt;strong>调用相应的应用程序或内建命令函数&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Windows&lt;/p>
&lt;ul>
&lt;li>PowerShell - fairly good, but lack customization. Slow, for still using .NET Framework(capability reasons, but can be replaced by .NET)
&lt;ul>
&lt;li>Update to PowerShell 7, which is cross-platform&lt;/li>
&lt;li>&lt;a class="link" href="https://aka.ms/PSWindows" target="_blank" rel="noopener"
>https://aka.ms/PSWindows&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CMD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Unix-like (inclue Linux, MacOS, FreeBSD&amp;hellip;)&lt;/p>
&lt;ul>
&lt;li>Bash - default, but MUCH better than Windows'&lt;/li>
&lt;li>Zsh - most popular, maybe hard to configure&lt;/li>
&lt;li>Fish - easy to use, but not recommended for scripting&lt;/li>
&lt;li>&amp;hellip; like sh, dash&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对于 Unix, 各种 Shell 的语法大致相同，内建命令大多数与 Bash 相同。甚至 Windows 的 PowerShell 也开始为某些 Bash 的内建命令通过 alias 提供支持。&lt;/p>
&lt;p>Fish 是一个很好的 Shell，但是不适合用于编写脚本，因为它的语法和其他 Shell 不同。因此建议大家使用 Bash 或者 Zsh。如果你想配置一个好看并且功能强大的 Shell，可以尝试使用 Zsh。&lt;/p>
&lt;p>Detailed instructions: &lt;a class="link" href="https://manual.caiyi1.me/use-git/hug-cli/" target="_blank" rel="noopener"
>manual.caiyi1.me&lt;/a>&lt;/p>
&lt;h4 id="shell-script">Shell script
&lt;/h4>&lt;p>Shell 脚本是一种文本文件，其中包含了一系列的命令（和我们在 shell 前端中输入的一样）。Shell 会按照脚本中的命令顺序执行。&lt;/p>
&lt;p>下面尝试把你输入过的命令写入一个脚本文件，然后执行这个脚本文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;----------------&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行时，如果使用&lt;code>./script.sh&lt;/code>执行，需要给予执行权限，使用&lt;code>chmod +x script.sh&lt;/code>。如果调用 shell 执行，例如&lt;code>bash script.sh&lt;/code>，则不需要给予执行权限。&lt;/p>
&lt;p>执行 shell 脚本时，会新开一个 shell 进程执行脚本，因此脚本中的变量不会影响到当前 shell。&lt;/p>
&lt;p>脚本的工作目录与执行脚本的 shell 的工作目录相同。不是脚本文件的目录。&lt;/p>
&lt;h3 id="additional-linux-installation-guide">Additional: Linux Installation Guide
&lt;/h3>&lt;h4 id="wsl2">WSL2
&lt;/h4>&lt;p>Boot up your Windows, enter Microsoft Store, search for &amp;ldquo;WSL&amp;rdquo;, select an distro and install it.&lt;/p>
&lt;p>Ubuntu is recommended for beginners as it has official support.&lt;/p>
&lt;p>After installation, you can open it from Start Menu or Windows Terminal.&lt;/p>
&lt;p>The first time you uses it, you have to set up a username and password, not asking for your windows&amp;rsquo;s password.&lt;/p>
&lt;h4 id="physical-machine">Physical Machine
&lt;/h4>&lt;p>Partition your disk in Windows. You have to create at least two partitions, one for Boot volume, one for Root(Where the system files are stored).&lt;/p>
&lt;p>The Boot volume should be at least 1GB, and the Root volume should be at least 50GB.&lt;/p>
&lt;p>Download a distro&amp;rsquo;s ISO file from its official website, and flash it to a USB drive to make a bootable drive.&lt;/p>
&lt;p>Reboot your computer to BIOS/UEFI, and boot from the USB drive.&lt;/p>
&lt;p>Choose manual partitioning if you don&amp;rsquo;t want to lose your data and Windows.&lt;/p>
&lt;p>Assign the Boot volume to &lt;code>/boot&lt;/code>, and the Root volume to &lt;code>/&lt;/code>.&lt;/p>
&lt;p>Choose the boot volume to be formatted as FAT32, and the root volume to be formatted as ext4 or Btrfs.&lt;/p>
&lt;p>After installation, you can shutdown your computer and unplug the USB drive.&lt;/p>
&lt;h5 id="must-read">##MUST READ##
&lt;/h5>&lt;p>You may lose the ability to boot into Windows, as the bootloader is replaced by the Linux bootloader.&lt;/p>
&lt;p>You can either select the system to boot in the BIOS/UEFI, or use a bootloader like GRUB/rEFInd.&lt;/p>
&lt;p>Note that GRUB can NOT detect bootable devices at runtime while rEFInd can.&lt;/p>
&lt;h4 id="virtual-machine">Virtual Machine
&lt;/h4>&lt;p>Download a distro&amp;rsquo;s ISO file from its official website, and create a new VM in your VM software. Assign at least 50GB of disk space and 4GB of RAM.&lt;/p>
&lt;p>Mount the ISO file to the VM, and boot from it.&lt;/p>
&lt;p>Install the system following the instructions along the way.&lt;/p>
&lt;p>You can choose &amp;ldquo;Clean Install&amp;rdquo; since we don&amp;rsquo;t have any data to lose.&lt;/p>
&lt;p>After installation, you can shutdown the VM and unmount the ISO file. Then you can boot into the system.&lt;/p></description></item><item><title>Verilog 基础知识</title><link>https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;h2 id="基础知识">基础知识
&lt;/h2>&lt;h3 id="模块module">模块(Module)
&lt;/h3>&lt;p>​Verilog中的module可以看成一个具有输入输出端口的黑盒子，该黑盒子有输入和输出接口(信号)，通过把输入在盒子中执行某些操作来实现某项功能。(类似于C语言中的函数)&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module.png"
width="996"
height="468"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module_huf162340d60312438ca10b5bb1786ae94_83604_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/module_huf162340d60312438ca10b5bb1786ae94_83604_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="510px"
>&lt;/p>
&lt;h4 id="模块描述">模块描述
&lt;/h4>&lt;p>顶层模块(top_module)结构用Verilog语言可描述为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>模块以module 开始，endmodule结束&lt;/li>
&lt;li>top_module 为模块名&lt;/li>
&lt;li>input : 为输入端口&lt;/li>
&lt;li>output:  为输出端口&lt;/li>
&lt;li>&lt;strong>所有代码必须处于module模块中！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>同理，次级模块(mod_a)结构用Verilog语言可描述为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">mod_a&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">in1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">in2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意事项：每个模应单独块处于一个.v文件中，模块名即为文件名(规范代码！)&lt;/strong>&lt;/p>
&lt;h4 id="模块输入输出信号">模块输入输出信号
&lt;/h4>&lt;ul>
&lt;li>输出：output&lt;/li>
&lt;li>输入：input&lt;/li>
&lt;/ul>
&lt;p>模块的输入输出端口都可看出模块的信号，若不写信号类型则默认为wire类型信号！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以下两个语句本质是一致的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了wire型信号，还有reg型信号，具体详见1.4节！&lt;/p>
&lt;h4 id="模块实例化">模块实例化
&lt;/h4>&lt;p>如图1所示，top_module的两个输入端口连接到次级模块(mod_a)的输入端口，那如何在top_module模块模块中使用mod_a模块的功能呢？这就需要通过模块实例化，可以把top_module看成C语言中的主函数，次级模块mod_a看成普通函数，这样就可以在主函数中调用其他函数来完成相应的功能！&lt;/p>
&lt;p>在top_module中实例化mod_a的方式为：&lt;/p>
&lt;p>&lt;strong>模块实例化语法：模块名 实例名(定义连接port的信号);&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 按mod_a定义的端口顺序实例化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance2&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 按mod_a端口名实例化(推荐此种写法)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="逻辑块alwaysgenerate">逻辑块(always、generate)
&lt;/h3>&lt;h4 id="always逻辑块">always逻辑块
&lt;/h4>&lt;p>always块可构建 &lt;em>组合逻辑块&lt;/em> 和 &lt;em>时序逻辑块&lt;/em>，复杂的逻辑操作都需要处于该逻辑块中，如if、case、for等&lt;/p>
&lt;h5 id="组合逻辑块">组合逻辑块
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>always逻辑块中任意信号变化时立即触发，执行begin - end之间的语句&lt;/li>
&lt;li>begin - end用于将多条语句组成一个代码块，只有一条语句时可省略&lt;/li>
&lt;/ul>
&lt;h5 id="时序逻辑电路">时序逻辑电路
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>clk 信号的上升沿触发&lt;/li>
&lt;li>posedge: 上升沿&lt;/li>
&lt;li>negedge: 下降沿&lt;/li>
&lt;/ul>
&lt;h4 id="generate逻辑块">generate逻辑块
&lt;/h4>&lt;p>generate主要结合for循环使用，主要用途有：&lt;/p>
&lt;ul>
&lt;li>对向量中的多个位进行重复操作&lt;/li>
&lt;li>对同一个模块进行多次重复实例化(主要用途)&lt;/li>
&lt;/ul>
&lt;h5 id="操作向量">操作向量
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// genvar i;也可以定义在generate内部
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="c1">// verilog中for循环不支持i++
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// ^:异或运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="模块重复多次实例化">模块重复多次实例化
&lt;/h5>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">gen_mod_a&lt;/span> &lt;span class="c1">// gen_mod_a为每个begin_end结构的名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">mod_a&lt;/span> &lt;span class="n">instance2&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">in1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">in2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endgenerate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>注意：模块多次实例化时必须写每个begin_end结构的名称(gen_mod_a)&lt;/li>
&lt;li>仿真器会通过gen_mod_a来标识生成结构: gen_mod_a[0],gen_mod_a[1]&amp;hellip;.&lt;/li>
&lt;/ul>
&lt;h4 id="initial块">initial块
&lt;/h4>&lt;p>initial块可以理解为一个初始化块，在initial的起始位置的语句在0时刻即开始执行，之后如果遇到延时，则延时之后执行接下来的语句。&lt;/p>
&lt;p>初始块是&lt;strong>不可综合&lt;/strong>的，因此不能将其转化为带有数字元素的硬件原理图。因此初始块除了在仿真中使用外，并没有太大的作用。&lt;/p>
&lt;p>如:在仿真文件中初始化各种参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys_clk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys_rst_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">#&lt;/span>&lt;span class="mh">50&lt;/span> &lt;span class="c1">// #n 代表延时n个时间单位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sys_rst_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>initial 块在电路中不可综合，故一般不出现在RTL代码中&lt;/li>
&lt;li>initial 一般只在仿真文件中使用&lt;/li>
&lt;/ul>
&lt;p>若需要在RTL代码中初始化参数，需要用always块，用initial块会导致错误！&lt;/p>
&lt;p>如下所示，在RTL代码中初始化存储器的方式为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">255&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">char_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mh">256&amp;#39;h0000000000000000000000000000000000000000000000000000000000000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="赋值方式">赋值方式
&lt;/h3>&lt;p>Verilog 中赋值方式有三种：连续赋值、阻塞赋值、非阻塞赋值&lt;/p>
&lt;h4 id="连续赋值assign">连续赋值(assign)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>该语句表示把x和y两个信号进行连接，真实的物理连接！&lt;/li>
&lt;li>&lt;strong>不能在always块中使用&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="阻塞赋值">阻塞赋值(=)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 组合块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>组合always块中用阻塞式赋值&lt;/strong>&lt;/li>
&lt;li>执行顺序：按照begin_end语句块中的&lt;strong>顺序依次执行&lt;/strong>，上述输出结果为：out1 = a ，out2 = b&lt;/li>
&lt;/ul>
&lt;h4 id="非阻塞赋值">非阻塞赋值(&amp;lt;=)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 时序块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out1&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out2&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>时序always块中用非阻塞赋值&lt;/strong>&lt;/li>
&lt;li>执行顺序：begin_end中所有语句&lt;strong>并行执行&lt;/strong>，上述输出结果为：out1 = a ，out2 = a&lt;/li>
&lt;/ul>
&lt;h2 id="基础语法">基础语法
&lt;/h2>&lt;h3 id="标识符">标识符
&lt;/h3>&lt;ul>
&lt;li>用途：标识符用于定义常数、变量、信号、端口、参数名、模块名等。&lt;/li>
&lt;li>组成：字母、数字、$、下划线任意组合而成&lt;/li>
&lt;li>注意事项：
&lt;ul>
&lt;li>区分大小写(Verilog 和 verilog是不同的)&lt;/li>
&lt;li>第一个字符只能是字母或下划线(123demo 是非法标识符)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="逻辑值与逻辑运算">逻辑值与逻辑运算      
&lt;/h3>&lt;h4 id="逻辑值">逻辑值
&lt;/h4>&lt;p>Verilog中有4中逻辑值：0、1、x、z&lt;/p>
&lt;ul>
&lt;li>0: 低电平&lt;/li>
&lt;li>1: 高电平&lt;/li>
&lt;li>x: 表示状态未知&lt;/li>
&lt;li>z: 表示高阻状态&lt;/li>
&lt;/ul>
&lt;p>注意：这里的z、x是不区分大小写的(X、Z也可)&lt;/p>
&lt;h4 id="逻辑运算">逻辑运算
&lt;/h4>&lt;h5 id="逻辑运算符与相等或不等">逻辑运算符：&amp;amp;&amp;amp;(与)、==（相等）、||（或）、!=（不等）
&lt;/h5>&lt;ul>
&lt;li>如 m&amp;amp;&amp;amp;n  : 判断m和n是否全为真(非0即为真)，真则输出1&amp;rsquo;b1，否则输出1&amp;rsquo;b0 (4’b1010&amp;amp;4’b0101 = 1’b1)&lt;/li>
&lt;li>最后输出结果只有1bit&lt;/li>
&lt;/ul>
&lt;h5 id="按位运算符">按位运算符：&amp;amp;、|、~、^、~&amp;amp;、~^、~| 
&lt;/h5>&lt;ul>
&lt;li>如 m&amp;amp;n  : 是把m的每一位与n的每一位按位做与运算 (4’b1010&amp;amp;4’b0101 = 4’b0000)&lt;/li>
&lt;li>输出结果与m/n的bit数相同&lt;/li>
&lt;/ul>
&lt;h5 id="归约运算符-">归约运算符：  &amp;amp;、|、~、^、&amp;amp;、~^、~| 
&lt;/h5>&lt;ul>
&lt;li>只有一个参量参与运算时( &amp;amp;为一元运算符),表示规约与，即向量内部进行与运算&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示a[3]&amp;amp;a[2]&amp;amp;a[1]&amp;amp;a[0] 相当于(a[3:0]==4&amp;#39;b1111)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示b[3]|b[2]|b[1]|b[0] 相当于(b[3:0]!=4&amp;#39;b0000)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">// 表示c[3]^c[2]^c[1]^c[0]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>即(&amp;amp;4’b0101 = 0&amp;amp;1&amp;amp;0&amp;amp;1 = 1&amp;rsquo;b0 )&lt;/li>
&lt;li>最后输出结果只有1bit&lt;/li>
&lt;/ul>
&lt;h3 id="常量的表示方法">常量的表示方法
&lt;/h3>&lt;p>与C语言类似，常量主要有：整数型、实数型和字符串型三种&lt;/p>
&lt;h4 id="用十进制整数表示整型常量">用十进制整数表示整型常量
&lt;/h4>&lt;p>(1) 正数：直接写 10 表示位宽为32bit的十进制整数(系统默认)
(2) 负数：-10需要用二进制补码表示，多了一位符号位(1 1010)
(3) 用科学计数法表示：12.345e3   表示 12345&lt;/p>
&lt;h4 id="用基数法表示整数型常量">用基数法表示整数型常量
&lt;/h4>&lt;p>[换算成二进制数后的位宽]&amp;rsquo;&lt;em>[数制符号][与数制对应的值]&lt;/em>&lt;/p>
&lt;ul>
&lt;li>二进制(b):     8&amp;rsquo;b1000_1100      &lt;/li>
&lt;li>十六进制(h):  8&amp;rsquo;h8c&lt;/li>
&lt;li>八进制(o):     8&amp;rsquo;o214&lt;/li>
&lt;li>十进制(d):     8&amp;rsquo;d140&lt;/li>
&lt;/ul>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>当表示二进制时，最好每4位写一个下划线以增强可读性：如8&amp;rsquo;b1000_1100   与8&amp;rsquo;b10001100 是一样的&lt;/li>
&lt;li>基数表示法中遇到x时：十六进制表示4个x，八进制中表示3个x  &lt;/li>
&lt;li>&lt;strong>当位宽大于二进制位数时左边自动补0，小于二进制数时2从左边截断！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="字符串用双引号">字符串(用双引号)
&lt;/h4>&lt;ul>
&lt;li>每个字符由1个8位的ASCII码值表示，即需要1byte存储空间&lt;/li>
&lt;li>如：“Hello world”字符串由11个ASCII符号构成，需要11byte存储空间&lt;/li>
&lt;/ul>
&lt;h3 id="注释方式">注释方式
&lt;/h3>&lt;p>Verilog中注释主要有行注释(//)和块注释(/*  &amp;hellip;.     */)两种，表示方法与C语言一致！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 行注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 块注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量wirereg">变量(wire、reg)
&lt;/h3>&lt;p>Verilog中的变量主要有两种：wire和reg&lt;/p>
&lt;h4 id="wire">wire
&lt;/h4>&lt;p>(1) 线网型(wire): 表示电路间的物理连接，wire定义的变量也可看成信号端口
(2) 当两个wire信号被连续赋值时，在逻辑块中会被映射成真实的物理连线，此时这两个信号端口的变化是同步的！&lt;/p>
&lt;h4 id="reg">reg
&lt;/h4>&lt;p>(1) 寄存器型(reg): 表示一个抽象的数据存储单元
(2) reg 具有对某一时间点状态进行保持的功能&lt;/p>
&lt;h4 id="用法与注意事项">用法与注意事项
&lt;/h4>&lt;p>(1) 在always、initial语句中被赋值的变量(赋值号左边的变量)都是reg型变量
(2) 在assign语句中被赋值的变量，为wire型变量&lt;/p>
&lt;h3 id="向量vector与-参数常量">向量(vector)与 参数(常量)
&lt;/h3>&lt;h4 id="parameter-参数常量">parameter 参数(常量)
&lt;/h4>&lt;p>(1) 参数是一种常量，通常出现在module内部，常被用于定义状态、数据位宽等&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">parameter&lt;/span> &lt;span class="n">STATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) &lt;strong>只作用于声明的那个文件&lt;/strong>，且可以被灵活改变！
(3) 局部参数localparam，只在本模块中使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">localparam&lt;/span> &lt;span class="n">WIDTH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(4) 参数的名称一般为大写，以区分其他变量 &lt;/p>
&lt;h4 id="向量vector">向量(vector)
&lt;/h4>&lt;p>vector(向量)，是一组信号的集合,可视为位宽超过1bit 的 wire 信号。&lt;/p>
&lt;p>(1) 定义方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输入输出型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">output&lt;/span> &lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 模块中间向量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">reg&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) 向量的位宽定义：&lt;/p>
&lt;ul>
&lt;li>[upper:lower] 定义位宽，如 [7:0] 表示位宽为8 bit ，即upper=7，lower=0&lt;/li>
&lt;li>vector_name可以一次写多个向量&lt;/li>
&lt;/ul>
&lt;h4 id="向量片选">向量片选
&lt;/h4>&lt;ul>
&lt;li>a[3:0]    取向量a的0~4位数据&lt;/li>
&lt;li>b[n]      取向量b的第n位数据&lt;/li>
&lt;li>c[-1:-2]  取向量c的最低2位数据&lt;/li>
&lt;li>c[0:3]    取向量c的最高4位数据&lt;/li>
&lt;/ul>
&lt;p>多路选择器应用：实现一个 256 选 1 选择器，sel 信号作为选择信号，当 sel = 0 时选择 in[3:0]，sel = 1 时选择 in[7:4],以此类推。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">255&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">7&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// assign out = {in[sel*4 +: 4]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// assign out = {in[sel*4+3 -: 4]};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>片选信号sel输入为n位二进制数，当参与运算、充当索引时会自动转换成十进制数&lt;/li>
&lt;li>该题所选取的信号片段为: in[sel*4+3: sel*4] ,但这不符合Verilog的片选语法规则故应写成：&lt;/li>
&lt;/ul>
&lt;p>in[sel*4 +: 4]   表示索引从sel*4开始的高4bit信号&lt;/p>
&lt;p>in[sel*4+3 -: 4] 表示索引从sel*4+3开始的低4bit信号&lt;/p>
&lt;ul>
&lt;li>或是直接选出需要的每一位，再用{ }拼接成新向量：&lt;/li>
&lt;/ul>
&lt;p>{in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]}&lt;/p>
&lt;h3 id="三元表达式">三元表达式
&lt;/h3>&lt;p>(1) 与C语言相同，Verilog也有三元表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">condition&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">if_true&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">if_false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当条件为真，表达式值为if_true ，否则表达式值为if_false。&lt;/p>
&lt;p>(2) 应用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 一个二选一MUX，通过sel的值选择a或b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="k">posedge&lt;/span> &lt;span class="n">clk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 一个T触发器
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">toggle&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">assign&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ena&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">&amp;#39;&lt;/span>&lt;span class="n">bz&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 三态缓冲器
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="分支语句if-elsecase">分支语句(if-else、case)
&lt;/h3>&lt;h4 id="if-else语句">if-else语句
&lt;/h4>&lt;p>(1) 最常用的形式：(优势：&lt;strong>输出的所有可能都写到，不存在未知电平输出！&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) 不建议使用if-else嵌套，会存在优先级问题，导致逻辑混乱，
(3) 所有if-else语句都应写成(1)的形式！
(4) 根据条件表达式依次比较，*&lt;em>存在优先级！&lt;/em> *&lt;/p>
&lt;h4 id="case-语句">case 语句
&lt;/h4>&lt;p>(1) 书写形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">控制表达式&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">分支语句&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">分支语句&lt;/span>&lt;span class="mh">2&lt;/span>&lt;span class="o">&amp;gt;:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endcase&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较&amp;lt;控制表达式&amp;gt;与&amp;lt;分支语句n&amp;gt;的取值相等则执行对应语句，否则执行default后语句！&lt;/p>
&lt;p>(2) &lt;em>执行完某一分支语句后立即跳出case语句结构，终止case语句执行。&lt;/em>
(3) &lt;strong>&amp;lt;分支语句n&amp;gt;的取值必须互不相同！&lt;/strong>
(4) 以encase结束case语句块
(5) 各分支语句间&lt;strong>不存在优先级！&lt;/strong>
(6) 具体应用: 用case语句搭建多路选择器，（以9选1多路选择器为例）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">top_module&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sel&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0001&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0010&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0011&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0100&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0101&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0110&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0111&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">16&amp;#39;hffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">endcase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="for循环语句">for循环语句
&lt;/h2>&lt;p>(1) 书写形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">integer&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">always&lt;/span> &lt;span class="p">@(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">for_name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>执行&amp;lt;循环语句&amp;gt;n次&lt;/li>
&lt;li>for_name为每一次循环的名称&lt;/li>
&lt;/ul>
&lt;h3 id="关系运算符">关系运算符(&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=)
&lt;/h3>&lt;ul>
&lt;li>运算结果为真返回 1&lt;/li>
&lt;li>运算结果为假返回 0&lt;/li>
&lt;li>若某个操作数值不定(x)，则返回值为 x&lt;/li>
&lt;/ul>
&lt;h3 id="拼接运算符--">拼接运算符({ , })
&lt;/h3>&lt;h4 id="拼接">拼接
&lt;/h4>&lt;p>用一对花括号加逗号组成“{ , }”拼接运算符，逗号隔开的数据&lt;strong>按顺序拼接成新数据！&lt;/strong>&lt;/p>
&lt;h4 id="通过拼接实现移位">通过拼接实现移位
&lt;/h4>&lt;p>在左边拼接实现右移，右边拼接实现左移！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1">// a[3:0]左移4位
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="mb">&amp;#39;b0000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}&lt;/span> &lt;span class="c1">// a[3:0]右移4位
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="连接符中重复多次的操作">连接符中重复多次的操作
&lt;/h4>&lt;p>语法： {重复次数{vector}}&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="mh">4&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}}&lt;/span> &lt;span class="c1">// 重复4次a[3:0]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="mi">&amp;#39;d5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">4&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">3&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]}}&lt;/span> &lt;span class="c1">// 3&amp;#39;d5与a[3:0]重复4次拼接
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="移位运算符">移位运算符
&lt;/h3>&lt;p>移位运算符用于将左边操作数左移或右移指定的位数！移位后空闲位用0填充。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>左移运算符：&amp;laquo;
如：4‘b1101 &amp;laquo; 3 结果为：4‘b1000&lt;/p>
&lt;/li>
&lt;li>
&lt;p>右移算法符: &amp;raquo;
如：4‘b1101 &amp;raquo; 3 结果为：4‘b0001&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移位运算符其他用途：左移一位可以看成是乘以 2，右移一位可以看成是除以 2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移位运算符代替乘除法可以节省资源！&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="完整模块示例">完整模块示例
&lt;/h2>&lt;h3 id="二进制全加器">二进制全加器
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder.png"
width="307"
height="212"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder_hu89533cf0424ba3323edd0db86c96d53c_11547_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder_hu89533cf0424ba3323edd0db86c96d53c_11547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;ul>
&lt;li>a、b为输入 1bit 数据&lt;/li>
&lt;li>cin为上一个加法器进位输入&lt;/li>
&lt;li>cout为本加法器的进位输出&lt;/li>
&lt;li>sum = a+b&lt;/li>
&lt;/ul>
$$
\begin{array}{c}
sum=a \wedge b \wedge cin \\
cout=(a \&amp; b) | (a \&amp; cin) | (b \&amp; cin)
\end{array}
$$
&lt;p>代码实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">full_adder&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">cout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="16进制全加器">16进制全加器
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit.png"
width="562"
height="727"
srcset="https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit_hu18c208ace072546113281d8f502ec621_55264_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/assets/adder16bit_hu18c208ace072546113281d8f502ec621_55264_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="77"
data-flex-basis="185px"
>&lt;/p>
&lt;p>16进制全加器如上图所示，它可由上节中16个二进制全加器组合而成。&lt;/p>
&lt;p>用Verilog实现16进制全加器代码为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">adder16&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">15&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="n">cout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">wire&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mh">16&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cin&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">genvar&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">16&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">begin&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">gen_full_adder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">full_adder&lt;/span> &lt;span class="n">instance1&lt;/span> &lt;span class="p">(.&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]),&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="p">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assign&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">16&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="模块中的参数传递">模块中的参数传递
&lt;/h2>&lt;h3 id="定义可传递参数的模块">定义可传递参数的模块
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="k">module&lt;/span> &lt;span class="n">counter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">COUNT_MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">25&lt;/span>&lt;span class="mi">&amp;#39;d24&lt;/span>&lt;span class="n">_999_999&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">parameter&lt;/span> &lt;span class="n">STATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">input&lt;/span> &lt;span class="kt">wire&lt;/span> &lt;span class="n">sys_clk&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">output&lt;/span> &lt;span class="kt">reg&lt;/span> &lt;span class="n">led_out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">......&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="带参数模块的实例化">带参数模块的实例化
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-verilog" data-lang="verilog">&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="p">#(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">COUNT_MAX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">25&lt;/span>&lt;span class="mi">&amp;#39;d24&lt;/span>&lt;span class="n">_999_999&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 参数赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">STATE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">1&lt;/span>&lt;span class="mb">&amp;#39;b0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="n">counter_instance&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">sys_clk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys_clk&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">led_out&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">led_out&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>vivado 2023.2安装</title><link>https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="下载安装包">下载安装包
&lt;/h1>&lt;ol>
&lt;li>
&lt;p>百度搜索vivado，找到&amp;quot;下载 - Xilinx&amp;quot;，进入vivado下载页面&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择2023.2版本，&lt;a class="link" href="https://china.xilinx.com/support/download/index.html/content/xilinx/zh/downloadNav/vivado-design-tools/2023-2.html" target="_blank" rel="noopener"
>下载链接&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载Windows环境下的在线安装器（Windows Self Extracting Web Installer）&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download.jpg"
width="1212"
height="1052"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download_huc070f3988e1974e8483ead4db9239c07_79606_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/download_huc070f3988e1974e8483ead4db9239c07_79606_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="download"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;ul>
&lt;li>下载需要登陆AMD。如果已有AMD账户直接填写用户名和密码登陆，如果没有账户则点“Create account”免费创建一个新账户。&lt;/li>
&lt;li>点击链接后会要求输入个人信息，随便填即可。&lt;/li>
&lt;li>&lt;a class="link" href="https://pan.baidu.com/s/1xt8L6RWmHROTX-C5JzIj3A?pwd=3a6p" target="_blank" rel="noopener"
>&lt;em>如果在线安装器下载不下来&lt;/em>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h1 id="在线安装">在线安装
&lt;/h1>&lt;ol>
&lt;li>
&lt;p>双击运行已下载的可执行文件FPGAs_AdaptiveSoCs_Unified_2023.2_1013_2256_Win64.exe。（使用管理员权限，允许网络访问）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果弹出更新窗口，点击“continue”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue_hudc9ccf3a6061c88baeb0d8a4b427aec5_81974_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/continue_hudc9ccf3a6061c88baeb0d8a4b427aec5_81974_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="continue"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>登录下载时注册的AMD账号，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login_hu062b6f8317e133346cb0306f7d09837a_77070_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/login_hu062b6f8317e133346cb0306f7d09837a_77070_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="login"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择“vivado”，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product_hud59b6367412afaf51bc4cfdb1ee35fb2_107739_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/product_hud59b6367412afaf51bc4cfdb1ee35fb2_107739_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="product"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择免费的标准版，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition_hu0b939661dd1d6896e46b7423f3241c97_89519_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/edition_hu0b939661dd1d6896e46b7423f3241c97_89519_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="edition"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在“Device”中必勾选“Artix-7”，因为开发板搭载的FPGA是Artix-7，其他器件可以根据需要进行选择，“Design Tools”和“Installation Options”按照默认即可。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device_hua6caeee0c57d2606be5a552e175ea5e2_98399_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/device_hua6caeee0c57d2606be5a552e175ea5e2_98399_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="device"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全部“I agree”，点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree_hu60b5f28c2f4720c4f3471589533b45b8_121250_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/agree_hu60b5f28c2f4720c4f3471589533b45b8_121250_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="agree"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择Vivado安装目录，默认安装在“C:\Xilinx”下，可以点击浏览或者直接更改路径，注意&lt;strong>安装路径中不能出现中文和空格&lt;/strong>。点击“Next”。&lt;/p>
&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory.jpg"
width="1090"
height="834"
srcset="https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory_huf9d5ccff252c347ff37ad093e9005ce8_97580_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/assets/directory_huf9d5ccff252c347ff37ad093e9005ce8_97580_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="directory"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;p>&lt;em>我由于安装过了，显示和大家不一样。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看summary，点击“install”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待安装完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="问题">问题
&lt;/h1>&lt;ul>
&lt;li>不同版本间的编译逻辑可能有所不同，可能会导致不可预知的差异，我们建议使用比赛指定的23.2版本&lt;/li>
&lt;li>注意安装路径&lt;strong>不要有中文和空格&lt;/strong>！包括后续项目文件路径中都&lt;strong>不能出现中文和空格！！！&lt;/strong>&lt;/li>
&lt;li>&lt;em>如果你的用户名不幸的有中文的话，STFW改成英文的吧，不然会有更多奇奇怪怪的bug&lt;/em>&lt;/li>
&lt;li>如果在线安装器有网络问题的话，尝试关闭魔法多试几次，实在不行使用完整的安装包选择本地安装（官网103GB的版本）。&lt;/li>
&lt;/ul>
&lt;h1 id="与代码编辑器的联动">与代码编辑器的联动
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/weixin_44425619/article/details/115479272" target="_blank" rel="noopener"
>VIVADO使用vscode实现实时纠错与自动补全等功能_vivado代码自动对齐_fujiayu1997zz的博客-CSDN博客&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/341728027" target="_blank" rel="noopener"
>Sublime与Verilog【一】：从安装到使用，提高FPGA开发效率！ - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Loongson-Lab</title><link>https://loongson-neuq.pages.dev/p/loongson-lab/</link><pubDate>Sat, 28 Sep 2024 16:51:51 +0800</pubDate><guid>https://loongson-neuq.pages.dev/p/loongson-lab/</guid><description>&lt;script>
window.location.href="https://loongson-neuq.pages.dev/intro";
&lt;/script>
&lt;h2 id="缘起">缘起
&lt;/h2>&lt;p>进入本世纪，移动互联网、大数据、云计算、物联网、人工智能等新一代信息技术快速发展，促进形成了不同形态的新型计算系统。计算机人才的培养从“程序性开发能力”进化为更重要的“&lt;strong>系统性设计能力&lt;/strong>”。要求计算系统开发人员必须了解不同系统平台的底层结构，具有系统观和系统思维，能够进行软硬件协同设计及其贯通，以强大的系统平台技术保证各项应用功能的实现，成为能力的关键特性，即&lt;strong>计算机系统能力&lt;/strong>。计算机系统能力培养对于解决计算机领域卡脖子关键问题，培育我国高端芯片、关键基础软件的后备人才尤为紧迫和重要。&lt;/p>
&lt;p>为此，2019年5月，教育部高等学校计算机类专业教学指导委员会授予我校计算机系统能力培养试点高校。我校正式开始计算机系统能力培养试点建设。2019年6月，我校与龙芯建立深度合作关系并签署了框架合作协议，与龙芯中科有限公司合作，成立龙芯华北基地暨龙芯-东北大学（秦皇岛）联合实验室。旨在培养计算机系统能力，以及为我国培养在卡脖子的计算机核心关键技术领域人才。2019年8月，创立龙芯班，主要培养中央处理器（CPU）、操作系统（OS）、编译器（Compiler），以及嵌入式芯片与系统设计等等。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_1.png"
width="399"
height="266"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_1_hudc8a6adde31c839db514efc27b18c554_425563_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_1_hudc8a6adde31c839db514efc27b18c554_425563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/th>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_2.png"
width="402"
height="263"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_2_huf4666acc242acd1812b4d1ce603b5f01_423928_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/golden_board_2_huf4666acc242acd1812b4d1ce603b5f01_423928_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/1st_class.png"
width="397"
height="264"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/1st_class_hu8f71d20ec04f9449d820e4586a9498c3_420257_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/1st_class_hu8f71d20ec04f9449d820e4586a9498c3_420257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/td>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/presentation.png"
width="394"
height="263"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/presentation_hu7ea058ec2836f4d3dc87a0814abf7c77_415500_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/presentation_hu7ea058ec2836f4d3dc87a0814abf7c77_415500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="计算机系统能力竞赛">计算机系统能力竞赛
&lt;/h2>&lt;p>全国大学生计算机系统能力大赛旨在以学科竞赛推动专业建设和计算机领域创新人才培养体系改革，培育我国高端芯片、关键基础软件的后备人才，始终坚持围绕CPU、编译系统、操作系统、数据库管理系统的设计和实现，在赛题和赛制上不断推陈出新。2024年启动智能系统创新设计赛（小米杯）、智能计算创新设计赛（先导杯），形成了从计算机系统核心软硬件到完整系统的比赛格局。&lt;/p>
&lt;p>作为“计算机类专业系统能力培养”教育生态的重要组成部分，大赛创办八年来，参赛学校、参赛人数不断增加，以赛促学、以赛促教的作用明显，学生的专业核心能力、工程能力、创新能力不断提升，2023年更是成功入选中国高等教育学会《2023全国普通高校大学生竞赛分析报告》竞赛目录，成为计算机领域重要的学科竞赛。&lt;/p>
&lt;p>2024年，多家新闻媒体对赛事报道。钱江晚报，澎湃新闻网等媒体以“&lt;strong>继ACM后，计算机系统能力大赛受众多互联网大厂热捧，为啥？&lt;/strong>”为标题对赛事进行报道。诸多互联网大厂越来越重视CPU，操作系统、编译器等自主化，它们也将目光投到大学系统人才培养上来。它们通过冠名全国大学生系统能力大赛，比如CPU大赛由“龙芯”冠名，编译系统设计赛由华为“毕昇”冠名，智能系统创新设计赛由“小米”冠名，以提前参与到大学系统设计开发人才培养中来。操作系统功能赛由华为、麒麟、龙芯、蚂蚁、OPPO、vivo、小米、龙蜥社区、国科环宇、飞腾等企业专家命题，吸引350支队伍报名，涉及863名同学和159位指导教师。“华为、龙芯等把它们公司的实际科技问题，拿到了比赛当中，看看在校大学生们怎么解决行业前沿问题，真正体现了业界需求和高校人才培养的‘双向奔赴’。&lt;/p>
&lt;h2 id="目标与规划">目标与规划
&lt;/h2>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/goal.png"
width="246"
height="272"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/goal_hu600bc8995b4643881519328f0262a03b_268433_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/goal_hu600bc8995b4643881519328f0262a03b_268433_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>以培养学员融会贯通计算机系统的软硬件知识，设计出自己的CPU，并在上面运行自己的操作系统，还在上面运行自己的编译器和数据库等系统软件为目标的龙芯班。&lt;br>
目前，主要面向龙芯班学员开设两门公选课程《CPU设计艺术》和《操作系统》。其中，《CPU设计艺术》课程将于秋季学期十一后开课，《操作系统》将于春季学期开课。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选拔龙芯班的优秀学员参加全国计算机系统能力竞赛，力争取得优异成绩。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选拔龙芯班的优秀学员作为助教团队，辅导新学员学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>鼓励优秀学员，参加科创课题团队，一生一芯计划和百芯计划等活动，进一步树立投身科技事业的理想和锻炼能力。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="指导教师">指导教师
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>方淼，男，东北大学计算机科学与技术专业工学学士学位，大连理工大学计算机应用技术专业工学博士学位，现任计算机工程系副主任（负责本部门教学工作），学院科研团队“语言与智能系统实验室”负责人，学院“计算机系统能力培养实验班（龙芯实验室）”负责人。目前主要从事自然语言理解，机器学习和计算机系统等方向的科研和教学工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>王鑫，男，1978年10月生，河北丰南人，东北大学计算机应用技术工学硕士学位，现任教于计算机科学系计算机科学与技术专业，讲师，主要从事教学工作。负责操作系统教学。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>张旭，女，1988年4月出生，河北迁西人，内蒙古大学计算机专业工学硕士学位，现任教于学院实验教学中心，实验师。目前主要从事实验教学工作，指导学生参加2019年（第12届）中国大学生计算机设计大赛软件应用与开发类决赛（作品：基于网络通信的远程解锁工具）荣获全国二等奖。负责CPU设计教学。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>科创课题指导教师暂未列出。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="优秀学员">优秀学员
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Photo&lt;/th>
&lt;th style="text-align:center">Profile&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C.png"
width="230"
height="182"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C_hua0b861b31d5b0dc4aaaee97788d412b1_167976_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C_hua0b861b31d5b0dc4aaaee97788d412b1_167976_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/td>
&lt;td style="text-align:center">孟祥东，2017级，毕业进入龙芯公司基础软件部工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB.png"
width="135"
height="183"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB_huebbcd386fb2edaadf7f82eb2d43534ca_99251_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB_huebbcd386fb2edaadf7f82eb2d43534ca_99251_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="73"
data-flex-basis="177px"
>&lt;/td>
&lt;td style="text-align:center">杨兆鑫，2017级，考入中科院计算所龙芯实验室研究生&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C.png"
width="134"
height="184"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C_hu48e39c645a027d08b179c7fd41063cda_99051_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C_hu48e39c645a027d08b179c7fd41063cda_99051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/td>
&lt;td style="text-align:center">陈虹胜，2019级，毕业进入龙芯公司从事研发工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AE%8B%E9%9B%A8.png"
width="156"
height="182"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AE%8B%E9%9B%A8_hudb0a974f0fcb35e4b7d876519fcdb370_114010_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E5%AE%8B%E9%9B%A8_hudb0a974f0fcb35e4b7d876519fcdb370_114010_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/td>
&lt;td style="text-align:center">宋雨，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E7%94%B0%E5%AE%87.png"
width="166"
height="223"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E7%94%B0%E5%AE%87_hu2cbdff2b05e8df5f9aeac025137a3acb_148620_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E7%94%B0%E5%AE%87_hu2cbdff2b05e8df5f9aeac025137a3acb_148620_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="74"
data-flex-basis="178px"
>&lt;/td>
&lt;td style="text-align:center">田宇，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87.png"
width="234"
height="223"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87_hu6bc5baa18fa28ed287f7301dd2e90a38_209370_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87_hu6bc5baa18fa28ed287f7301dd2e90a38_209370_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/td>
&lt;td style="text-align:center">付震宇，2019级，保送到中科大 USTC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83.png"
width="168"
height="222"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83_hufb79c78ed660d1b8355b1f2f8cba9a9b_149731_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83_hufb79c78ed660d1b8355b1f2f8cba9a9b_149731_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/td>
&lt;td style="text-align:center">解博元，2020级，因竞赛优异成绩被华为免试录取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="取得成绩">取得成绩
&lt;/h2>&lt;p>2020年，我校首次入围CPU赛道全国总决赛，荣获团队赛三等奖一项和个人赛三等奖一项。&lt;br>
2021年，我校再创佳绩，在CPU赛道全国总决赛，获得团队赛三等奖两项，个人赛二等奖一项。&lt;br>
2022年，我校继续入围CPU赛道全国总决赛，团队赛三等奖一项，个人赛三等奖一项。&lt;br>
2023年，我们在全国总决赛CPU赛道获得团队赛三等奖两项，在OS赛道，获得团队赛三等奖一项，优胜奖一项。&lt;br>
2024年，我们在全国总决赛智能系统创新设计赛道获得团队赛一等奖，在CPU赛道获得团队赛二等奖两项，在OS赛道，获得团队赛三等奖一项。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_1.png"
width="386"
height="396"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_1_hu7ea2d836e5142eade878814a95a43aa0_612887_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_1_hu7ea2d836e5142eade878814a95a43aa0_612887_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/th>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_2.png"
width="439"
height="396"
srcset="https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_2_hud7568864bb00fb447e90f5a165b4cae4_696969_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/p/loongson-lab/assets/award_2_hud7568864bb00fb447e90f5a165b4cae4_696969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="110"
data-flex-basis="266px"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;h2 id="召唤">召唤
&lt;/h2>&lt;ul>
&lt;li>如果你有梦想，想设计自己的CPU，运行自己的OS，安装自己设计的编译器，请加入我们！&lt;/li>
&lt;li>如果你有梦想，想在大学期间做一款自己的CPU产品，流出一块自己的芯片，请加入我们！&lt;/li>
&lt;li>如果你有梦想，掌握计算机领域核心技术，到计算机系统能力大赛舞台展现实力，毕业到大厂工作，请加入我们！&lt;/li>
&lt;li>如果你有梦想，希望掌握计算机核心技术，为科技强国做出自己的贡献，请加入我们！&lt;/li>
&lt;li>加入我们，开启你的技术进阶之旅！与志同道合的伙伴一起，探索前沿技术，成就你的未来梦想！&lt;/li>
&lt;li>强烈呼唤各位的到来，独行者速，众行者远！&lt;/li>
&lt;/ul>
&lt;p>报名要求：&lt;/p>
&lt;ul>
&lt;li>热爱计算机系统和CPU、OS、Compiler设计，有志为国家计算机事业发展做贡献；&lt;/li>
&lt;li>积极主动、坚持不懈，有较强的团队责任心和自学能力；&lt;/li>
&lt;li>大一、大二，以及大三学生（能专心做芯片设计毕设，工作非考研的同学）。&lt;/li>
&lt;/ul>
&lt;p>招生规模：暂定为不超过60人&lt;br>
开班日期：十一假期后&lt;br>
报名截止日期： 2024年10月9号 24:00&lt;br>
加入招新群：&lt;a class="link" href="https://qm.qq.com/q/aq8aBrqzwQ" target="_blank" rel="noopener"
>231607730&lt;/a>&lt;/p>
&lt;p>联系人：&lt;br>
白聪（OS方向）： QQ：1561331574，邮箱：&lt;a class="link" href="mailto:1561331574@qq.com" >1561331574@qq.com&lt;/a>&lt;br>
杨欣蕊（CPU方向）：QQ：1010191094，邮箱：&lt;a class="link" href="mailto:1010191094@qq.com" >1010191094@qq.com&lt;/a>&lt;br>
地点：基础楼304&lt;/p></description></item><item><title>从循环展开到达夫设备</title><link>https://loongson-neuq.pages.dev/p/%E4%BB%8E%E5%BE%AA%E7%8E%AF%E5%B1%95%E5%BC%80%E5%88%B0%E8%BE%BE%E5%A4%AB%E8%AE%BE%E5%A4%87/</link><pubDate>Wed, 25 Sep 2024 16:18:43 +0800</pubDate><guid>https://loongson-neuq.pages.dev/p/%E4%BB%8E%E5%BE%AA%E7%8E%AF%E5%B1%95%E5%BC%80%E5%88%B0%E8%BE%BE%E5%A4%AB%E8%AE%BE%E5%A4%87/</guid><description>&lt;p>假设你需要连续完成某个相同操作 2 次时，你可能这样写代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常情况下你都会这样做，而不是使用一个 for loop。&lt;/p>
&lt;p>当这个此时大于或等于 10 次时，你大概就不会一个一个写了，而是使用　for 循环。&lt;/p>
&lt;p>然而，如果你&lt;em>稍微&lt;/em>思考一下，你都知道：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Csharp" data-lang="Csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 省略 99997 条 Foo　call。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">ulong&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">100_000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并不完全等价。&lt;/p>
&lt;p>让我们以 CPU 的视角审视一下这个过程：&lt;/p>
&lt;p>对于第一个版本，就完全是 100, 000 条 &lt;code>call&lt;/code> 指令。&lt;/p>
&lt;p>对于第二个版本，来说则是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">设置寄存器　i = 0 // xor rcx, rcx, rcx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.loop_begin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">判断 i 是否小于 100, 000， 如果不是就跳转　.exit_loop // cmp rcx, 100000　&amp;amp;&amp;amp; jge label
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">调用 Foo 函数　// call Foo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">自增索引寄存器 // inc rcx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">回到循环开始 // jmp .loop_begin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.exit_loop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两个版本各有各的优势以及缺陷：&lt;/p>
&lt;p>对于第一个版本：&lt;/p>
&lt;ul>
&lt;li>完成所有任务将执行 &lt;code>100, 000&lt;/code> 条指令&lt;/li>
&lt;li>所有指令也将占用 &lt;code>100, 000 * 4&lt;/code> 字节的内存&lt;/li>
&lt;/ul>
&lt;p>对于第二个版本：&lt;/p>
&lt;ul>
&lt;li>完成所有任务将执行大约 &lt;code>100，000 * 6&lt;/code> 条指令&lt;/li>
&lt;li>所有指令仅占用　&lt;code>6 * 4&lt;/code> 字节的内存&lt;/li>
&lt;/ul>
&lt;p>从性能上讲，第一个版本少执行大量指令，意味着更高的性能。但是从内存占用上讲，第一个版本将消耗大量内存，意味着更大的二进制可执行文件。详细可以看&lt;a class="link" href="#%e5%be%aa%e7%8e%af%e5%b1%95%e5%bc%80%e7%9a%84%e6%80%a7%e8%83%bd" >最后一节&lt;/a>&lt;/p>
&lt;h2 id="思考">思考
&lt;/h2>&lt;p>那我们能否找到一个平衡点，即，损失一点内存占用，但是提高性能？&lt;/p>
&lt;p>不难发现，第二个版本的性能损失来自于每次循环中的以下部分：&lt;/p>
&lt;ul>
&lt;li>判断循环索引寄存器&lt;/li>
&lt;li>自增循环索引寄存器&lt;/li>
&lt;li>跳转 label&lt;/li>
&lt;/ul>
&lt;p>因此，我们的任务便是减少这三条指令的执行次数。那么如何减少呢？&lt;/p>
&lt;p>答案非常简单，让我们按照第一个版本的代码，在循环体中多次调用 &lt;code>Foo()&lt;/code>。这样，我们就可以减少循环次数，也就减少了额外的指令开销。&lt;/p>
&lt;p>例如，我们可以按照以下方式改写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 循环次数变成了原来的 1/10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">ulong&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">10_000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 循环一次执行十条 call&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这下，我们只需要执行大约 &lt;code>10_000 * 5&lt;/code> + &lt;code>100_000&lt;/code> 条指令，以及大幅减少了执行指令的条数。&lt;/p>
&lt;p>这个过程就是循环优化。大部分编译器都支持这种优化。&lt;/p>
&lt;h2 id="问题">问题
&lt;/h2>&lt;p>循环优化好是好，但是事情并不总是这么美好。当循环次数&lt;strong>不是&lt;/strong>展开倍率的整数倍时，我们需要在循环完成后再手动执行。当循环次数不是常量时，就更麻烦了！&lt;/p>
&lt;p>要实现一个对于任意给定循环次数 &lt;code>n&lt;/code> 都能够正确执行的循环展开，我们可以使用以下代码来实现：&lt;/p>
&lt;p>注意我切换成了 C 语言，这是为了给后面的达夫设备埋下伏笔&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">UNROLL_COUNT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">loop_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">UNROLL_COUNT&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">UNROLL_COUNT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">loop_count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 省略 7 行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行剩余的次数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">UNROLL_COUNT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="达夫设备">达夫设备
&lt;/h2>&lt;p>我猜大部分人都会这样写，虽然可能会有一些小区别。然而 Tom Duff 给出了一个估计只有外星人才能一眼看明白的解法&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">void task(int count)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> register count;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> register n = (count + 7) / 8;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> switch(count % 8) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 0: do{ foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 7: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 6: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 5: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 4: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 3: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 2: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case 1: foo();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } while (--n &amp;gt; 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我特意关闭了语法高亮。一眼看上去，这 tm 是人能写出来的？你大概甚至很难相信这个代码能够通过编译。但它确实可以，并且据 Tom Duff 所说，它运行得很好&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>我这里给出我直译的版本。尽管仍有一点区别，但是这个区别正是达夫设备的价值所在。&lt;/p>
&lt;h3 id="直译版">直译版
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">register&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">register&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">goto&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">remainder_is_1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_5&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_6&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nl">remainder_is_7&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当刚进入函数时，会先计算余数，并根据余数跳转到循环体内部，&lt;strong>先&lt;/strong>执行相应次数的 &lt;code>foo()&lt;/code>。接着，将会开始 &lt;code>do-while&lt;/code> 循环，通过循环的方式执行剩下的次数。&lt;/p>
&lt;p>当我们仅考虑 &lt;code>foo()&lt;/code> 的执行情况，我们可以得出以下版本的代码。&lt;/p>
&lt;h3 id="意译版">意译版
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">register&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">register&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个版本的代码仅用于你了解这个过程中发生了什么。让我们回到上面直译版的代码。&lt;/p>
&lt;p>我前面提到，直译版的代码于 Tom Duff 给出的版本仍有一点区别。这个区别就是，我在 switch 语句的各个 case 中又使用　&lt;code>goto&lt;/code>　跳转到了对应的位置，但是 Tom Duff 直接利用了 switch 语句跳转到了对应的部分。&lt;/p>
&lt;p>在这个过程中，每一个 case 就像 label 一样仅用于标识指令的地址而不影响 switch 语句内部其他的语句的语义，也不影响内部的控制流。&lt;/p>
&lt;h2 id="达夫设备的性能">达夫设备的性能
&lt;/h2>&lt;p>从性能上讲，达夫设备与我们编写的循环展开或者上面的意译版性能相同。不过，达夫设备并不总是在所有情况下提供最高性能（假设循环展开次数相同）。你可以查看 &lt;a class="link" href="https://zh.wikipedia.org/wiki/%E8%BE%BE%E5%A4%AB%E8%AE%BE%E5%A4%87#%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0" target="_blank" rel="noopener"
>达夫设备 - 维基百科&lt;/a> 了解更多。&lt;/p>
&lt;h2 id="达夫设备应用">达夫设备应用？
&lt;/h2>&lt;p>那么这个“特性”有什么作用呢？&lt;/p>
&lt;p>PuTTY 的作者使用这种特性，在 C 语言中实现了&lt;strong>不改变代码控制流&lt;/strong>的情况下的无栈协程。&lt;/p>
&lt;p>通常来说，对于这样的协程方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Fib&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会被编译成一个完全状态机：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Fib&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FibStateMachine&lt;/span>&lt;span class="p">(-&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">[CompilerGenerated]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">sealed&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">FibStateMachine&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IDisposable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">Current&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">object&lt;/span> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Current&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">FibStateMachine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">MoveNext&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">GetEnumerator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FibStateMachine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">IEnumerator&lt;/span> &lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GetEnumerator&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">IEnumerable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">GetEnumerator&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">IEnumerator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Reset&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NotSupportedException&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">IDisposable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Dispose&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，方法的控制流被编译器完全改变，因为每一个 yield return 语句都意味着下一次进入函数时要从一个新的状态开始继续运行。不仅如此，原有方法现在仅仅返回一个新的状态机对象，而不包含任何实现。这意味着，在原方法中，不改变控制流的情况下很难实现协程效果。&lt;/p>
&lt;p>Simon Tatham 利用达夫设备和宏，在 C 语言中，仅需插入少许代码即可实现无栈协程！就像我在前面给出的 C# 版本的协程一样。你一眼就能理解修改后的协程方法的控制流。&lt;/p>
&lt;p>你可以点击以下链接进行了解&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html" target="_blank" rel="noopener"
>原文&lt;/a>（英语）&lt;/li>
&lt;li>&lt;a class="link" href="https://mthli.xyz/coroutines-in-c/" target="_blank" rel="noopener"
>译文&lt;/a>（站外链接）&lt;/li>
&lt;/ul>
&lt;p>然而 Simon Tatham 的无栈协程也仅仅能存在于理论中，并且他给出的代码使用全局变量来保存协程上下文，因此不能同时调用同一个协程方法。而且，就像 Simon Tatham 在最后说的一样，这些“可怕破坏性的 crReturn 宏”，“非常糟糕的清晰度”以及“难如登天的重写复杂度”都阻止你在任何场合使用它。&lt;/p>
&lt;p>不过在了解这些原理的过程中，你的能力又提升了不少，不是吗？&lt;/p>
&lt;p>&lt;a id="循环展开的性能">&lt;/a>&lt;/p>
&lt;h2 id="循环展开的性能">循环展开的性能
&lt;/h2>&lt;p>让我们回到文章一开始的三个代码片段。&lt;/p>
&lt;p>并非第一个版本的性能就是第二个版本的 1/6，由于存在大量指令，CPU 取指令同样消耗时间，并且这是一个相对耗时的任务。CPU 也具有&lt;strong>分支预测&lt;/strong>等优化技巧来减少每次条件判断的耗时。并且在这种情况下，分支预测通常有较高的正确率。&lt;/p>
&lt;p>同时，Foo 内部的实现也影响执行效率的倍率。当 Foo 内部的实现越复杂，指令越多，循环所导致的性能缺陷就越不明显。&lt;/p>
&lt;p>因此，当你实际 Benchmark 这两段代码时，可能并不会有那么可观的差距。&lt;/p>
&lt;p>我使用以下代码进行 Benchmark：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">BenchmarkLoopUnroll&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [Benchmark]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">ForLoopCompilerOptimized&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [Benchmark]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">ForLoop10TimesUnroll&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [Benchmark]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">ForLoopNoOptimization&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">1000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [Benchmark(Baseline = true)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na"> [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">HardCodedThousandCall&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 省略 997 行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 RyuJIT 得到以下测试结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">// * Summary *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BenchmarkDotNet v0.14.0, Ubuntu 24.04 LTS (Noble Numbat) WSL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13th Gen Intel Core i5-13500H, 1 CPU, 16 logical and 8 physical cores
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.NET SDK 8.0.108
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Host] : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DefaultJob : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| Method | Mean | Error | StdDev | Ratio | RatioSD |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|------------------------- |---------:|----------:|----------:|------:|--------:|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| HardCodedThousandCall | 1.095 us | 0.0129 us | 0.0120 us | 1.00 | 0.02 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| ForLoopNoOptimization | 1.110 us | 0.0211 us | 0.0187 us | 1.01 | 0.02 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| ForLoop10TimesUnroll | 1.050 us | 0.0193 us | 0.0180 us | 0.96 | 0.02 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| ForLoopCompilerOptimized | 1.070 us | 0.0117 us | 0.0109 us | 0.98 | 0.01 |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// * Legends *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Mean : Arithmetic mean of all measurements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Error : Half of 99.9% confidence interval
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> StdDev : Standard deviation of all measurements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Ratio : Mean of the ratio distribution ([Current]/[Baseline])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 us : 1 Microsecond (0.000001 sec)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// ***** BenchmarkRunner: End *****
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run time: 00:00:59 (59.07 sec), executed benchmarks: 4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，&lt;code>ForLoopNoOptimization&lt;/code> 相较于 &lt;code>HardCodedThousandCall&lt;/code> 并没有慢很多，虽然确实慢了一些。不过我们手动展开的方法 &lt;code>ForLoop10TimesUnroll&lt;/code> 确实是有效的，并且比编译器自带的优化效果还要好。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>作者: Caiyi Shyu&lt;/li>
&lt;li>Email: &lt;a class="link" href="mailto:caiyishyu@outlook.com" >caiyishyu@outlook.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="link" href="https://swtch.com/duffs-device/td-1983.txt" target="_blank" rel="noopener"
>https://swtch.com/duffs-device/td-1983.txt&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Markdown Syntax Guide</title><link>https://loongson-neuq.pages.dev/p/markdown-syntax-guide/</link><pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings
&lt;/h2>&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1
&lt;/h1>&lt;h2 id="h2">H2
&lt;/h2>&lt;h3 id="h3">H3
&lt;/h3>&lt;h4 id="h4">H4
&lt;/h4>&lt;h5 id="h5">H5
&lt;/h5>&lt;h6 id="h6">H6
&lt;/h6>&lt;h2 id="paragraph">Paragraph
&lt;/h2>&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes
&lt;/h2>&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h3 id="blockquote-without-attribution">Blockquote without attribution
&lt;/h3>&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h3 id="blockquote-with-attribution">Blockquote with attribution
&lt;/h3>&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br>
— &lt;cite>Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables
&lt;/h2>&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inline-markdown-within-tables">Inline Markdown within tables
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;th>D&lt;/th>
&lt;th>E&lt;/th>
&lt;th>F&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td>
&lt;td>Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td>
&lt;td>Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td>
&lt;td>Proin sit amet velit nec enim imperdiet vehicula.&lt;/td>
&lt;td>Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td>
&lt;td>Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks
&lt;/h2>&lt;h3 id="code-block-with-backticks">Code block with backticks
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces
&lt;/h3>&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="diff-code-block">Diff code block
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">[dependencies.bevy]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="one-line-code-block">One line code block
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>A paragraph&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-types">List Types
&lt;/h2>&lt;h3 id="ordered-list">Ordered List
&lt;/h3>&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h3 id="unordered-list">Unordered List
&lt;/h3>&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h3 id="nested-list">Nested list
&lt;/h3>&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark
&lt;/h2>&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>CTRL&lt;/kbd> + &lt;kbd>ALT&lt;/kbd> + &lt;kbd>Delete&lt;/kbd> to end the session.&lt;/p>
&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Hugo's markdown extension usages</title><link>https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/</guid><description>&lt;h2 id="math-typesetting">Math Typesetting
&lt;/h2>&lt;p>Stack has built-in support for math typesetting using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>.&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s not enabled by default side-wide,&lt;/strong> but you can enable it for individual posts by adding &lt;code>math: true&lt;/code> to the front matter. Or you can enable it side-wide by adding &lt;code>math = true&lt;/code> to the &lt;code>params.article&lt;/code> section in &lt;code>config.toml&lt;/code>.&lt;/p>
&lt;h3 id="inline-math">Inline math
&lt;/h3>&lt;p>This is an inline mathematical expression: $\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="block-math">Block math
&lt;/h3>$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>$$
f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
$$
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="inline-shortcodes">Inline Shortcodes
&lt;/h2>&lt;p>For more details, check out the &lt;a class="link" href="https://stack.jimmycai.com/writing/shortcodes" target="_blank" rel="noopener"
>documentation&lt;/a>.&lt;/p>
&lt;h3 id="bilibili-video">Bilibili video
&lt;/h3>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1d4411N7zD"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="tencent-video">Tencent video
&lt;/h3>
&lt;div class="video-wrapper">
&lt;iframe src="https://v.qq.com/txp/iframe/player.html?vid=g0014r3khdw&amp;auto=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="youtube-video">YouTube video
&lt;/h3>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/0qwALOOvUik"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="generic-video-file">Generic video file
&lt;/h3>&lt;div class="video-wrapper">
&lt;video
controls
src="https://www.w3schools.com/tags/movie.mp4"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://www.w3schools.com/tags/movie.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h3 id="gist">Gist
&lt;/h3>&lt;script src="https://gist.github.com/CaiJimmy/e2751a943de10b2a5b3a8a6c2120cb86.js">&lt;/script>
&lt;h5 id="gitlab">GitLab
&lt;/h5>&lt;script
type="application/javascript"
src="https://gitlab.com/-/snippets/2589724.js"
>&lt;/script>
&lt;h3 id="quote">Quote
&lt;/h3>&lt;blockquote>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>A famous person, &lt;/span>&lt;a href="https://en.wikipedia.org/wiki/Book">&lt;cite>The book they wrote&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@codioful" target="_blank" rel="noopener"
>Codioful&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/WDSN62Qdxuk" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="image-gallery">Image gallery
&lt;/h2>&lt;p>Hugo theme Stack supports the creation of interactive image galleries using Markdown. It&amp;rsquo;s powered by &lt;a class="link" href="https://photoswipe.com/" target="_blank" rel="noopener"
>PhotoSwipe&lt;/a> and its syntax was inspired by &lt;a class="link" href="https://typlog.com/" target="_blank" rel="noopener"
>Typlog&lt;/a>.&lt;/p>
&lt;p>To use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo&amp;rsquo;s page bundle feature to read the dimensions of the image. &lt;strong>External images are not supported.&lt;/strong>&lt;/p>
&lt;h3 id="syntax">Syntax
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">![&lt;span class="nt">Image 1&lt;/span>](&lt;span class="na">1.jpg&lt;/span>) ![&lt;span class="nt">Image 2&lt;/span>](&lt;span class="na">2.jpg&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="result">Result
&lt;/h3>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/1.jpg"
width="2000"
height="1400"
srcset="https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/1_hudd2e8259c20ed0dcaa856c253552e90f_14625_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/1_hudd2e8259c20ed0dcaa856c253552e90f_14625_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Image 1"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
> &lt;img src="https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/2.jpg"
width="1500"
height="2250"
srcset="https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/2_hubce42636ecacc1a380b462f3110efcec_37455_480x0_resize_q75_box.jpg 480w, https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/2_hubce42636ecacc1a380b462f3110efcec_37455_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Image 2"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@mymind" target="_blank" rel="noopener"
>mymind&lt;/a> and &lt;a class="link" href="https://unsplash.com/@lukechesser" target="_blank" rel="noopener"
>Luke Chesser&lt;/a> on &lt;a class="link" href="https://unsplash.com/" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Archives</title><link>https://loongson-neuq.pages.dev/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/archives/</guid><description/></item><item><title>Search</title><link>https://loongson-neuq.pages.dev/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/search/</guid><description/></item><item><title>龙芯班介绍及招新宣传</title><link>https://loongson-neuq.pages.dev/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://loongson-neuq.pages.dev/intro/</guid><description>&lt;h2 id="缘起">缘起
&lt;/h2>&lt;p>进入本世纪，移动互联网、大数据、云计算、物联网、人工智能等新一代信息技术快速发展，促进形成了不同形态的新型计算系统。计算机人才的培养从“程序性开发能力”进化为更重要的“&lt;strong>系统性设计能力&lt;/strong>”。要求计算系统开发人员必须了解不同系统平台的底层结构，具有系统观和系统思维，能够进行软硬件协同设计及其贯通，以强大的系统平台技术保证各项应用功能的实现，成为能力的关键特性，即&lt;strong>计算机系统能力&lt;/strong>。计算机系统能力培养对于解决计算机领域卡脖子关键问题，培育我国高端芯片、关键基础软件的后备人才尤为紧迫和重要。&lt;/p>
&lt;p>为此，2019年5月，教育部高等学校计算机类专业教学指导委员会授予我校计算机系统能力培养试点高校。我校正式开始计算机系统能力培养试点建设。2019年6月，我校与龙芯建立深度合作关系并签署了框架合作协议，与龙芯中科有限公司合作，成立龙芯华北基地暨龙芯-东北大学（秦皇岛）联合实验室。旨在培养计算机系统能力，以及为我国培养在卡脖子的计算机核心关键技术领域人才。2019年8月，创立龙芯班，主要培养中央处理器（CPU）、操作系统（OS）、编译器（Compiler），以及嵌入式芯片与系统设计等等。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/golden_board_1.png"
width="399"
height="266"
srcset="https://loongson-neuq.pages.dev/intro/assets/golden_board_1_hudc8a6adde31c839db514efc27b18c554_425563_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/golden_board_1_hudc8a6adde31c839db514efc27b18c554_425563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/th>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/golden_board_2.png"
width="402"
height="263"
srcset="https://loongson-neuq.pages.dev/intro/assets/golden_board_2_huf4666acc242acd1812b4d1ce603b5f01_423928_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/golden_board_2_huf4666acc242acd1812b4d1ce603b5f01_423928_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/1st_class.png"
width="397"
height="264"
srcset="https://loongson-neuq.pages.dev/intro/assets/1st_class_hu8f71d20ec04f9449d820e4586a9498c3_420257_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/1st_class_hu8f71d20ec04f9449d820e4586a9498c3_420257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/td>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/presentation.png"
width="394"
height="263"
srcset="https://loongson-neuq.pages.dev/intro/assets/presentation_hu7ea058ec2836f4d3dc87a0814abf7c77_415500_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/presentation_hu7ea058ec2836f4d3dc87a0814abf7c77_415500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="计算机系统能力竞赛">计算机系统能力竞赛
&lt;/h2>&lt;p>全国大学生计算机系统能力大赛旨在以学科竞赛推动专业建设和计算机领域创新人才培养体系改革，培育我国高端芯片、关键基础软件的后备人才，始终坚持围绕CPU、编译系统、操作系统、数据库管理系统的设计和实现，在赛题和赛制上不断推陈出新。2024年启动智能系统创新设计赛（小米杯）、智能计算创新设计赛（先导杯），形成了从计算机系统核心软硬件到完整系统的比赛格局。&lt;/p>
&lt;p>作为“计算机类专业系统能力培养”教育生态的重要组成部分，大赛创办八年来，参赛学校、参赛人数不断增加，以赛促学、以赛促教的作用明显，学生的专业核心能力、工程能力、创新能力不断提升，2023年更是成功入选中国高等教育学会《2023全国普通高校大学生竞赛分析报告》竞赛目录，成为计算机领域重要的学科竞赛。&lt;/p>
&lt;p>2024年，多家新闻媒体对赛事报道。钱江晚报，澎湃新闻网等媒体以“&lt;strong>继ACM后，计算机系统能力大赛受众多互联网大厂热捧，为啥？&lt;/strong>”为标题对赛事进行报道。诸多互联网大厂越来越重视CPU，操作系统、编译器等自主化，它们也将目光投到大学系统人才培养上来。它们通过冠名全国大学生系统能力大赛，比如CPU大赛由“龙芯”冠名，编译系统设计赛由华为“毕昇”冠名，智能系统创新设计赛由“小米”冠名，以提前参与到大学系统设计开发人才培养中来。操作系统功能赛由华为、麒麟、龙芯、蚂蚁、OPPO、vivo、小米、龙蜥社区、国科环宇、飞腾等企业专家命题，吸引350支队伍报名，涉及863名同学和159位指导教师。“华为、龙芯等把它们公司的实际科技问题，拿到了比赛当中，看看在校大学生们怎么解决行业前沿问题，真正体现了业界需求和高校人才培养的‘双向奔赴’。&lt;/p>
&lt;h2 id="目标与规划">目标与规划
&lt;/h2>&lt;p>&lt;img src="https://loongson-neuq.pages.dev/intro/assets/goal.png"
width="246"
height="272"
srcset="https://loongson-neuq.pages.dev/intro/assets/goal_hu600bc8995b4643881519328f0262a03b_268433_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/goal_hu600bc8995b4643881519328f0262a03b_268433_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>以培养学员融会贯通计算机系统的软硬件知识，设计出自己的CPU，并在上面运行自己的操作系统，还在上面运行自己的编译器和数据库等系统软件为目标的龙芯班。&lt;br>
目前，主要面向龙芯班学员开设两门公选课程《CPU设计艺术》和《操作系统》。其中，《CPU设计艺术》课程将于秋季学期十一后开课，《操作系统》将于春季学期开课。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选拔龙芯班的优秀学员参加全国计算机系统能力竞赛，力争取得优异成绩。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选拔龙芯班的优秀学员作为助教团队，辅导新学员学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>鼓励优秀学员，参加科创课题团队，一生一芯计划和百芯计划等活动，进一步树立投身科技事业的理想和锻炼能力。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="指导教师">指导教师
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>方淼，男，东北大学计算机科学与技术专业工学学士学位，大连理工大学计算机应用技术专业工学博士学位，现任计算机工程系副主任（负责本部门教学工作），学院科研团队“语言与智能系统实验室”负责人，学院“计算机系统能力培养实验班（龙芯实验室）”负责人。目前主要从事自然语言理解，机器学习和计算机系统等方向的科研和教学工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>王鑫，男，1978年10月生，河北丰南人，东北大学计算机应用技术工学硕士学位，现任教于计算机科学系计算机科学与技术专业，讲师，主要从事教学工作。负责操作系统教学。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>张旭，女，1988年4月出生，河北迁西人，内蒙古大学计算机专业工学硕士学位，现任教于学院实验教学中心，实验师。目前主要从事实验教学工作，指导学生参加2019年（第12届）中国大学生计算机设计大赛软件应用与开发类决赛（作品：基于网络通信的远程解锁工具）荣获全国二等奖。负责CPU设计教学。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>科创课题指导教师暂未列出。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="优秀学员">优秀学员
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Photo&lt;/th>
&lt;th style="text-align:center">Profile&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C.png"
width="230"
height="182"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C_hua0b861b31d5b0dc4aaaee97788d412b1_167976_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AD%9F%E7%A5%A5%E4%B8%9C_hua0b861b31d5b0dc4aaaee97788d412b1_167976_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/td>
&lt;td style="text-align:center">孟祥东，2017级，毕业进入龙芯公司基础软件部工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB.png"
width="135"
height="183"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB_huebbcd386fb2edaadf7f82eb2d43534ca_99251_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E6%9D%A8%E5%85%86%E9%91%AB_huebbcd386fb2edaadf7f82eb2d43534ca_99251_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="73"
data-flex-basis="177px"
>&lt;/td>
&lt;td style="text-align:center">杨兆鑫，2017级，考入中科院计算所龙芯实验室研究生&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C.png"
width="134"
height="184"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C_hu48e39c645a027d08b179c7fd41063cda_99051_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E9%99%88%E8%99%B9%E8%83%9C_hu48e39c645a027d08b179c7fd41063cda_99051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="72"
data-flex-basis="174px"
>&lt;/td>
&lt;td style="text-align:center">陈虹胜，2019级，毕业进入龙芯公司从事研发工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AE%8B%E9%9B%A8.png"
width="156"
height="182"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AE%8B%E9%9B%A8_hudb0a974f0fcb35e4b7d876519fcdb370_114010_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E5%AE%8B%E9%9B%A8_hudb0a974f0fcb35e4b7d876519fcdb370_114010_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/td>
&lt;td style="text-align:center">宋雨，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E7%94%B0%E5%AE%87.png"
width="166"
height="223"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E7%94%B0%E5%AE%87_hu2cbdff2b05e8df5f9aeac025137a3acb_148620_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E7%94%B0%E5%AE%87_hu2cbdff2b05e8df5f9aeac025137a3acb_148620_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="74"
data-flex-basis="178px"
>&lt;/td>
&lt;td style="text-align:center">田宇，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87.png"
width="234"
height="223"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87_hu6bc5baa18fa28ed287f7301dd2e90a38_209370_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E4%BB%98%E9%9C%87%E5%AE%87_hu6bc5baa18fa28ed287f7301dd2e90a38_209370_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/td>
&lt;td style="text-align:center">付震宇，2019级，保送到中科大 USTC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83.png"
width="168"
height="222"
srcset="https://loongson-neuq.pages.dev/intro/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83_hufb79c78ed660d1b8355b1f2f8cba9a9b_149731_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/graduate/%E8%A7%A3%E5%8D%9A%E5%85%83_hufb79c78ed660d1b8355b1f2f8cba9a9b_149731_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/td>
&lt;td style="text-align:center">解博元，2020级，因竞赛优异成绩被华为免试录取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="取得成绩">取得成绩
&lt;/h2>&lt;p>2020年，我校首次入围CPU赛道全国总决赛，荣获团队赛三等奖一项和个人赛三等奖一项。&lt;br>
2021年，我校再创佳绩，在CPU赛道全国总决赛，获得团队赛三等奖两项，个人赛二等奖一项。&lt;br>
2022年，我校继续入围CPU赛道全国总决赛，团队赛三等奖一项，个人赛三等奖一项。&lt;br>
2023年，我们在全国总决赛CPU赛道获得团队赛三等奖两项，在OS赛道，获得团队赛三等奖一项，优胜奖一项。&lt;br>
2024年，我们在全国总决赛智能系统创新设计赛道获得团队赛一等奖，在CPU赛道获得团队赛二等奖两项，在OS赛道，获得团队赛三等奖一项。&lt;br>
2025年，我们在全国总决赛CPU赛道获得团队赛三等奖，在OS功能赛道获得团队赛优胜奖，OS内核赛道，获得二等奖一项。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/award_1.png"
width="386"
height="396"
srcset="https://loongson-neuq.pages.dev/intro/assets/award_1_hu7ea2d836e5142eade878814a95a43aa0_612887_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/award_1_hu7ea2d836e5142eade878814a95a43aa0_612887_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/th>
&lt;th style="text-align:center">&lt;img src="https://loongson-neuq.pages.dev/intro/assets/award_2.png"
width="439"
height="396"
srcset="https://loongson-neuq.pages.dev/intro/assets/award_2_hud7568864bb00fb447e90f5a165b4cae4_696969_480x0_resize_box_3.png 480w, https://loongson-neuq.pages.dev/intro/assets/award_2_hud7568864bb00fb447e90f5a165b4cae4_696969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" "
class="gallery-image"
data-flex-grow="110"
data-flex-basis="266px"
>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;h2 id="召唤">召唤
&lt;/h2>&lt;ul>
&lt;li>如果你有梦想，想设计自己的CPU，运行自己的OS，安装自己设计的编译器，请加入我们！&lt;/li>
&lt;li>如果你有梦想，想在大学期间做一款自己的CPU产品，流出一块自己的芯片，请加入我们！&lt;/li>
&lt;li>如果你有梦想，掌握计算机领域核心技术，到计算机系统能力大赛舞台展现实力，毕业到大厂工作，请加入我们！&lt;/li>
&lt;li>如果你有梦想，希望掌握计算机核心技术，为科技强国做出自己的贡献，请加入我们！&lt;/li>
&lt;li>加入我们，开启你的技术进阶之旅！与志同道合的伙伴一起，探索前沿技术，成就你的未来梦想！&lt;/li>
&lt;li>强烈呼唤各位的到来，独行者速，众行者远！&lt;/li>
&lt;/ul>
&lt;p>报名要求：&lt;/p>
&lt;ul>
&lt;li>热爱计算机系统和CPU、OS、Compiler设计，有志为国家计算机事业发展做贡献；&lt;/li>
&lt;li>积极主动、坚持不懈，有较强的团队责任心和自学能力；&lt;/li>
&lt;li>大一、大二，以及大三学生（能专心做芯片设计毕设，工作非考研的同学）。&lt;/li>
&lt;/ul>
&lt;p>开班日期：十一假期后&lt;br>
报名截止日期： 2025年10月9号 24:00&lt;br>
加入招新群：[1061369959]&lt;/p>
&lt;p>联系人：&lt;br>
徐才益（OS方向）： QQ：1052819745，邮箱：&lt;a class="link" href="mailto:Cai1Hsu@outlook.com" >Cai1Hsu@outlook.com&lt;/a>&lt;br>
张迅（CPU方向）：QQ：2198762717，邮箱：&lt;a class="link" href="mailto:2198762717@qq.com" >2198762717@qq.com&lt;/a>&lt;br>
陈朝臣（编译器方向）：QQ: 3174025065，邮箱：&lt;a class="link" href="mailto:3174025065@qq.com" >3174025065@qq.com&lt;/a>&lt;br>
地点：基础楼304&lt;/p></description></item></channel></rss>