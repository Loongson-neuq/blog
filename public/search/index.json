[{"content":"本次课程的部分内容摘抄自 Microsoft Learn 上的 Get started with Rust 课程。\nOverview Rust 是一种系统编程语言，因此可用于编写系统（如操作系统）。 但它也可用于编写性能和可信度很重要的应用程序。 Rust 语言语法可以与 C++ 语法相媲美，提供了与新式 C++ 相当的性能；\n❕INFO\nC++是什么垃圾也配\n对于许多有经验的开发人员来说，Rust 在编译和运行时模型、类型系统和确定性终止化方面都是正确的。\n❕INFO\n在系统编程中，控制流可能被扰乱，某些优化并不完全正确，需要开发者具有丰富的经验对生成的汇编代码进行审查。不能完全依赖编译器。\n此外，Rust 的设计保证了内存安全，而不需要进行垃圾回收。\n那么，我们为什么要选择 Rust 作为 Windows 的最新语言投影呢？ 其中一个因素是，Stack Overflow 的年度开发人员调查显示，Rust 是目前为止年复一年最受欢迎的编程语言。 虽然你可能会发现此语言有陡峭的学习曲线，但一旦你越过了这个峰，就很难不爱上它了。\nRust development toolset/ecosystem crate 是 Rust 编译和链接单元。 crate 可以源代码形式存在，然后能够被处理成以二进制可执行文件（简称二进制文件）或二进制库（简称库）形式存在的 crate 。通常一个 crate 就是一个 project。\nRust 项目称为包。 一个包可以包含一个或多个 crate，以及描述如何生成这些 crate 的 Cargo.toml 文件。更准确的说法是 solution。\nrustup 是 Rust 工具链的安装程序和更新程序。\nCargo 是 Rust 包管理工具的名称。也用于构建、测试和发布 Rust 项目。\nrustc 是 Rust 编译器。 大多数情况下，你不会直接调用 rustc，而是通过 Cargo 间接调用它。\ncrates.io (https://crates.io/) 是 Rust 社区的 crate 注册表。crates.io 托管大量的 crate，可以通过 Cargo 下载，并自动解决依赖关系。\nProgarmming language Concepts Type syetem Strong typing? Weak typing? 在编程语言的类型系统中，强类型（strong typing）和弱类型（weak typing）是两个核心概念，用于描述编程语言对数据类型的约束程度。\n强类型（Strong Typing） 强类型语言要求变量的数据类型在使用时要严格遵守，通常不允许不同类型之间的隐式转换。例如，Rust、.NET都属于强类型语言。以下是强类型的特征：\n严格的类型检查：强类型语言在编译期或运行期都会进行严格的类型检查，如果类型不匹配，代码就会报错。例如，在Rust中将整数赋值给一个字符串类型的变量会直接报错，而不会自动转换类型。\n安全性：强类型语言通常可以防止许多潜在的错误，因为它们在操作不兼容类型时会立即报错，帮助程序员更早地发现错误。例如在Rust中，试图将整型变量作为浮点型来处理，编译器会立即提醒，这避免了许多运行时错误。\n类型转换需要显式：在强类型语言中，类型转换一般需要显式声明，编译器不会进行隐式转换。例如在Rust中，let x: i32 = 10; let y: f64 = x as f64;。as关键字显式地将i32类型转换成了f64。\n⚠️ NOTE\nRust 仅在安全的情况下允许隐式转换，例如let x: i32 = 10; let y: f64 = x;是合法的，因为i32可以隐式转换成f64。并且 Rust 还有自动解引用机制，实现了一定程度的隐式转换。\n内存安全：强类型语言更容易实现内存安全，因为严格的类型系统有助于防止无效的内存访问。例如，Rust的所有权系统和借用检查在类型系统中嵌入了内存管理的概念，确保了线程安全和内存安全。 弱类型（Weak Typing） 弱类型语言对类型的限制较少，通常允许不同类型之间的隐式转换，例如C和JavaScript都具有弱类型的特性。以下是弱类型的特征：\n更宽松的类型转换：弱类型语言在不同类型之间可以自由转换。例如在JavaScript中，\u0026quot;5\u0026quot; + 10 会自动将数字10转换成字符串，然后得到字符串\u0026quot;510\u0026quot;。这种隐式转换提供了便利，但也可能导致难以发现的错误。\n更高的灵活性：弱类型允许开发者快速编写代码，减少了类型检查的约束，代码在运行时的适应性更高。例如，JavaScript中的函数可以接受任何类型的参数，不必进行严格的类型定义。\n容易出错：由于类型不严格，弱类型语言更容易引发错误，尤其是在无意中发生隐式类型转换时。比如在C语言中，整数和指针之间可以自由转换，这会导致很多内存和安全问题。\nRust 的强类型优势 Rust 是一种强类型系统的语言，其设计注重内存安全和性能，通过严格的类型检查和所有权模型来保证代码的可靠性。Rust 的强类型特性让开发者在编译时可以捕捉到许多潜在的错误，减少了运行时的崩溃风险，同时通过显式转换机制避免了隐式转换带来的隐患。\n最后，类型是仅对于高级语言抽象层的概念，在底层的硬件层，一切都是二进制的。所有的类型实例不过是一段 memory block，在汇编中我们使用同样的指令来操作所有的类型。因此，在 C 这种仅对汇编进行薄封装的语言中，类型的概念并不是很重要。\nSystems programming language “系统编程语言”通常指的是适合底层开发、硬件交互和性能优化的语言，与更高层抽象的应用编程语言相比，它们有一些独特的特点：\n直接硬件访问和内存控制(Most important to us)： 系统编程语言通常支持对硬件和内存进行低层次的访问，例如手动管理内存（Rust、C/C++的malloc/free或new/delete）。这让开发者能精确控制程序的内存分配和释放，提高性能和资源利用率。\n高效的执行性能： 系统编程语言（如Rust、C、C++）通常会编译成原生机器码（针对特定架构及操作系统的汇编指令），以确保代码在执行时的效率和速度。这在操作系统、嵌入式系统等需要实时响应和高效性能的场景中尤为重要。\n⚠️ NOTE\n不完全正确，事实上，JIT 和 GC 的组合更能够在保证极端性能的完全释放和最大延迟。只是 JIT 依赖运行时，并且 GC 不能保证确定性时延。这些缺陷在系统编程中是不可接受的。因为运行时依赖操作系统。而 GC 导致的不确定性时延会导致系统的不可预测性。\n细粒度的并发控制： 系统编程语言支持低级并发控制（如Rust中的无锁数据结构、C++的线程库和原子操作）。Rust特别强调安全的并发，通过借用检查器和所有权系统来避免数据竞争，帮助在保持并发性能的同时防止线程安全问题。\n内存安全： 像Rust这样的现代系统编程语言注重内存安全，避免空指针和悬空指针等问题。Rust的所有权系统在编译期防止了数据竞争、悬挂引用和双重释放等内存问题，大幅降低了由于内存管理引发的漏洞风险。\n零成本抽象： 系统编程语言（特别是Rust和C++）支持高效的抽象机制，允许编写高性能、模块化的代码。\n系统编程语言的这些特点使它们适合于操作系统、驱动程序、嵌入式系统、数据库引擎和游戏引擎等对性能和硬件直接交互有严格要求的场景。相比之下，高层次的编程语言（如Python、JavaScript）更适合于快速开发和构建应用程序接口（API）、数据处理或前端交互，因为它们提供了更丰富的标准库、内置内存管理和更高的抽象能力，但牺牲了一部分性能和对系统的直接控制。\nWhy Rust? 我们要编写的是操作系统内核，不是一般的用户程序！\n内存安全性：Rust独特的所有权系统和借用检查机制在编译阶段保证了内存安全，避免了常见的内存错误，如空指针引用、悬空指针和数据竞争问题。这对于编写操作系统内核尤为重要，因为内核中的错误通常会导致系统崩溃。Rust的安全检查帮助新手在不依赖垃圾回收的情况下实现更高的内存安全性，从而在早期阶段减少调试和崩溃问题。\n现代化语法，开发者友好：Rust的语法较为现代化且接近高级语言，易于理解。相比传统的系统编程语言（如C/C++），Rust能让新手更快上手，写出结构化、可读性高的代码，从而减少理解操作系统开发的语言门槛，使其更专注于系统逻辑和底层实现。\n高效的错误信息和强类型系统：Rust的编译器提供详细的错误提示，帮助开发者快速定位和解决问题。Rust的强类型系统在编译时检查代码中的潜在错误，特别是在内核开发中，这种类型检查可以大大减少运行时的错误和潜在的安全漏洞。\n低层次控制和高性能：Rust与C一样可以访问底层硬件和控制内存布局，但同时还能提供更高的性能和资源控制能力。这使得新手能够更灵活地操作RISC-V平台的硬件资源，同时获得接近C的性能，这是编写高效操作系统内核的重要特性。\n丰富的生态和社区支持：Rust社区对操作系统开发的支持日渐丰富，包括riscv crate等对RISC-V架构的支持库、core和alloc等标准库，以及x86_64和riscv等架构支持工具。社区中有许多成熟的项目和开源代码可供参考，新手可以借鉴这些资源加速学习。\n无运行时、轻量编译选项：Rust允许在no_std环境中开发，即不依赖标准库，从而更适合裸机（bare metal）开发。对于RISC-V平台操作系统内核，Rust可以使用#![no_std]配置，这样就能完全剥离标准库，直接进行裸机编程，符合操作系统开发的需求。\n我最看重什么？ 大量第三方库：Rust 社区的生态系统非常丰富，有大量的第三方库可供使用，可以大大提高开发效率。\n项目质量: 不规范换行？不规范缩进？不规范命名？clippy 全部给你报错！代码全部塞一个类一个函数里？测试过不了你就老实了！\nRust is good enough? 我不认为 Rust 够好，事实上它除了内存安全的一点保证之外远远能让我满意。上述的优点 Rust 也并没有做到最好。\nSUCK virtual dispatch: Rust 的多态性主要基于泛型，倾向于静态分派，在编译期生成专用代码来替代泛型参数，因此很少使用动态分派（dyn Trait），这提高了性能，但也限制了动态多态的灵活性。相比之下，.NET 提供了灵活的接口和虚函数机制，适合需要基于对象或接口进行频繁动态分派的场景。\nSUCK async programming: 许多人认为 async/await 是 Rust 的一大优势，但实际上，Rust 的异步编程模型相对简陋。Rust 的异步编程主要基于Future和async/await语法，但缺乏像.NET Core中的Task和async/await那样完善的异步编程框架和库。Rust的异步编程需要依赖第三方库（如tokio、async-std）来实现，而且在使用过程中需要处理更多的错误和异常情况，不如.NET Core的异步编程模型简洁和易用。\nMacro? Garbage!: 我最讨厌的东西！宏分为两种，一种是声明式宏，一种是过程式宏。声明式宏类似 C 里面的宏，通常只用于简单的文本替换，只是添加了一些语法约束。过程宏是用于编译期代码生成的工具，但是 Rust 的过程宏相当简陋，仅支持 syntax analysis，.NET 的增量代码生成器则强大得多，不需要宏就能实现更强大的代码生成功能。\nRust 还有许多缺点，但是我认为不太重要，因此不再叙述。例如饱受诟病的编译速度慢，命名空间管理毫无逻辑等等。当然，Rust 太难不是 Rust 的问题。\n但是在我们的场景下，Rust 是最适合的语言。\nSetup your own Rust development environment Prerequisites Windows 由于 Rust 依赖 C 编译套件用于编译的最终阶段，因此在 Windows 上安装 Rust 时，需要安装 C 编译套件。 Windows 上的 C 运行时主要是 MSVS，因此你需要安装 Microsoft Visual C++。你可以下载 Microsoft C++ Build Tools，也可以（推荐）首选直接安装 Microsoft Visual Studio。安装 Community 版本的 Visual Studio 即可。安装时仅勾选 Desktop development with C++ 选项即可。\nDetailed instructions\nLinux 安装对应平台和与宿主主机相同的架构的 GCC 即可。\nDevelopment environment RustRover? RustRover 是 JetBrains 开发的 Rust 语言的 IDE，它是一个基于 IntelliJ 平台的 IDE，提供了 Rust 语言的代码编辑、调试、自动补全、代码重构等功能。RustRover 也支持 Cargo 包管理工具，可以帮助你更方便地管理 Rust 项目。类似于 Idea, PyCharm, Clion 等。并且 RustRover 社区版是免费的。\n但是！\n不要用！由于我们的最终目的是系统编程，RustRover 是面向用户级应用的 IDE，它的调试器和代码提示等功能对于系统编程并不友好。\n因此我要求大家使用 Cargo 命令行　+　你自己喜欢的文本编辑器（VSCode, Vim, Emacs, Sublime Text, Notepad++）进行开发。\nInstall Rust 不管你用的什么操作系统，打开 https://rustup.rs。\n如果你是 Windows 用户，点击最上面的rustup-init.exe下载并运行。 如果你是 Linux 用户，复制网址下面的命令到终端运行。\n然后根据提示，一路回车即可。\n某些发行版可能会将 rustup 添加至软件源，当然上述方式也可以\nVerify installation 打开终端，输入cargo --version，如果输出了版本号，说明安装成功。\n1 2 PS C:\\Users\\Caiyi Hsu\u0026gt; cargo --version cargo 1.80.0 (376290515 2024-07-16) Rust with Visual Studio Code 确保你已经安装了 Visual Studio Code 和 Cargo。打开 Visual Studio Code，安装 rust-analyzer 插件。\nMore usages:\nRust with Visual Studio Code\nRust basic syntax The Rust Programming Language\nUnofficial Chinese Translation\n下集预告 有重量级内容，敬请期待！\nUnderstanding Rust via Memory management\n做了 Rustlings 的同学可以提前看一下。\n","date":"2024-10-27T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/os-week2-get-started-with-rust/","title":"[OS Week2] Get started with Rust"},{"content":"Prerequisite Memory Management Stack Remember:\nAll variables you defined in a function/method is allocated on the STACK, even non-fixed size types and reference types.\nBut the thing you can access directly or actually stored on the stack must be fixed size types.\n1 2 3 4 5 6 7 8 void foo() { int i = 0; int* p = \u0026amp;i; Object* obj = new Object(); std::string str = \u0026#34;Hello, world\u0026#34;; StructType value = StructType {1, 2, 3}; } All variable you can use directly is allocated on the stack (frame).\nThis is not what I heard from others/the Internet! Reference types String Vector Dynamic allocation (eg. malloc) People all told me that these types are allocated on the HEAP!\nI would say, that\u0026rsquo;s the root of your confusion. Why don\u0026rsquo;t we talk about the Heap first then?\nAnd I used two different term: define and access\nHeap Heap is a large contigous memory managed by both the Operating System and the language runtime.\nRuntime may be the Standard library, eg. the libC or GC, eg. Go, .NET \u0026hellip;\nWe don\u0026rsquo;t have to care about what\u0026rsquo;s happening in the background, at least for now.\nWe only care about two functions:\nOne for alloacting memory 1 void* alloc(size_t size_of_bytes); which is malloc, new, new[] \u0026hellip;\nAnother for returning allocated memory 1 void free(void* ptr); which is free, delete, delete[] \u0026hellip;\nOne interesting thing you should have noticed is, when we returning a piece of memory, we only need to pass the pointer to the function, but not the size of the memory.\nWhy? Because Someone must have recorded the size of the memory when it was allocated.\nThe guy is the Memory Allocator, a part of the runtime.\nWhen you call alloc method, the allocator simply find a piece of memory that is large enough to hold the data you want to store, and then record the size of the memory.\nBut where is the large piece of meory(the allocator uses) from?\nThe answer is the Operating System.\nThe OS provides a system call to allocate a piece of memory, and the allocator will use this system call to get the memory.\nUnix-like system The unix-like system provides a system call brk or sbrk to allocate memory.\nThe system call is like the function below, but is NOT a real function.\n1 2 int brk(void *addr); void *sbrk(intptr_t increment); Additional info: brk syscall\nA note from the page:\n1 2 Avoid using brk() and sbrk(): the malloc(3) memory allocation package is the portable and comfortable way of allocating memory. When you call the brk, the OS will allocate memories Right After the end of the previous memory block. So when you constently call the brk, the memory block will grow larger and larger, but the memory block is always contiguous.\nThe malloc function will use the brk system call to allocate memory, and uses the memory block for the allocation and recording the size of the memory.\nHow do the OS gurantee the memory block is contiguous or the end of the memory block always have enough space for the next allocation?\nThe answer is, the OS atually doesn\u0026rsquo;t gurantee that. Actually, memory pieces that a user program feels contiguous may NOT be contiguous in the physical memory. The OS uses a technique called Virtual Memory and Page Table to make the memory block contiguous in the user program\u0026rsquo;s view.\nThe OS simply maps the virtual memory to the physical memory. This technique is done with the help of hardwares like MMU, a part of the CPU.\nWindows Windows does basically the same thing, but with a different system call, and the system call is wrapped by the VirtualAlloc function form the Kernel32.dll.\n1 2 3 4 5 6 LPVOID VirtualAlloc( [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect ); Additional info: VirtualAlloc\nBasically same as the brk system call from the Unix-like system, but with more options.\nContinue to talk about the Heap Think about all code you write about the heap, all allocated object you want to access, you must have a pointer to the object.\nThat\u0026rsquo;s exactly the problem.\nTake a look at the words again:\nAll variables you defined in a function/method is allocated on the STACK, even non-fixed size types and reference types.\nWhat you can access directly is Only the pointer, not the object itself. You MUST uses the pointer to access the object. And the pointer is allocated on the stack.\nNote that reference type is basically safe pointer, the reference is allocated on the stack, and the object is allocated on the heap.\nThere\u0026rsquo;s still one thing we have to talk about:\n1 2 vector\u0026lt;int\u0026gt; vec1; vector\u0026lt;int\u0026gt;* vec2 = new vector\u0026lt;int\u0026gt;(); What\u0026rsquo;s the difference between the two?\nI want to talk about the implementation and underlying of the vector first.\nWhen we talk about the dynamic array, we always have a pointer to the actually array, and the size of the array. So the vector is like this:\n1 2 3 4 5 6 7 // Note that I declared it as a struct, I\u0026#39;ll explain it later struct Vector\u0026lt;T\u0026gt; { T* data; size_t size; size_t capacity; } The first line of the code above actually allocated the three fields on the stack, Pointer to the data, size of the data, and the capacity of the data.\nThe second line of the code above actually allocated the three fields on the heap, Pointer to the data, size of the data, and the capacity of the data. And we uses a pointer to access the object.\nValues Allocated in Rust without Smart Pointer were all like the first line of the code above. Which is, All fields allocated on the stack.\nSmart pointer is like the Vector above(actually vector is a smart pointer), it allocates the fields on the stack, including a pointer to the actual object.\nFixed size? Actually, a class defination determined that class is also fixed size, just like the struct.\nBut class has a special feature: Polymorphism.\nThat\u0026rsquo;s is, when you reference an class object, it may not be the exactly the type, but a derived type. And derived type may have more fields than the base type. Which means the size of the object is not fixed.\nStruct and Class Struct instance were allocated on the stack by default, and class instance were allocated on the heap by default.\nSince the struct is allocated on the stack, we Call it Value Type. Value means we are not accessing it by a pointer, reference or something like that. But directly, we can touch it.\nWhy I declared the Vector as a struct? Simply because C++ allows you allocate a class instance on the stack. And I don\u0026rsquo;t want to make things confusing for people uses other languages.\nalthough this loses the most important feature of the class: polymorphism, which makes a class like a struct.\nWhy All instances allocated on the stack MUST be fixed size? Allocation calls for Value Types were generated at the the compile time, and the size of the object must be known at the compile time.\nAlso, the allocations calls hardcoded the size of the object, which means the size of the object must be fixed.\nSince the class has a special feature: Polymorphism, the size of the object is not fixed, so we can\u0026rsquo;t allocate it on the stack. But without Polymorphism, we can allocate a class instance on the stack, just like C++ does.\nMicro views of the stack I\u0026rsquo;ve talked about where is the heap, but not the stack. Stack is also a contiguous memory block. For simplicity, I\u0026rsquo;ll say that stack were managed by the OS, although it\u0026rsquo;s not true in some cases.\nStack of a program is Program Stack or Call Stack or Execution Stack. It\u0026rsquo;s used to store the local variables, function parameters, and the return address of the function.\nWhen a process starts, the OS will allocate a memory block for the process. And make a certain register point to the end of the memory block(High address). This register is called the Stack Pointer, which is rsp in x86_64 and sp in RISC-V.\nWhen you try allocate an instance on the stack, like, a int, we simply minus the stack pointer.\nYou might know stack is FILO or LIFO, but that doesn\u0026rsquo;t mean we have to pop the stack if we want to access the inner object. The FILO or LIFO is only for the stack frame, which keeps everything essential to allow function calling/returning.\nSince all instance on the stack is fixed size, all of their position is fixed, we know where the object is at the compile time. We know that all local variables can be accessed by frame pointer plus a fixed offset.\nThe stack is array-like, but not a real array. It\u0026rsquo;s a memory block, a memory block means that you can access whatever you want with the memory block. Stack is just a convention which constraints the way we access the memory block - FILO or LIFO.\nAn example is that, in Rust, we don\u0026rsquo;t have a specific data structure for Stack. In C++, in python, in .NET you would have a Type like Stack\u0026lt;T\u0026gt;, but in Rust, we don\u0026rsquo;t have that. We just use Vec\u0026lt;T\u0026gt;(vector\u0026lt;T\u0026gt; in Cpp). As long as you only call push and pop method.\nWhy the stack is faster than the heap? When we access the object on the stack, we know where the object is, we access it with a single instruction which contains the frame pointer and the offset.\nBut when we access the object on the heap, we have to read the pointer to a register, and then access the object with the pointer. That\u0026rsquo;s two instructions.\nAlso, accessing instance on the heap may cause cache miss, which is the REAL reason that heap is slower than the stack.\nMicro views of the stack allocation Having talked about the stack so much, you might wonder when do we push and pop.\nThe name of call stack implied that the stack has strong connection with Fuction Call.\nYou must have seen stack trace when the runtime throw an exception. The stack trace is actually the call stack.\nStack trace when a exception is thrown in .NET:\n1 2 3 4 5 Unhandled exception. System.Exception: Exception from Buz at Program.Buz() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 24 at Program.Bar() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 17 at Program.Foo() in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 11 at Program.Main(String[] args) in /home/caiyi/loongson-blog/content/post/move-semantic/StackTraceDemo/Program.cs:line 5 Remove some of the information, we get:\n1 2 3 4 at Program.Buz() in Program.cs:line 24 at Program.Bar() in Program.cs:line 17 at Program.Foo() in Program.cs:line 11 at Program.Main(String[] args) in Program.cs:line 5 Code can be obtained from https://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/StackTraceDemo\nWhy do we have so many functions from the Stack trace? Because the functions are called nestedly.\nThe top function is where the exception was actually thrown, and the lower function is where the top function was called. Since the main thread of our program begins with Main() function, the bottom function is always Main().\nWhen a function is called, the runtime will push a new frame to the stack, and when the function returns, the runtime will pop the frame from the stack.\nA frame stores everyting essential to restore the envrionment before the function was the frame call another function.\nWe know that CPU must read datas to its own register to do the calculation, and the register is limited. So we have to store the local variables and other things in somewhere else. That\u0026rsquo;s the stack frame. A frame only stores datas of the function, and the frame is popped when the function returns.\nLet\u0026rsquo;s look at some assembly code Having talked about how the stack so much, you might think it\u0026rsquo;s rather complicated to push and pop the stack. But it\u0026rsquo;s not. As I said before, we only have to minus the stack pointer and the minused size of memory is yours! To return the memory, we only have to add the size to the stack pointer.\nNO NEED TO CLEAR THE MEMORY when we push/pop the stack. CAN YOU THINK ABOUT WHY?\nThe same code as the one at the beginning of the article:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include \u0026lt;string\u0026gt; class Object { private: int _value; }; struct StructType { int value1; int value2; int value3; }; void foo() { int i = 0; int* p = \u0026amp;i; Object* obj = new Object(); std::string str = \u0026#34;Hello, world\u0026#34;; StructType value = StructType {1, 2, 3}; } The assembly code of the function foo is like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 section .data str db \u0026#34;Hello, world\u0026#34;, 0 section .text global foo foo: ; 函数开始，保存栈帧 push rbp ; 保存原始栈帧 mov rbp, rsp ; 设置新的栈帧 ; int i = 0; mov dword ptr [rbp-4], 0 ; 将变量 i 初始化为 0，并保存在栈中偏移 -4 ; int* p = \u0026amp;i; lea rax, [rbp-4] ; 取得变量 i 的地址 mov qword ptr [rbp-8], rax ; 将 p 指向 i 的地址并保存偏移 -8 ; Object* obj = new Object(); mov edi, 4 ; Object 的大小为 4 字节 call _Znwm ; 调用 operator new mov qword ptr [rbp-16], rax ; 保存返回的对象地址到 obj 中（偏移 -16） ; std::string str = \u0026#34;Hello, world\u0026#34;; lea rdi, [rel str] ; 将字符串地址加载到 rdi lea rsi, [rbp-32] ; 准备 str 变量的栈位置（偏移 -32） call _ZNSsC1EPKc ; 调用 std::string 构造函数 ; StructType value = StructType {1, 2, 3}; mov dword ptr [rbp-48], 1 ; 将 1 存储到 value.value1（偏移 -48） mov dword ptr [rbp-44], 2 ; 将 2 存储到 value.value2（偏移 -44） mov dword ptr [rbp-40], 3 ; 将 3 存储到 value.value3（偏移 -40） ; 函数结束，恢复栈帧并返回 mov rsp, rbp ; 恢复原始栈指针 pop rbp ; 弹出原始栈帧 ret ; 返回 We even do have to actually DO a allocation operation. We just know that where every variable should be and read/wirte the place directly. See instructions like mov dword ptr [rbp...], ...\nAdditinally, push and pop instructions are also used to store/access the stack, but they are just pseduo instructions. The real instructions are mov and add.\nFrom the assembly code, we can see that how much we push/pop the stack is determined at the compile time, hard coded in the assembly instructions. You should know why all value types must be fixed size now.\nSince we only care about current frame, which is at the top of the stack, we don\u0026rsquo;t need to have store the size of every frame, the base of the whole stack, or the end of the stack. We only need to store the stack pointer, which is the top of the stack, or the base of the current frame.\nThen I\u0026rsquo;ll talk about why do we never clean the stack.\nWhen we pop a frame, the depth of stack just got smaller, and there will be no chance of reading uninitialized data or overwriting the data.\nWhen we push a frame, we always write the data before we can access it. Remember that the Compiler always say Uninitialized variable when you try to access a variable before you write it. The compiler gurantee that you will never read uninitialized data at the compile time, so we don\u0026rsquo;t have to clear the memory, which makes function call faster.\nData inconsistency issue in Multi-threaded scenarios Watch a demo\nor Download and run yourself\nhttps://github.com/Loongson-neuq/blog/tree/main/content/post/move-semantic/MuitlThreadDemo\nNote: You need to have a .NET 8 runtime installed to run the demo. Install it from dot.net\nLock Read-write Lock Rust WARN: the follow content were generated by ChatGPT\nUnderstanding Rust\u0026rsquo;s Ownership and Borrowing Rules through the Lens of Read-Write Locks and Stack Memory Management Rust’s Single Owner Rule and Single Mutable Reference Rule can be better understood when examined through the principles behind read-write locks and stack-based memory management.\nRust’s Ownership and Borrowing Rules as a Read-Write Lock Analogy In multi-threaded environments, a read-write lock is a synchronization mechanism allowing multiple readers to access a resource simultaneously or granting exclusive access to a single writer. Rust’s ownership and borrowing rules mirror this access control strategy, enforcing exclusive or shared access to data at compile time:\nSingle Owner Rule: Rust’s concept of a single owner aligns with the idea of an exclusive lock on a resource. Only one variable or function can own a piece of data at any point, ensuring exclusive access and avoiding any conflicts in memory access.\nSingle Mutable Reference Rule: This rule is conceptually similar to read-write locks and provides two access states:\nShared, Immutable Access: Multiple immutable references (using \u0026amp;T) to a resource are allowed, resembling the behavior of a read lock. Exclusive, Mutable Access: Only one mutable reference (using \u0026amp;mut T) can exist at any time, akin to a write lock, preventing simultaneous modifications by others and ensuring safe mutation. By enforcing these rules, Rust’s compiler performs a static analysis to eliminate race conditions and memory conflicts at compile time, achieving thread safety without the runtime overhead of locks.\nSafe Memory Management with Stack Allocation Rust’s ownership rules apply to both stack and heap memory management, maintaining safety and efficiency across both types of allocations:\nStack Memory Management: In Rust, variables allocated on the stack are assigned a clear, finite lifecycle determined at compile time, corresponding to the stack’s Last-In-First-Out (LIFO) principle. The ownership system prevents issues like double frees, as the ownership rules guarantee that only the active owner has control over memory deallocation.\nHeap Memory Management: When data is allocated on the heap, Rust’s ownership rules still apply, managing the memory lifecycle through single ownership. Heap memory is controlled by the owning variable, and once the variable goes out of scope, the data is automatically deallocated, freeing developers from the need for manual memory management.\nBorrowing rules further ensure that data on the heap avoids race conditions. By allowing multiple immutable references (akin to a read lock) but only one mutable reference (like a write lock), Rust’s system dynamically enforces safety similar to a runtime read-write lock.\nCase Study: Ownership and Borrowing in Action with Concurrency To illustrate Rust’s ownership and borrowing in action, let’s consider a simple multithreaded example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 use std::thread; fn main() { let mut data = vec![1, 2, 3]; // Transfer ownership of `data` to the spawned thread. let handle = thread::spawn(move || { data.push(4); // Mutating `data`, ownership is now exclusively with the new thread. }); handle.join().unwrap(); // Any attempt to access `data` in the main thread would result in a compilation error, // as ownership has been transferred. } In this example, ownership of data is transferred to the new thread using move, meaning the main thread no longer has access to it. This model functions similarly to an exclusive lock but relies on ownership transfer rather than explicit locks. Rust’s ownership system enforces access control here without locks, allowing memory allocation to remain efficient while eliminating data races at compile time.\nRust’s Advantage: Compile-Time Lock-Like Guarantees Compared to traditional lock-based synchronization, Rust’s ownership and borrowing rules rely on compile-time checks to ensure memory safety, removing the need for runtime locks. The Rust compiler statically analyzes a variable’s lifecycle and reference status, ensuring memory access safety without runtime overhead, which both boosts memory efficiency and minimizes errors.\nConclusion Rust’s ownership and borrowing model integrates the benefits of read-write locks with stack-based memory management principles. By statically enforcing exclusive or shared access, Rust guarantees thread safety and efficient memory management without the performance costs of locks. This unique approach ensures that concurrent programming in Rust is both efficient and safe by design.\n","date":"2024-10-25T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/advanced-rust/","title":"Advanced Rust"},{"content":"用 GitHub 网页端编辑文件 不要在 GitHub 网页端编辑文件！！！否则你会收到下面的警告:\n以及一封邮件：\n我们在将来可能会强制删除你的提交如果你继续在网页端编辑文件。\n10.25 更新：目前已经实装，使用网页进行操作的任何文件会被强制破坏:\nls -d ../*/ 题目要求“列出父文件夹的文件夹项”。可能是翻译问题，Directory entry被我直接翻译成文件夹项可能导致大家（当然还有大家的好帮手 chatGPT）产生了误解，应当翻译为目录项更为准确。\nDirectory entry　是指一个文件夹内包含的如文件夹，文件，链接等项，因此只需要ls ..就可以列出父文件夹的目录项。\n补充信息 ls 通过getdents系统调用获取目录项。getdents就是 get directory entries 的缩写。\ngetdents syscall\n环境变量？ 误区 - Where is Environment Variables? 我看到有同学说在 “.bashrc 里修改环境变量”，这种说法是不准确的。\n环境变量是操作系统的一部分，不是某个文件里的内容。.bashrc 是一个 shell 脚本，用于配置 shell 的行为，它会在　Shell 启动时执行。因此你事实上是在 .bashrc 里添加了修改环境变量的命令。\n那到底环境变量是储存在哪儿的呢？ 环境变量是一个与进程绑定的概念。在进程被创建时，操作系统会将环境变量传递给进程。\n操作系统传递环境 在 fork，exec 等系统调用中，操作系统会在进程的地址空间中创建一个环境变量表，然后将父进程的环境变量表复制到子进程的环境变量表中。并在子进程的sp指针后面的某一个位置存放一个指向环境变量表的指针。\n进程接收环境变量 子进程刚开始运行时（在你们熟知的main函数前），会通过 sp 指针构造参数 int argc, char *argv[], char *envp[]。envp 就是指向环境变量表的指针。这三个参数也是 C 语言的标准 main 函数签名的参数。\n某些跨平台语言会对环境变量的接收方式进行封装，因为不同的操作系统可能有不同的实现。不过你仍然可以通过标准库的函数获取环境变量，例如　C# 的 System.Environment.GetEnvironmentVariable() 和 Python 的 os.environ。\nroot 用户的命令提示符 普通用户的 shell 提示符通常是 $ 或 \u0026gt;，而 root 用户的 shell 提示符通常是 #。\n连续创建嵌套文件夹 记得添加 -p 选项。如\n1 mkdir -p top/middle/bottom 重命名 test 文件夹为 test1？ 可能错误的做法：\n1 mv test/ test1/ 正确的做法：\n1 mv test test1 问题？\n1 2 3 4 5 6 7 8 9 10 11 12 13 caiyi@LAPTOP-I80ETG8J /tmp \u0026gt; cd $(mktemp -d) caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; mkdir test caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; mv test/ test1/ caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; ls test1/ caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; # test 被重命名 caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; mkdir test caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; mv test/ test1/ caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; ls test1/ caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; ls test1/ test/ caiyi@LAPTOP-I80ETG8J /t/tmp.mABXKSHACy\u0026gt; # test 被移动 Fork 仓库再提交？ 课上说\n工作目录问题 课上说\n最后 提醒大家不要过度相信 AI，AI 可能会给出错误的答案。即使 AI 给出了正确答案，你也要自己去理解才能更好地掌握知识。\n有的同学的答案太离谱了，完全就是 AI 生成的答案。题目明明是一张图片，但是直接把 markdown 原文复制给 AI，AI 又看不到图片，就只能回答“这是一张图片”。\n但是并不是反对大家使用 AI，只是要保存怀疑和求证的态度，以及自己的思考能力和学习能力。\n","date":"2024-10-22T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/os-week1-%E4%BD%9C%E4%B8%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","title":"[OS Week1] 作业常见问题"},{"content":"Git Installations Windows Download installer from Git For Windows\nor use winget\n1 winget install Git.Git Linux Install with your package manager\nMacOS Install with Homebrew\nConfiguration Global Configuration Detailed instructions: manual.caiyi1.me\n1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;Your Email\u0026#34; Authentication For code hosting services like GitHub, GitLab, Gitee, etc, you have to proof the user pushing(or pull) the code HAS the permission to do so.\nTraditional way is to use SSH key, which is a pair of keys, one is public, one is private. Public key is stored on the server, and private key is stored on your local machine.\n国内平台如 Gitee 只能使用 SSH key 进行认证, 不能使用 credential helper。\nStill widely used, but is outdated. As Git allows custom credential helper, you can use a more secure way(and easier) to authenticate.\nWindows Uses git credential-manager, which is a part of Git for Windows.\nAuth Github 1 git credential-manager github login Follow the GUI instructions to login.\nLinux Auth Github uses GitHub CLI, which is provided by the distro\u0026rsquo;s package manager.\n1 2 # Debian/Ubuntu sudo apt install gh Login with\n1 gh auth login Setup git info\n1 gh auth setup-git Follow the instructions to login.\nBasic Usage Detailed instructions: manual.caiyi1.me\nInit Clone Commit Push Pull Fetch Linux Basics Linux 不只是一个工具，也可以是像 Windows 一样用于日常工作的操作系统。\nKDE 桌面环境提供与 Windows 类似的体验，几乎没有任何学习成本。\nInstallations Choose a way to install Linux Physical Machine\nFull performance Graphics interface Take up a lot of space May not be easy to install if you are not experienced Recommend for those who want immersive experience WSL2\nEasy to install Extremely low performance cost Disk-friendly Battery-friendly Only Command Line Interface, but you still uses Windows\u0026rsquo; GUI Good integration with Host OS(Windows) Can run Linux GUI applications with X server (although not recommended for performance) Virtual Machine - Really not recommended\nReally low performance Memory unfriendly Battery unfriendly Graphics interface Installation Guide\nWhy Linux Excellent Command Line Interface\nShell 各种命令行工具 丰富的管道命令 丰富的脚本语言，易于自动化 Software Package Management\n无需手动下载安装 依赖自动解决 减少重复软件下载 便于卸载，没有毒瘤软件 Developer-friendly\nEditor Vim/Nvim VSCode \u0026hellip; Compiler GCC Clang \u0026hellip; Cross-platform development\nCMake/Make LLVM，GCC OS 内核需要 cross-compile Highly customizable\nShell Window Manager Desktop Environment \u0026hellip; Open Source\n无需担心软件的安全性 无需担心软件的可用性 无需担心软件的可维护性 无需担心软件的隐私问题 (大多数情况，取决于你的使用方式) Shortcomings Sucks when you need to use Windows-only software Suck graphics driver support (Not for all hardware) Suck graphics backend support X.org Old, and has not been updated for a long time May have some security issues May not support some new features But still widely used Good support for software Wayland Lacks many features Bad support for some software Really HIGH rendering latency You can feel it! Not suitable for latency-sensitive games, like rhythm games Nvidia support sucks Games may run with lower performance Higher power consumption than X.org Modern, updated frequently Trending But I still recommend you to use Wayland as long as you don\u0026rsquo;t have any problems with it.\nUnboxing 以下内容以相对稳定且简单 Ubuntu 22 作为演示。\nPackage Manager Whats Package Manager 包管理器用于管理 GNU/Linux 发行版的包（应用），不同于 Windows 的手动下载并安装，在 Linux 下安装 Git 只用输入一条命令。\n可以通过类比的方式理解包管理器和包：\n左右两项不等价\nWindows Linux 应用商店 包管理器 App 包 大多数 Linux 发行版都有自己的包管理器：\nDebian RPM Pacman apt, dpkg yum, rpm pacman Ubuntu 的包管理器是 apt 和 dpkg，其中 apt 用于安装云端软件源的包，dpkg 则用于安装本地包。\n1 2 apt --version # output: apt 2.4.12 (amd64) Usage 如果遇到了网络问题，请跳转下方 Mirror。\n更新软件包列表 在安装包之前，一般会同步云端软件包信息，保证依赖关系的正确。\n1 sudo apt update 更新所有软件包 1 sudo apt upgrade 安装软件源的包 将 \u0026lt;name\u0026gt; 换成要安装的包名，多个则以空格分隔。\n1 sudo apt install \u0026lt;name\u0026gt; 安装本地 deb 包 安装中可能会提示依赖缺失，应使用 apt 安装缺失的依赖。\n1 sudo dpkg -i /path/to/xxx.deb 卸载包 将 \u0026lt;name\u0026gt; 换成要卸载的包名，多个则以空格分隔。\n1 sudo apt remove \u0026lt;name\u0026gt; 查找包 1 apt search xxx Mirror 在使用 apt 时提示网络错误时，可以通过换源解决。\n修改系统重要文件前记得备份：\n1 2 sudo cp /etc/apt/sources.list /etc/apt/sources.list.back sudo vim /etc/apt/sources.list 在 Ubuntu 24.04 之前，Ubuntu 的软件源配置文件使用传统的 One-Line-Style，路径为 /etc/apt/sources.list；从 Ubuntu 24.04 开始，Ubuntu 的软件源配置文件变更为 DEB822 格式，路径为 /etc/apt/sources.list.d/ubuntu.sources。 参考 https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\n在文件的顶部加入以下行：\n1 2 3 4 5 6 7 # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse 最后更新软件包列表\n1 sudo apt update Install Common Software Pakage for OS Development Git 1 2 sudo apt update sudo apt install git VSCode 以下内容来自 manual\n实体机用户请在 Linux 下安装 VSCode：\n手动安装：\n从 VSCode 官网 下载 deb 包。\n使用 dpkg 安装。\n1 sudo dpkg -i code_xxx.deb 包管理器安装：\n添加源。 1 2 3 4 5 sudo apt-get install wget gpg wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor \u0026gt; packages.microsoft.gpg sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg echo \u0026#34;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\u0026#34; |sudo tee /etc/apt/sources.list.d/vscode.list \u0026gt; /dev/null rm -f packages.microsoft.gpg 安装。 1 2 3 sudo apt install apt-transport-https sudo apt update sudo apt install code # or code-insiders Rust 以下内容源自 rCore-Tutorial-Guide-2024S 文档\n如果遇到网络问题 配置环境变量：\n可以在当前终端执行（当前终端有效），或者写入 ~/.bashrc（永久，打开新的终端后）。\n1 2 export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 编辑 ~/.cargo/config：\n添加以下行：\n1 2 3 4 5 [source.crates-io] replace-with = \u0026#39;ustc\u0026#39; [source.ustc] registry = \u0026#34;sparse+https://mirrors.ustc.edu.cn/crates.io-index/\u0026#34; 安装 rustup 1 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh QEMU 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 安装依赖 sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \\ gawk build-essential bison flex texinfo gperf libtool patchutils bc \\ zlib1g-dev libexpat-dev pkg-config libglib2.0-dev libpixman-1-dev git tmux python3 # 下载 QEMU 源码 wget https://download.qemu.org/qemu-7.0.0.tar.xz # 解压 tar xvJf qemu-7.0.0.tar.xz # 进入子目录 cd qemu-7.0.0 # 编译安装并配置 RISC-V 支持 ./configure --target-list=riscv64-softmmu,riscv64-linux-user make -j$(nproc) Awesome Tools 为了提高开发效率，推荐部分小工具。\nCLI tools ranger: 文件管理器\nbat: 文件查看器，更好的 less\ntmux: 终端复用器\nlazygit: git TUI 管理工具\neza: 有色彩和图标的 ls\nCommand Line Foreword Shell 是一个解释器，它接受用户输入的命令，然后调用相应的应用程序或内建命令函数。\nWindows\nPowerShell - fairly good, but lack customization. Slow, for still using .NET Framework(capability reasons, but can be replaced by .NET) Update to PowerShell 7, which is cross-platform https://aka.ms/PSWindows CMD Unix-like (inclue Linux, MacOS, FreeBSD\u0026hellip;)\nBash - default, but MUCH better than Windows' Zsh - most popular, maybe hard to configure Fish - easy to use, but not recommended for scripting \u0026hellip; like sh, dash 对于 Unix, 各种 Shell 的语法大致相同，内建命令大多数与 Bash 相同。甚至 Windows 的 PowerShell 也开始为某些 Bash 的内建命令通过 alias 提供支持。\nFish 是一个很好的 Shell，但是不适合用于编写脚本，因为它的语法和其他 Shell 不同。因此建议大家使用 Bash 或者 Zsh。如果你想配置一个好看并且功能强大的 Shell，可以尝试使用 Zsh。\nDetailed instructions: manual.caiyi1.me\nShell script Shell 脚本是一种文本文件，其中包含了一系列的命令（和我们在 shell 前端中输入的一样）。Shell 会按照脚本中的命令顺序执行。\n下面尝试把你输入过的命令写入一个脚本文件，然后执行这个脚本文件。\n1 2 3 pwd echo \u0026#34;----------------\u0026#34; ls 执行时，如果使用./script.sh执行，需要给予执行权限，使用chmod +x script.sh。如果调用 shell 执行，例如bash script.sh，则不需要给予执行权限。\n执行 shell 脚本时，会新开一个 shell 进程执行脚本，因此脚本中的变量不会影响到当前 shell。\n脚本的工作目录与执行脚本的 shell 的工作目录相同。不是脚本文件的目录。\nAdditional: Linux Installation Guide WSL2 Boot up your Windows, enter Microsoft Store, search for \u0026ldquo;WSL\u0026rdquo;, select an distro and install it.\nUbuntu is recommended for beginners as it has official support.\nAfter installation, you can open it from Start Menu or Windows Terminal.\nThe first time you uses it, you have to set up a username and password, not asking for your windows\u0026rsquo;s password.\nPhysical Machine Partition your disk in Windows. You have to create at least two partitions, one for Boot volume, one for Root(Where the system files are stored).\nThe Boot volume should be at least 1GB, and the Root volume should be at least 50GB.\nDownload a distro\u0026rsquo;s ISO file from its official website, and flash it to a USB drive to make a bootable drive.\nReboot your computer to BIOS/UEFI, and boot from the USB drive.\nChoose manual partitioning if you don\u0026rsquo;t want to lose your data and Windows.\nAssign the Boot volume to /boot, and the Root volume to /.\nChoose the boot volume to be formatted as FAT32, and the root volume to be formatted as ext4 or Btrfs.\nAfter installation, you can shutdown your computer and unplug the USB drive.\n##MUST READ## You may lose the ability to boot into Windows, as the bootloader is replaced by the Linux bootloader.\nYou can either select the system to boot in the BIOS/UEFI, or use a bootloader like GRUB/rEFInd.\nNote that GRUB can NOT detect bootable devices at runtime while rEFInd can.\nVirtual Machine Download a distro\u0026rsquo;s ISO file from its official website, and create a new VM in your VM software. Assign at least 50GB of disk space and 4GB of RAM.\nMount the ISO file to the VM, and boot from it.\nInstall the system following the instructions along the way.\nYou can choose \u0026ldquo;Clean Install\u0026rdquo; since we don\u0026rsquo;t have any data to lose.\nAfter installation, you can shutdown the VM and unmount the ISO file. Then you can boot into the system.\n","date":"2024-10-19T00:00:00Z","image":"https://loongson-neuq.pages.dev/p/os-week1-git-and-linux-basics/background_hub7bd9424949445f7cb4edac68fee9448_2942088_120x120_fill_box_smart1_3.png","permalink":"https://loongson-neuq.pages.dev/p/os-week1-git-and-linux-basics/","title":"[OS Week1] Git and Linux Basics"},{"content":"基础知识 1 模块(Module)\n​Verilog中的module可以看成一个具有输入输出端口的黑盒子，该黑盒子有输入和输出接口(信号)，通过把输入在盒子中执行某些操作来实现某项功能。(类似于C语言中的函数)\n1.1 模块描述\n顶层模块(top_module)结构用Verilog语言可描述为：\n1 2 3 4 5 6 7 8 9 module top_module( input a, input b, output out ); ...... endmodule 模块以module 开始，endmodule结束 top_module 为模块名 input : 为输入端口 output: 为输出端口 所有代码必须处于module模块中！ 同理，次级模块(mod_a)结构用Verilog语言可描述为：\n1 2 3 4 5 6 7 8 9 module mod_a( input in1, input in2, output out ); ...... endmodule 注意事项：每个模应单独块处于一个.v文件中，模块名即为文件名(规范代码！)\n1.2 模块输入输出信号\n输出：output 输入：input 模块的输入输出端口都可看出模块的信号，若不写信号类型则默认为wire类型信号！\n1 2 3 4 // 以下两个语句本质是一致的 input a; input wire a; 除了wire型信号，还有reg型信号，具体详见1.4节！\n1.3 模块实例化\n如图1所示，top_module的两个输入端口连接到次级模块(mod_a)的输入端口，那如何在top_module模块模块中使用mod_a模块的功能呢？这就需要通过模块实例化，可以把top_module看成C语言中的主函数，次级模块mod_a看成普通函数，这样就可以在主函数中调用其他函数来完成相应的功能！\n在top_module中实例化mod_a的方式为：\n模块实例化语法：模块名 实例名(定义连接port的信号);\n1 2 3 4 5 6 7 8 module top_module( input a, input b, output out ); mod_a instance1 (a, b, out); // 按mod_a定义的端口顺序实例化 mod_a instance2 (.in1(a), .in2(b), .out(out)); // 按mod_a端口名实例化(推荐此种写法) 2 逻辑块(always、generate)\n2.1 always逻辑块\nalways块可构建 组合逻辑块 和 时序逻辑块，复杂的逻辑操作都需要处于该逻辑块中，如if、case、for等\n(1) 组合逻辑块\n1 2 3 4 5 6 7 module top_module(); always @(*) begin ...... end endmodule always逻辑块中任意信号变化时立即触发，执行begin - end之间的语句 begin - end用于将多条语句组成一个代码块，只有一条语句时可省略 (2) 时序逻辑电路\n1 2 3 4 5 6 7 module top_module(); always @(posedge clk) begin ...... end endmodule clk 信号的上升沿触发 posedge: 上升沿 negedge: 下降沿 2.2 generate逻辑块\ngenerate主要结合for循环使用，主要用途有：\n对向量中的多个位进行重复操作 对同一个模块进行多次重复实例化(主要用途) (1) 操作向量\n1 2 3 4 5 6 7 8 module top_module(input [7:0] in, output [7:0] out); genvar i; // genvar i;也可以定义在generate内部 generate for(i = 0; i \u0026lt; 8; i = i + 1) begin // verilog中for循环不支持i++ assign out[i] = ^in[7:i]; // ^:异或运算符 end endgenerate endmodule (2) 模块重复多次实例化\n1 2 3 4 5 6 7 8 9 10 11 12 module top_module( input a, input b, output out ); genvar i; generate for(i = 0; i \u0026lt; 8; i = i + 1) begin : gen_mod_a // gen_mod_a为每个begin_end结构的名称 mod_a instance2 (.in1(a), .in2(b), .out(out)); end endgenerate endmodule 注意：模块多次实例化时必须写每个begin_end结构的名称(gen_mod_a) 仿真器会通过gen_mod_a来标识生成结构: gen_mod_a[0],gen_mod_a[1]\u0026hellip;. 2.3 initial块 initial块可以理解为一个初始化块，在initial的起始位置的语句在0时刻即开始执行，之后如果遇到延时，则延时之后执行接下来的语句。\n初始块是不可综合的，因此不能将其转化为带有数字元素的硬件原理图。因此初始块除了在仿真中使用外，并没有太大的作用。\n如:在仿真文件中初始化各种参数：\n1 2 3 4 5 6 7 initial begin sys_clk = 1\u0026#39;b1; sys_rst_n = 1\u0026#39;b0; #50 // #n 代表延时n个时间单位 sys_rst_n = 1\u0026#39;b1; end 注意：\ninitial 块在电路中不可综合，故一般不出现在RTL代码中 initial 一般只在仿真文件中使用 若需要在RTL代码中初始化参数，需要用always块，用initial块会导致错误！\n如下所示，在RTL代码中初始化存储器的方式为：\n1 2 3 4 5 6 7 8 9 10 reg [255:0] char_data[4:0]; always @ (posedge clk) begin char_data[0] \u0026lt;= 256\u0026#39;h0000000000000000000000000000000000000000000000000000000000000000; char_data[1] \u0026lt;= 256\u0026#39;h0000000000000000000000000000000000000000000000000000000000000000; char_data[2] \u0026lt;= 256\u0026#39;h0000000000000000000000000000000000000000000000000000000000000000; char_data[3] \u0026lt;= 256\u0026#39;h0000000000000000000000000000000000000000000000000000000000000000; char_data[4] \u0026lt;= 256\u0026#39;h0000000000000000000000000000000000000000000000000000000000000000; end 3 赋值方式\nVerilog 中赋值方式有三种：连续赋值、阻塞赋值、非阻塞赋值\n3.1 连续赋值(assign)\n1 assign x = y; 该语句表示把x和y两个信号进行连接，真实的物理连接！ 不能在always块中使用 3.2 阻塞赋值(=)\n1 2 3 4 5 6 // 组合块 always @(*) begin out1 = a; a = b; out2 = b; end 组合always块中用阻塞式赋值 执行顺序：按照begin_end语句块中的顺序依次执行，上述输出结果为：out1 = a ，out2 = b 3.3 非阻塞赋值(\u0026lt;=)\n1 2 3 4 5 6 // 时序块 always @(posedge clk) begin out1 \u0026lt;= a; a \u0026lt;= b; out2 \u0026lt;= b; end 时序always块中用非阻塞赋值 执行顺序：begin_end中所有语句并行执行，上述输出结果为：out1 = a ，out2 = a 基础语法 1.1 标识符\n(1) 用途：标识符用于定义常数、变量、信号、端口、参数名、模块名等。 (2) 组成：字母、数字、$、下划线任意组合而成 (3) 注意事项： - 区分大小写(Verilog 和 verilog是不同的) - 第一个字符只能是字母或下划线(123demo 是非法标识符)\n1.2 逻辑值与逻辑运算 1.2.1 逻辑值\nVerilog中有4中逻辑值：0、1、x、z\n0: 低电平 1: 高电平 x: 表示状态未知 z: 表示高阻状态 注意：这里的z、x是不区分大小写的(X、Z也可)\n1.2.2 逻辑运算\n(1) 逻辑运算符：\u0026amp;\u0026amp;(与)、==（相等）、||（或）、!=（不等）\n如 m\u0026amp;\u0026amp;n : 判断m和n是否全为真(非0即为真)，真则输出1\u0026rsquo;b1，否则输出1\u0026rsquo;b0 (4’b1010\u0026amp;4’b0101 = 1’b1) 最后输出结果只有1bit (2) 按位运算符：\u0026amp;、|、~、^、~\u0026amp;、~^、~| 如 m\u0026amp;n : 是把m的每一位与n的每一位按位做与运算 (4’b1010\u0026amp;4’b0101 = 4’b0000) 输出结果与m/n的bit数相同 (3) 归约运算符： \u0026amp;、|、~、^、\u0026amp;、~^、~| 只有一个参量参与运算时( \u0026amp;为一元运算符),表示规约与，即向量内部进行与运算 1 2 3 \u0026amp;a [3:0] // 表示a[3]\u0026amp;a[2]\u0026amp;a[1]\u0026amp;a[0] 相当于(a[3:0]==4\u0026#39;b1111) |b [3:0] // 表示b[3]|b[2]|b[1]|b[0] 相当于(b[3:0]!=4\u0026#39;b0000) ^c [3:0] // 表示c[3]^c[2]^c[1]^c[0] 即(\u0026amp;4’b0101 = 0\u0026amp;1\u0026amp;0\u0026amp;1 = 1\u0026rsquo;b0 ) 最后输出结果只有1bit 1.3 常量的表示方法\n与C语言类似，常量主要有：整数型、实数型和字符串型三种\n1.3.1 用十进制整数表示整型常量\n(1) 正数：直接写 10 表示位宽为32bit的十进制整数(系统默认) (2) 负数：-10需要用二进制补码表示，多了一位符号位(1 1010) (3) 用科学计数法表示：12.345e3 表示 12345\n1.3.2 用基数法表示整数型常量\n[换算成二进制数后的位宽]\u0026rsquo;[数制符号][与数制对应的值]\n(1) 二进制(b): 8\u0026rsquo;b1000_1100 (2) 十六进制(h): 8\u0026rsquo;h8c (3) 八进制(o): 8\u0026rsquo;o214 (4) 十进制(d): 8\u0026rsquo;d140\n注意事项：\n当表示二进制时，最好每4位写一个下划线以增强可读性：如8\u0026rsquo;b1000_1100 与8\u0026rsquo;b10001100 是一样的 基数表示法中遇到x时：十六进制表示4个x，八进制中表示3个x 当位宽大于二进制位数时左边自动补0，小于二进制数时2从左边截断！ 1.3.3 字符串(用双引号)\n(1) 每个字符由1个8位的ASCII码值表示，即需要1byte存储空间 (2) 如：“Hello world”字符串由11个ASCII符号构成，需要11byte存储空间\n1.4 注释方式\nVerilog中注释主要有行注释(//)和块注释(/* \u0026hellip;. */)两种，表示方法与C语言一致！\n1 2 3 4 5 6 // 行注释 /* 块注释 */ 1.5 变量(wire、reg)\nVerilog中的变量主要有两种：wire和reg\n1.5.1 wire\n(1) 线网型(wire): 表示电路间的物理连接，wire定义的变量也可看成信号端口 (2) 当两个wire信号被连续赋值时，在逻辑块中会被映射成真实的物理连线，此时这两个信号端口的变化是同步的！\n1.5.2 reg\n(1) 寄存器型(reg): 表示一个抽象的数据存储单元 (2) reg 具有对某一时间点状态进行保持的功能\n1.5.3 用法与注意事项\n(1) 在always、initial语句中被赋值的变量(赋值号左边的变量)都是reg型变量 (2) 在assign语句中被赋值的变量，为wire型变量\n1.6 向量(vector)与 参数(常量)\n1.6.1 parameter 参数(常量)\n(1) 参数是一种常量，通常出现在module内部，常被用于定义状态、数据位宽等\n1 parameter STATE = 1\u0026#39;b0; (2) 只作用于声明的那个文件，且可以被灵活改变！ (3) 局部参数localparam，只在本模块中使用\n1 localparam WIDTH = 8; (4) 参数的名称一般为大写，以区分其他变量 1.6.2 向量(vector)\nvector(向量)，是一组信号的集合,可视为位宽超过1bit 的 wire 信号。\n(1) 定义方式：\n1 2 3 4 5 6 7 // 输入输出型 input [7:0] a,b, output reg [7:0] out // 模块中间向量 wire [7:0] c,d; reg [7:0] d; (2) 向量的位宽定义：\n[upper:lower] 定义位宽，如 [7:0] 表示位宽为8 bit ，即upper=7，lower=0 vector_name可以一次写多个向量 1.6.3 向量片选\na[3:0] 取向量a的0~4位数据 b[n] 取向量b的第n位数据 c[-1:-2] 取向量c的最低2位数据 c[0:3] 取向量c的最高4位数据 多路选择器应用：实现一个 256 选 1 选择器，sel 信号作为选择信号，当 sel = 0 时选择 in[3:0]，sel = 1 时选择 in[7:4],以此类推。\n1 2 3 4 5 6 7 8 9 10 11 module top_module ( input [255:0] in, input [7:0] sel, output [3:0] out ); assign out = {in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]}; // assign out = {in[sel*4 +: 4]}; // assign out = {in[sel*4+3 -: 4]}; endmodule 片选信号sel输入为n位二进制数，当参与运算、充当索引时会自动转换成十进制数 该题所选取的信号片段为: in[sel*4+3: sel*4] ,但这不符合Verilog的片选语法规则故应写成： in[sel*4 +: 4] 表示索引从sel*4开始的高4bit信号\nin[sel*4+3 -: 4] 表示索引从sel*4+3开始的低4bit信号\n或是直接选出需要的每一位，再用{ }拼接成新向量： {in[sel*4+3], in[sel*4+2], in[sel*4+1], in[sel*4+0]}\n1.7 三元表达式\n(1) 与C语言相同，Verilog也有三元表达式：\n1 condition ? if_true : if_false 当条件为真，表达式值为if_true ，否则表达式值为if_false。\n(2) 应用\n1 2 3 4 5 6 (sel ? b : a) // 一个二选一MUX，通过sel的值选择a或b always @(posedge clk) // 一个T触发器 q \u0026lt;= toggle ? ~q : q; assign out = ena ? q : 1\u0026#39;bz; // 三态缓冲器 1.8 分支语句(if-else、case)\n1.8.1 if-else语句\n(1) 最常用的形式：(优势：输出的所有可能都写到，不存在未知电平输出！)\n1 2 3 4 5 6 7 8 9 if (condition1) begin ...... end else if (condition2) begin ...... end else begin ...... end (2) 不建议使用if-else嵌套，会存在优先级问题，导致逻辑混乱， (3) 所有if-else语句都应写成(1)的形式！ (4) 根据条件表达式依次比较，*存在优先级！ *\n1.8.2 case 语句\n(1) 书写形式：\n1 2 3 4 5 6 7 8 9 10 11 12 case (\u0026lt;控制表达式\u0026gt;) \u0026lt;分支语句1\u0026gt;: begin ...... end \u0026lt;分支语句2\u0026gt;: begin ...... end ...... default: begin ...... end endcase 比较\u0026lt;控制表达式\u0026gt;与\u0026lt;分支语句n\u0026gt;的取值相等则执行对应语句，否则执行default后语句！\n(2) 执行完某一分支语句后立即跳出case语句结构，终止case语句执行。 (3) \u0026lt;分支语句n\u0026gt;的取值必须互不相同！ (4) 以encase结束case语句块 (5) 各分支语句间不存在优先级！ (6) 具体应用: 用case语句搭建多路选择器，（以9选1多路选择器为例）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 module top_module ( input [15:0] a,b,c,d,e,f,g,h,i, input [3:0] sel, output [15:0] out ); always @(*) begin case(sel) 4\u0026#39;b0000: out = a; 4\u0026#39;b0001: out = b; 4\u0026#39;b0010: out = c; 4\u0026#39;b0011: out = d; 4\u0026#39;b0100: out = e; 4\u0026#39;b0101: out = f; 4\u0026#39;b0110: out = g; 4\u0026#39;b0111: out = h; default: out = 16\u0026#39;hffff; endcase end endmodule 1.9 for循环语句\n(1) 书写形式：\n1 2 3 4 5 6 integer i; always @(*) begin for(i = 0; i \u0026lt; 8; i = i + 1) begin : for_name ...... end end 执行\u0026lt;循环语句\u0026gt;n次 for_name为每一次循环的名称 2 关系运算符(\u0026gt;、\u0026lt;、\u0026gt;=、\u0026lt;=)\n运算结果为真返回 1 运算结果为假返回 0 若某个操作数值不定(x)，则返回值为 x 2.1 拼接运算符({ , })\n2.1.1 拼接\n用一对花括号加逗号组成“{ , }”拼接运算符，逗号隔开的数据按顺序拼接成新数据！\n2.1.2 通过拼接实现移位\n在左边拼接实现右移，右边拼接实现左移！\n1 2 {a[3:0], 4\u0026#39;b0000} // a[3:0]左移4位 {4\u0026#39;b0000, a[3:0]} // a[3:0]右移4位 2.1.3 连接符中重复多次的操作\n语法： {重复次数{vector}}\n1 2 {4{a[3:0]}} // 重复4次a[3:0] {3\u0026#39;d5, 4{a[3:0]}} // 3\u0026#39;d5与a[3:0]重复4次拼接 2.2 移位运算符\n移位运算符用于将左边操作数左移或右移指定的位数！移位后空闲位用0填充。\n左移运算符：\u0026laquo; 如：4‘b1101 \u0026laquo; 3 结果为：4‘b1000\n右移算法符: \u0026raquo; 如：4‘b1101 \u0026raquo; 3 结果为：4‘b0001\n移位运算符其他用途：左移一位可以看成是乘以 2，右移一位可以看成是除以 2。\n移位运算符代替乘除法可以节省资源！\n3 二进制全加器\na、b为输入 1bit 数据 cin为上一个加法器进位输入 cout为本加法器的进位输出 sum = a+b $$ \\begin{array}{c} sum=a \\wedge b \\wedge cin \\\\ cout=(a \\\u0026 b) | (a \\\u0026 cin) | (b \\\u0026 cin) \\end{array} $$ 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 module full_adder( input a, input b, input cin, output sum, output cout ); assign sum = a ^ b ^ cin; assign cout = (a \u0026amp; b) | (a \u0026amp; cin) | (b \u0026amp; cin); endmodule 4 16进制全加器\n16进制全加器如上图所示，它可由上节中16个二进制全加器组合而成。\n用Verilog实现16进制全加器代码为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 module adder16( input [15:0] a, input [15:0] b, input cin, output [15:0] sum, output cout ); wire [16:0] c; assign c[0] = cin; genvar i; generate for(i = 0; i \u0026lt; 16; i = i + 1) begin : gen_full_adder full_adder instance1 (.a(a[i]), .b(b[i]), .cin(c[i]), .sum(sum[i]), .cout(c[i+1])); end assign cout = c[16]; endmodule 5 模块中的参数传递\n5.1 定义可传递参数的模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 module counter // 参数 #( parameter COUNT_MAX = 25\u0026#39;d24_999_999, parameter STATE = 1\u0026#39;b0 ) ( input wire sys_clk, output reg led_out ); ...... endmodule 5.2 带参数模块的实例化\n1 2 3 4 5 6 7 counter #( .COUNT_MAX(25\u0026#39;d24_999_999), // 参数赋值 .STATE(1\u0026#39;b0) ) counter_instance ( .sys_clk(sys_clk), .led_out(led_out) ); ","date":"2024-10-19T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/verilog-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","title":"Verilog 基础知识"},{"content":"下载安装包 百度搜索vivado，找到\u0026quot;下载 - Xilinx\u0026quot;，进入vivado下载页面\n选择2023.2版本，下载链接\n下载Windows环境下的在线安装器（Windows Self Extracting Web Installer）\n下载需要登陆AMD。如果已有AMD账户直接填写用户名和密码登陆，如果没有账户则点“Create account”免费创建一个新账户。 点击链接后会要求输入个人信息，随便填即可。 如果在线安装器下载不下来 在线安装 双击运行已下载的可执行文件FPGAs_AdaptiveSoCs_Unified_2023.2_1013_2256_Win64.exe。（使用管理员权限，允许网络访问）\n如果弹出更新窗口，点击“continue”。\n点击“Next”。\n登录下载时注册的AMD账号，点击“Next”。\n选择“vivado”，点击“Next”。\n选择免费的标准版，点击“Next”。\n在“Device”中必勾选“Artix-7”，因为开发板搭载的FPGA是Artix-7，其他器件可以根据需要进行选择，“Design Tools”和“Installation Options”按照默认即可。\n全部“I agree”，点击“Next”。\n选择Vivado安装目录，默认安装在“C:\\Xilinx”下，可以点击浏览或者直接更改路径，注意安装路径中不能出现中文和空格。点击“Next”。\n我由于安装过了，显示和大家不一样。\n查看summary，点击“install”。\n等待安装完成。\n问题 不同版本间的编译逻辑可能有所不同，可能会导致不可预知的差异，我们建议使用比赛指定的23.2版本 注意安装路径不要有中文和空格！包括后续项目文件路径中都不能出现中文和空格！！！ 如果你的用户名不幸的有中文的话，STFW改成英文的吧，不然会有更多奇奇怪怪的bug 如果在线安装器有网络问题的话，尝试关闭魔法多试几次，实在不行使用完整的安装包选择本地安装（官网103GB的版本）。 与代码编辑器的联动 VIVADO使用vscode实现实时纠错与自动补全等功能_vivado代码自动对齐_fujiayu1997zz的博客-CSDN博客 Sublime与Verilog【一】：从安装到使用，提高FPGA开发效率！ - 知乎 (zhihu.com) ","date":"2024-10-18T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/vivado-2023.2%E5%AE%89%E8%A3%85/","title":"vivado 2023.2安装"},{"content":" 缘起 进入本世纪，移动互联网、大数据、云计算、物联网、人工智能等新一代信息技术快速发展，促进形成了不同形态的新型计算系统。计算机人才的培养从“程序性开发能力”进化为更重要的“系统性设计能力”。要求计算系统开发人员必须了解不同系统平台的底层结构，具有系统观和系统思维，能够进行软硬件协同设计及其贯通，以强大的系统平台技术保证各项应用功能的实现，成为能力的关键特性，即计算机系统能力。计算机系统能力培养对于解决计算机领域卡脖子关键问题，培育我国高端芯片、关键基础软件的后备人才尤为紧迫和重要。\n为此，2019年5月，教育部高等学校计算机类专业教学指导委员会授予我校计算机系统能力培养试点高校。我校正式开始计算机系统能力培养试点建设。2019年6月，我校与龙芯建立深度合作关系并签署了框架合作协议，与龙芯中科有限公司合作，成立龙芯华北基地暨龙芯-东北大学（秦皇岛）联合实验室。旨在培养计算机系统能力，以及为我国培养在卡脖子的计算机核心关键技术领域人才。2019年8月，创立龙芯班，主要培养中央处理器（CPU）、操作系统（OS）、编译器（Compiler），以及嵌入式芯片与系统设计等等。\n计算机系统能力竞赛 全国大学生计算机系统能力大赛旨在以学科竞赛推动专业建设和计算机领域创新人才培养体系改革，培育我国高端芯片、关键基础软件的后备人才，始终坚持围绕CPU、编译系统、操作系统、数据库管理系统的设计和实现，在赛题和赛制上不断推陈出新。2024年启动智能系统创新设计赛（小米杯）、智能计算创新设计赛（先导杯），形成了从计算机系统核心软硬件到完整系统的比赛格局。\n作为“计算机类专业系统能力培养”教育生态的重要组成部分，大赛创办八年来，参赛学校、参赛人数不断增加，以赛促学、以赛促教的作用明显，学生的专业核心能力、工程能力、创新能力不断提升，2023年更是成功入选中国高等教育学会《2023全国普通高校大学生竞赛分析报告》竞赛目录，成为计算机领域重要的学科竞赛。\n2024年，多家新闻媒体对赛事报道。钱江晚报，澎湃新闻网等媒体以“继ACM后，计算机系统能力大赛受众多互联网大厂热捧，为啥？”为标题对赛事进行报道。诸多互联网大厂越来越重视CPU，操作系统、编译器等自主化，它们也将目光投到大学系统人才培养上来。它们通过冠名全国大学生系统能力大赛，比如CPU大赛由“龙芯”冠名，编译系统设计赛由华为“毕昇”冠名，智能系统创新设计赛由“小米”冠名，以提前参与到大学系统设计开发人才培养中来。操作系统功能赛由华为、麒麟、龙芯、蚂蚁、OPPO、vivo、小米、龙蜥社区、国科环宇、飞腾等企业专家命题，吸引350支队伍报名，涉及863名同学和159位指导教师。“华为、龙芯等把它们公司的实际科技问题，拿到了比赛当中，看看在校大学生们怎么解决行业前沿问题，真正体现了业界需求和高校人才培养的‘双向奔赴’。\n目标与规划 以培养学员融会贯通计算机系统的软硬件知识，设计出自己的CPU，并在上面运行自己的操作系统，还在上面运行自己的编译器和数据库等系统软件为目标的龙芯班。\n目前，主要面向龙芯班学员开设两门公选课程《CPU设计艺术》和《操作系统》。其中，《CPU设计艺术》课程将于秋季学期十一后开课，《操作系统》将于春季学期开课。\n选拔龙芯班的优秀学员参加全国计算机系统能力竞赛，力争取得优异成绩。\n选拔龙芯班的优秀学员作为助教团队，辅导新学员学习。\n鼓励优秀学员，参加科创课题团队，一生一芯计划和百芯计划等活动，进一步树立投身科技事业的理想和锻炼能力。\n指导教师 方淼，男，东北大学计算机科学与技术专业工学学士学位，大连理工大学计算机应用技术专业工学博士学位，现任计算机工程系副主任（负责本部门教学工作），学院科研团队“语言与智能系统实验室”负责人，学院“计算机系统能力培养实验班（龙芯实验室）”负责人。目前主要从事自然语言理解，机器学习和计算机系统等方向的科研和教学工作。\n王鑫，男，1978年10月生，河北丰南人，东北大学计算机应用技术工学硕士学位，现任教于计算机科学系计算机科学与技术专业，讲师，主要从事教学工作。负责操作系统教学。\n张旭，女，1988年4月出生，河北迁西人，内蒙古大学计算机专业工学硕士学位，现任教于学院实验教学中心，实验师。目前主要从事实验教学工作，指导学生参加2019年（第12届）中国大学生计算机设计大赛软件应用与开发类决赛（作品：基于网络通信的远程解锁工具）荣获全国二等奖。负责CPU设计教学。\n科创课题指导教师暂未列出。\n优秀学员 Photo Profile 孟祥东，2017级，毕业进入龙芯公司基础软件部工作 杨兆鑫，2017级，考入中科院计算所龙芯实验室研究生 陈虹胜，2019级，毕业进入龙芯公司从事研发工作 宋雨，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作 田宇，2018级，毕业考入中科大先进研究院，现加入龙芯实验室从事研究工作 付震宇，2019级，保送到中科大 USTC 解博元，2020级，因竞赛优异成绩被华为免试录取 取得成绩 2020年，我校首次入围CPU赛道全国总决赛，荣获团队赛三等奖一项和个人赛三等奖一项。\n2021年，我校再创佳绩，在CPU赛道全国总决赛，获得团队赛三等奖两项，个人赛二等奖一项。\n2022年，我校继续入围CPU赛道全国总决赛，团队赛三等奖一项，个人赛三等奖一项。\n2023年，我们在全国总决赛CPU赛道获得团队赛三等奖两项，在OS赛道，获得团队赛三等奖一项，优胜奖一项。\n2024年，我们在全国总决赛智能系统创新设计赛道获得团队赛一等奖，在CPU赛道获得团队赛二等奖两项，在OS赛道，获得团队赛三等奖一项。\n召唤 如果你有梦想，想设计自己的CPU，运行自己的OS，安装自己设计的编译器，请加入我们！ 如果你有梦想，想在大学期间做一款自己的CPU产品，流出一块自己的芯片，请加入我们！ 如果你有梦想，掌握计算机领域核心技术，到计算机系统能力大赛舞台展现实力，毕业到大厂工作，请加入我们！ 如果你有梦想，希望掌握计算机核心技术，为科技强国做出自己的贡献，请加入我们！ 加入我们，开启你的技术进阶之旅！与志同道合的伙伴一起，探索前沿技术，成就你的未来梦想！ 强烈呼唤各位的到来，独行者速，众行者远！ 报名要求：\n热爱计算机系统和CPU、OS、Compiler设计，有志为国家计算机事业发展做贡献； 积极主动、坚持不懈，有较强的团队责任心和自学能力； 大一、大二，以及大三学生（能专心做芯片设计毕设，工作非考研的同学）。 招生规模：暂定为不超过60人\n开班日期：十一假期后\n报名截止日期： 2024年10月9号 24:00\n加入招新群：231607730\n联系人：\n白聪（OS方向）： QQ：1561331574，邮箱：1561331574@qq.com\n杨欣蕊（CPU方向）：QQ：1010191094，邮箱：1010191094@qq.com\n地点：基础楼304\n","date":"2024-09-28T16:51:51+08:00","permalink":"https://loongson-neuq.pages.dev/p/loongson-lab/","title":"Loongson-Lab"},{"content":"假设你需要连续完成某个相同操作 2 次时，你可能这样写代码：\n1 2 Foo(); Foo(); 通常情况下你都会这样做，而不是使用一个 for loop。\n当这个此时大于或等于 10 次时，你大概就不会一个一个写了，而是使用　for 循环。\n然而，如果你稍微思考一下，你都知道：\n1 2 3 4 Foo(); Foo(); Foo(); // 省略 99997 条 Foo　call。 与\n1 2 3 4 for (ulong i = 0; i \u0026lt; 100_000; i++) { Foo(); } 并不完全等价。\n让我们以 CPU 的视角审视一下这个过程：\n对于第一个版本，就完全是 100, 000 条 call 指令。\n对于第二个版本，来说则是\n1 2 3 4 5 6 7 8 9 设置寄存器　i = 0 // xor rcx, rcx, rcx .loop_begin 判断 i 是否小于 100, 000， 如果不是就跳转　.exit_loop // cmp rcx, 100000　\u0026amp;\u0026amp; jge label 调用 Foo 函数　// call Foo 自增索引寄存器 // inc rcx 回到循环开始 // jmp .loop_begin .exit_loop 这两个版本各有各的优势以及缺陷：\n对于第一个版本：\n完成所有任务将执行 100, 000 条指令 所有指令也将占用 100, 000 * 4 字节的内存 对于第二个版本：\n完成所有任务将执行大约 100，000 * 6 条指令 所有指令仅占用　6 * 4 字节的内存 从性能上讲，第一个版本少执行大量指令，意味着更高的性能。但是从内存占用上讲，第一个版本将消耗大量内存，意味着更大的二进制可执行文件。详细可以看最后一节\n思考 那我们能否找到一个平衡点，即，损失一点内存占用，但是提高性能？\n不难发现，第二个版本的性能损失来自于每次循环中的以下部分：\n判断循环索引寄存器 自增循环索引寄存器 跳转 label 因此，我们的任务便是减少这三条指令的执行次数。那么如何减少呢？\n答案非常简单，让我们按照第一个版本的代码，在循环体中多次调用 Foo()。这样，我们就可以减少循环次数，也就减少了额外的指令开销。\n例如，我们可以按照以下方式改写：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 循环次数变成了原来的 1/10 for (ulong i = 0; i \u0026lt; 10_000; i++) { // 循环一次执行十条 call Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); } 这下，我们只需要执行大约 10_000 * 5 + 100_000 条指令，以及大幅减少了执行指令的条数。\n这个过程就是循环优化。大部分编译器都支持这种优化。\n问题 循环优化好是好，但是事情并不总是这么美好。当循环次数不是展开倍率的整数倍时，我们需要在循环完成后再手动执行。当循环次数不是常量时，就更麻烦了！\n要实现一个对于任意给定循环次数 n 都能够正确执行的循环展开，我们可以使用以下代码来实现：\n注意我切换成了 C 语言，这是为了给后面的达夫设备埋下伏笔\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void task(int n) { const int UNROLL_COUNT = 10; size_t loop_count = (n + UNROLL_COUNT - 1) / UNROLL_COUNT; for (size_t i = 0; i \u0026lt; loop_count; i++) { foo(); foo(); foo(); // 省略 7 行 } // 执行剩余的次数 switch (n % UNROLL_COUNT) { case 9: foo(); case 8: foo(); case 7: foo(); case 6: foo(); case 5: foo(); case 4: foo(); case 3: foo(); case 2: foo(); case 1: foo(); } } 达夫设备 我猜大部分人都会这样写，虽然可能会有一些小区别。然而 Tom Duff 给出了一个估计只有外星人才能一眼看明白的解法1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 void task(int count) { register count; { register n = (count + 7) / 8; switch(count % 8) { case 0: do{ foo(); case 7: foo(); case 6: foo(); case 5: foo(); case 4: foo(); case 3: foo(); case 2: foo(); case 1: foo(); } while (--n \u0026gt; 0); } } } 我特意关闭了语法高亮。一眼看上去，这 tm 是人能写出来的？你大概甚至很难相信这个代码能够通过编译。但它确实可以，并且据 Tom Duff 所说，它运行得很好1。\n我这里给出我直译的版本。尽管仍有一点区别，但是这个区别正是达夫设备的价值所在。\n直译版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void task(int count) { register count; { register n = (count + 7) / 8; switch(count % 8) { case 0: goto .remainder_is_0; case 7: goto .remainder_is_7; case 6: goto .remainder_is_6; case 5: goto .remainder_is_5; case 4: goto .remainder_is_4; case 3: goto .remainder_is_3; case 2: goto .remainder_is_2; case 1: goto .remainder_is_1; } do { .remainder_is_0: foo(); .remainder_is_1: foo(); .remainder_is_2: foo(); .remainder_is_3: foo(); .remainder_is_4: foo(); .remainder_is_5: foo(); .remainder_is_6: foo(); .remainder_is_7: foo(); } while(--n \u0026gt; 0); } } 当刚进入函数时，会先计算余数，并根据余数跳转到循环体内部，先执行相应次数的 foo()。接着，将会开始 do-while 循环，通过循环的方式执行剩下的次数。\n当我们仅考虑 foo() 的执行情况，我们可以得出以下版本的代码。\n意译版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void task(int count) { register count; { register n = (count + 7) / 8; switch(count % 8) { case 0: foo(); case 7: foo(); case 6: foo(); case 5: foo(); case 4: foo(); case 3: foo(); case 2: foo(); case 1: foo(); } do { foo(); foo(); foo(); foo(); foo(); foo(); foo(); foo(); } while(--n \u0026gt; 0); } } 这个版本的代码仅用于你了解这个过程中发生了什么。让我们回到上面直译版的代码。\n我前面提到，直译版的代码于 Tom Duff 给出的版本仍有一点区别。这个区别就是，我在 switch 语句的各个 case 中又使用　goto　跳转到了对应的位置，但是 Tom Duff 直接利用了 switch 语句跳转到了对应的部分。\n在这个过程中，每一个 case 就像 label 一样仅用于标识指令的地址而不影响 switch 语句内部其他的语句的语义，也不影响内部的控制流。\n达夫设备的性能 从性能上讲，达夫设备与我们编写的循环展开或者上面的意译版性能相同。不过，达夫设备并不总是在所有情况下提供最高性能（假设循环展开次数相同）。你可以查看 达夫设备 - 维基百科 了解更多。\n达夫设备应用？ 那么这个“特性”有什么作用呢？\nPuTTY 的作者使用这种特性，在 C 语言中实现了不改变代码控制流的情况下的无栈协程。\n通常来说，对于这样的协程方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public static IEnumerable\u0026lt;int\u0026gt; Fib() { int prev = 0, next = 1; yield return prev; yield return next; while (true) { int sum = prev + next; yield return sum; prev = next; next = sum; } } 会被编译成一个完全状态机：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 public static IEnumerable\u0026lt;int\u0026gt; Fib() =\u0026gt; new FibStateMachine(-2); [CompilerGenerated] private sealed class FibStateMachine : IEnumerable\u0026lt;int\u0026gt;, IEnumerable, IEnumerator\u0026lt;int\u0026gt;, IEnumerator, IDisposable { private int state; private int current; private int prev; private int next; private int sum; int IEnumerator\u0026lt;int\u0026gt;.Current =\u0026gt; this.current; object IEnumerator.Current =\u0026gt; this.current; public FibStateMachine(int state) =\u0026gt; this.state = state; private bool MoveNext() { switch (this.state) { default: return false; case 0: this.state = -1; this.prev = 0; this.next = 1; this.current = this.prev; this.state = 1; return true; case 1: this.state = -1; this.current = this.next; this.state = 2; return true; case 2: this.state = -1; break; case 3: this.state = -1; this.prev = this.next; this.next = this.sum; break; } this.sum = this.prev + this.next; this.current = this.sum; this.state = 3; return true; } IEnumerator\u0026lt;int\u0026gt; IEnumerable\u0026lt;int\u0026gt;.GetEnumerator() { if (this.state == -2) { this.state = 0; return this; } return new FibStateMachine(0); } IEnumerator IEnumerable.GetEnumerator() =\u0026gt; ((IEnumerable\u0026lt;int\u0026gt;)this).GetEnumerator(); void IEnumerator.Reset() =\u0026gt; throw new NotSupportedException(); void IDisposable.Dispose() { } } 可以看到，方法的控制流被编译器完全改变，因为每一个 yield return 语句都意味着下一次进入函数时要从一个新的状态开始继续运行。不仅如此，原有方法现在仅仅返回一个新的状态机对象，而不包含任何实现。这意味着，在原方法中，不改变控制流的情况下很难实现协程效果。\nSimon Tatham 利用达夫设备和宏，在 C 语言中，仅需插入少许代码即可实现无栈协程！就像我在前面给出的 C# 版本的协程一样。你一眼就能理解修改后的协程方法的控制流。\n你可以点击以下链接进行了解\n原文（英语） 译文（站外链接） 然而 Simon Tatham 的无栈协程也仅仅能存在于理论中，并且他给出的代码使用全局变量来保存协程上下文，因此不能同时调用同一个协程方法。而且，就像 Simon Tatham 在最后说的一样，这些“可怕破坏性的 crReturn 宏”，“非常糟糕的清晰度”以及“难如登天的重写复杂度”都阻止你在任何场合使用它。\n不过在了解这些原理的过程中，你的能力又提升了不少，不是吗？\n循环展开的性能 让我们回到文章一开始的三个代码片段。\n并非第一个版本的性能就是第二个版本的 1/6，由于存在大量指令，CPU 取指令同样消耗时间，并且这是一个相对耗时的任务。CPU 也具有分支预测等优化技巧来减少每次条件判断的耗时。并且在这种情况下，分支预测通常有较高的正确率。\n同时，Foo 内部的实现也影响执行效率的倍率。当 Foo 内部的实现越复杂，指令越多，循环所导致的性能缺陷就越不明显。\n因此，当你实际 Benchmark 这两段代码时，可能并不会有那么可观的差距。\n我使用以下代码进行 Benchmark：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public class BenchmarkLoopUnroll { [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)] public static void Foo() { } [Benchmark] [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)] public void ForLoopCompilerOptimized() { for (int i = 0; i \u0026lt; 1000; i++) { Foo(); } } [Benchmark] [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)] public void ForLoop10TimesUnroll() { for (int i = 0; i \u0026lt; 100; i++) { Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); Foo(); } } [Benchmark] [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)] public void ForLoopNoOptimization() { for (int i = 0; i \u0026lt; 1000; i++) { Foo(); } } [Benchmark(Baseline = true)] [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)] public void HardCodedThousandCall() { Foo(); Foo(); Foo(); // 省略 997 行 } } 使用 RyuJIT 得到以下测试结果：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // * Summary * BenchmarkDotNet v0.14.0, Ubuntu 24.04 LTS (Noble Numbat) WSL 13th Gen Intel Core i5-13500H, 1 CPU, 16 logical and 8 physical cores .NET SDK 8.0.108 [Host] : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2 DefaultJob : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2 | Method | Mean | Error | StdDev | Ratio | RatioSD | |------------------------- |---------:|----------:|----------:|------:|--------:| | HardCodedThousandCall | 1.095 us | 0.0129 us | 0.0120 us | 1.00 | 0.02 | | ForLoopNoOptimization | 1.110 us | 0.0211 us | 0.0187 us | 1.01 | 0.02 | | ForLoop10TimesUnroll | 1.050 us | 0.0193 us | 0.0180 us | 0.96 | 0.02 | | ForLoopCompilerOptimized | 1.070 us | 0.0117 us | 0.0109 us | 0.98 | 0.01 | // * Legends * Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Ratio : Mean of the ratio distribution ([Current]/[Baseline]) RatioSD : Standard deviation of the ratio distribution ([Current]/[Baseline]) 1 us : 1 Microsecond (0.000001 sec) // ***** BenchmarkRunner: End ***** Run time: 00:00:59 (59.07 sec), executed benchmarks: 4 可以看到，ForLoopNoOptimization 相较于 HardCodedThousandCall 并没有慢很多，虽然确实慢了一些。不过我们手动展开的方法 ForLoop10TimesUnroll 确实是有效的，并且比编译器自带的优化效果还要好。\n作者: Caiyi Shyu Email: caiyishyu@outlook.com https://swtch.com/duffs-device/td-1983.txt\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-09-25T16:18:43+08:00","permalink":"https://loongson-neuq.pages.dev/p/%E4%BB%8E%E5%BE%AA%E7%8E%AF%E5%B1%95%E5%BC%80%E5%88%B0%E8%BE%BE%E5%A4%AB%E8%AE%BE%E5%A4%87/","title":"从循环展开到达夫设备"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Math Typesetting Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ 1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ 1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ Inline Shortcodes For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\nImage gallery Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-24T00:00:00Z","permalink":"https://loongson-neuq.pages.dev/p/hugos-markdown-extension-usages/","title":"Hugo's markdown extension usages"}]